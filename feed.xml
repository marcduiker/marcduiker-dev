<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en" xml:base="http://localhost:8080/">
  <title>Articles by Marc Duiker</title>
  <subtitle>I ‚ù§Ô∏è OSS, Improving DevEx, Handcrafted Generative Art &amp; Pixel Art</subtitle>
  <link href="http://localhost:8080/feed.xml" rel="self" />
  <link href="http://localhost:8080/" />
  <updated>2024-12-27T15:57:14Z</updated>
  <id>http://localhost:8080/</id>
  <author>
    <name>Marc Duiker</name>
  </author>
	<entry>
      <title>Sponsoring Techorama NL 2024</title>
      <link href="http://localhost:8080/articles/sponsoring-techorama-nl-2024/" />
      <updated>2024-10-08T00:00:00Z</updated>
      <id>http://localhost:8080/articles/sponsoring-techorama-nl-2024/</id>
      <content type="html">
				&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/139.1.techorama-440w.webp 440w, http://localhost:8080/assets/images/139.1.techorama-650w.webp 650w, http://localhost:8080/assets/images/139.1.techorama-960w.webp 960w, http://localhost:8080/assets/images/139.1.techorama-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/139.1.techorama-1200w.webp&quot; width=&quot;1200&quot; height=&quot;900&quot; alt=&quot;Techorama selfie&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;On October 8 &amp;amp; 9 I was at &lt;a href=&quot;https://techorama.nl/&quot; rel=&quot;noopener&quot;&gt;Techorama Netherlands&lt;/a&gt; because Diagrid was sponsoring this event. Techorama is the best .NET / Azure focused conference in the Netherlands, and I was really looking forward to be there. The Techorama events are always themed, this year it was a &lt;em&gt;fun fair&lt;/em&gt; edition, and wow, they delivered! üéâ The venue was decorated with a lot of fun fair elements, and there were carnival rides outside! üé°&lt;/p&gt;&lt;p&gt;Diagrid was silver sponsor this year and I prepared a life-size pixelart sidecar motorcycle for our booth. Attendees ‚Äòsat‚Äô in the sidear and I took their picture with an instant camera. I had a lot of fun preparing for this and most people did get the reference of the sidecar (Dapr usses the sidecar pattern, since the Dapr process runs next to the application process).&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/139.6.techorama-sidecars-440w.webp 440w, http://localhost:8080/assets/images/139.6.techorama-sidecars-650w.webp 650w, http://localhost:8080/assets/images/139.6.techorama-sidecars-960w.webp 960w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/139.6.techorama-sidecars-960w.webp&quot; width=&quot;960&quot; height=&quot;1192&quot; alt=&quot;Techorama sidedar photos&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;I did notice that for some people it felt a bit too awkward to sit in the sidecar to have their picture taken. So, on the second day, I decided to leave the sidecar as decoration and have attendees play the Dapr game instead. This worked much better to attract people to the booth, and a lot of people played the game! üïπÔ∏è&lt;/p&gt;&lt;p&gt;This year my colleague Alice joined me at the booth and this made the conference much more enjoyable and easier compared to last year when I was by myself! Thanks Alice! üôè&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/139.2.techorama-440w.webp 440w, http://localhost:8080/assets/images/139.2.techorama-650w.webp 650w, http://localhost:8080/assets/images/139.2.techorama-960w.webp 960w, http://localhost:8080/assets/images/139.2.techorama-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/139.2.techorama-1200w.webp&quot; width=&quot;1200&quot; height=&quot;676&quot; alt=&quot;Techorama selfie&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/139.3.techorama-440w.webp 440w, http://localhost:8080/assets/images/139.3.techorama-650w.webp 650w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/139.3.techorama-650w.webp&quot; width=&quot;650&quot; height=&quot;756&quot; alt=&quot;Techorama selfie&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;I had so much fun at this conference! I met so many former colleagues, and people I have worked with during my consultancy years. And I met a great deal of new(ish) people, even some who remembered me from previous year when Diagrid sponsored Techorama. I hope to see all of you again next year! üëã&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/139.4.techorama-440w.webp 440w, http://localhost:8080/assets/images/139.4.techorama-650w.webp 650w, http://localhost:8080/assets/images/139.4.techorama-960w.webp 960w, http://localhost:8080/assets/images/139.4.techorama-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/139.4.techorama-1200w.webp&quot; width=&quot;1200&quot; height=&quot;676&quot; alt=&quot;MVPs&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/139.5.techorama-440w.webp 440w, http://localhost:8080/assets/images/139.5.techorama-650w.webp 650w, http://localhost:8080/assets/images/139.5.techorama-960w.webp 960w, http://localhost:8080/assets/images/139.5.techorama-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/139.5.techorama-1200w.webp&quot; width=&quot;1200&quot; height=&quot;676&quot; alt=&quot;Playing the Dapr game&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;
 			</content>
    </entry><entry>
      <title>Speaking at ContainerDays 2024</title>
      <link href="http://localhost:8080/articles/speaking-at-containerdays-2024/" />
      <updated>2024-09-08T00:00:00Z</updated>
      <id>http://localhost:8080/articles/speaking-at-containerdays-2024/</id>
      <content type="html">
				&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/138.1.containerdays-440w.webp 440w, http://localhost:8080/assets/images/138.1.containerdays-600w.webp 600w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/138.1.containerdays-600w.webp&quot; width=&quot;600&quot; height=&quot;800&quot; alt=&quot;Arriving at ContainerDays&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;TLDR:&lt;/strong&gt; &lt;a href=&quot;https://github.com/diagrid-labs/dapr-resiliency-and-durable-execution&quot; target=&quot;_blank&quot;&gt;Code demos on GitHub&lt;/a&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;From September 3-4 I was in Germany to speak at the &lt;a href=&quot;https://www.containerdays.io/containerdays-conference-2024/&quot; rel=&quot;noopener&quot;&gt;ContainerDays Conference&lt;/a&gt;. I heard a lot of good stories about this conference but never had the opportunity to attend or speak, so I was thrilled to finally speak there!&lt;/p&gt;&lt;p&gt;My session was on the first day of the conference and was titled: &lt;em&gt;Start building distributed applications with ease using building block APIs&lt;/em&gt;. In this session, I gave an introduction to the &lt;a href=&quot;https://dapr.io/&quot; rel=&quot;noopener&quot;&gt;Dapr OSS&lt;/a&gt; project, demonstrated the service invocation, state management, and pub/sub APIs, and showed how Dapr has built-in &lt;a href=&quot;https://docs.dapr.io/operations/resiliency/policies/&quot; rel=&quot;noopener&quot;&gt;resiliency&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;All the code I demonstrated can be found in &lt;a href=&quot;https://github.com/diagrid-labs/dapr-resiliency-and-durable-execution&quot; rel=&quot;noopener&quot;&gt;this repo&lt;/a&gt;. Check the &lt;a href=&quot;https://github.com/diagrid-labs/dapr-resiliency-and-durable-execution/tree/main/ResiliencyDemo&quot; rel=&quot;noopener&quot;&gt;ResiliencyDemo&lt;/a&gt; folder and the corresponding CodeTour. The slides I used are part of the Dapr OSS slide deck which can be downloaded from the &lt;a href=&quot;https://docs.dapr.io/contributing/presentations/&quot; rel=&quot;noopener&quot;&gt;Dapr docs&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/138.2.containerdays-440w.webp 440w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/138.2.containerdays-440w.webp&quot; width=&quot;440&quot; height=&quot;782&quot; alt=&quot;Speaking at ContainerDays&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;I had a great time at this conference, I had good conversations with Dapr enthusiasts (I hope to welcome you on the &lt;a href=&quot;https://bit.ly/dapr-discord&quot; rel=&quot;noopener&quot;&gt;Dapr Discord&lt;/a&gt;!), and connected with the organizers of &lt;a href=&quot;https://www.kcdmunich.de/&quot; rel=&quot;noopener&quot;&gt;KCD Munich&lt;/a&gt;, I‚Äôd love to join you next year! During the speaker dinner I sat next to Raymond de Jong, who I never met before, but we lived in the same small Dutch city for years. It was great to meet you!&lt;/p&gt;&lt;p&gt;Thanks again to the organizers for accepting my talk, the lovely MCs, and the attendees for joining my session, it‚Äôs great to speak for a full room! I hope we meet again next year!&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/138.3.containerdays-440w.webp 440w, http://localhost:8080/assets/images/138.3.containerdays-650w.webp 650w, http://localhost:8080/assets/images/138.3.containerdays-960w.webp 960w, http://localhost:8080/assets/images/138.3.containerdays-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/138.3.containerdays-1200w.webp&quot; width=&quot;1200&quot; height=&quot;676&quot; alt=&quot;Dapr stickers at ContainerDays&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;
 			</content>
    </entry><entry>
      <title>Speaking at Copenhagen Developers Festival 2024</title>
      <link href="http://localhost:8080/articles/speaking-at-cphdevfest-2024/" />
      <updated>2024-08-29T00:00:00Z</updated>
      <id>http://localhost:8080/articles/speaking-at-cphdevfest-2024/</id>
      <content type="html">
				&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/137.1.cphdevfest-440w.webp 440w, http://localhost:8080/assets/images/137.1.cphdevfest-650w.webp 650w, http://localhost:8080/assets/images/137.1.cphdevfest-960w.webp 960w, http://localhost:8080/assets/images/137.1.cphdevfest-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/137.1.cphdevfest-1200w.webp&quot; width=&quot;1200&quot; height=&quot;1007&quot; alt=&quot;Speaking at CphDevFest&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;TLDR:&lt;/strong&gt; &lt;a href=&quot;https://github.com/diagrid-labs/dapr-resiliency-and-durable-execution&quot; target=&quot;_blank&quot;&gt;Demo &amp;amp; CodeTour on GitHub&lt;/a&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;From August 28-30 I was in Denmark to speak at the &lt;a href=&quot;https://cphdevfest.com/&quot; rel=&quot;noopener&quot;&gt;Copenhagen Developers Festival&lt;/a&gt;, a conference organized by &lt;a href=&quot;https://ndcconferences.com/&quot; rel=&quot;noopener&quot;&gt;NDC Conferences&lt;/a&gt;. NDC always organizes excellent developer conferences and this was no exception. I really like the festival format where more creative aspects are included such as music, comedy, game shows, and using code for music and visuals (creative coding! ü§©).&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/137.2.cphdevfest-440w.webp 440w, http://localhost:8080/assets/images/137.2.cphdevfest-650w.webp 650w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/137.2.cphdevfest-650w.webp&quot; width=&quot;650&quot; height=&quot;866&quot; alt=&quot;Speaking at CphDevFest&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;My session was on the second day of the conference and was titled: &lt;em&gt;Failure is not an option: Durable Execution + Dapr = üöÄ&lt;/em&gt;. In this session, I demonstrated &lt;a href=&quot;https://docs.dapr.io/developing-applications/building-blocks/workflow/workflow-overview/&quot; rel=&quot;noopener&quot;&gt;Dapr Workflow&lt;/a&gt;, various workflow patterns, and Dapr &lt;a href=&quot;https://docs.dapr.io/operations/resiliency/policies/&quot; rel=&quot;noopener&quot;&gt;resiliency policies&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;All the code I demonstrated can be found in &lt;a href=&quot;https://github.com/diagrid-labs/dapr-resiliency-and-durable-execution&quot; rel=&quot;noopener&quot;&gt;this repo&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;There were quite some sessions about distributed applications or topics closely related to it. Layla Porter presented about the ‚Äòmodular monolith‚Äô and Loek Duys had a session about Radius, where he referenced (and demo-ed) Dapr.&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/137.3.cphdevfest-440w.webp 440w, http://localhost:8080/assets/images/137.3.cphdevfest-650w.webp 650w, http://localhost:8080/assets/images/137.3.cphdevfest-960w.webp 960w, http://localhost:8080/assets/images/137.3.cphdevfest-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/137.3.cphdevfest-1200w.webp&quot; width=&quot;1200&quot; height=&quot;676&quot; alt=&quot;Loek speaking about Radius and Dapr&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;I had a great time at this conference, I had good conversations with some Dapr enthusiasts (I hope to welcome you on the &lt;a href=&quot;https://bit.ly/dapr-discord&quot; rel=&quot;noopener&quot;&gt;Dapr Discord&lt;/a&gt;!), and as always it‚Äôs great to catch up with my peers (some are my former colleagues ü§ó).&lt;/p&gt;&lt;p&gt;Thanks again to the program committee for accepting my talk, and thanks to the attendees for giving me a great rating! üôè I hope to be around next year again. Maybe even to perform some live &lt;a href=&quot;http://localhost:8080/creative-coding&quot;&gt;creative coding&lt;/a&gt;! ü§î&lt;/p&gt;
 			</content>
    </entry><entry>
      <title>MC-ing at Azure &amp; AI Lowlands 2024</title>
      <link href="http://localhost:8080/articles/mcing-at-azure-lowlands-2024/" />
      <updated>2024-06-27T00:00:00Z</updated>
      <id>http://localhost:8080/articles/mcing-at-azure-lowlands-2024/</id>
      <content type="html">
				&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/136.1.azurelowlands2024-440w.webp 440w, http://localhost:8080/assets/images/136.1.azurelowlands2024-650w.webp 650w, http://localhost:8080/assets/images/136.1.azurelowlands2024-960w.webp 960w, http://localhost:8080/assets/images/136.1.azurelowlands2024-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/136.1.azurelowlands2024-1200w.webp&quot; width=&quot;1200&quot; height=&quot;900&quot; alt=&quot;MC-ing at Azure Lowlands&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;On June 27th I was at &lt;a href=&quot;https://azurelowlands.com/&quot; rel=&quot;noopener&quot;&gt;Azure &amp;amp; AI Lowlands&lt;/a&gt;, Utrecht, The Netherlands. Not as a speaker this time, but I was MC-ing üé§ in one of the rooms! I‚Äôm a big fan of the Azure Lowlands conferences, I love the venue &lt;em&gt;The Fabrique&lt;/em&gt;, an old industrial area, and the conference always has a good mix of topics, diverse speakers, and plenty of entertainment. The theme of this year was &lt;em&gt;‚ÄòThe 80s‚Äô&lt;/em&gt; ü§© and the opening act was a singing group of roller skaters, a skateboarder, and a BMX rider performing stunts on a half pipe! ü§Ø&lt;/p&gt;&lt;p&gt;I really enjoy MC-ing! I met many new speakers and listened to sessions which I probably wouldn‚Äôt have attended normally. Since I was MC-ing in the &lt;em&gt;Thriller&lt;/em&gt; room, I presented a small fact about the &lt;a href=&quot;https://en.wikipedia.org/wiki/Michael_Jackson%27s_Thriller_(music_video)&quot; rel=&quot;noopener&quot;&gt;Thriller music video&lt;/a&gt; each time a new session started.&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/136.5.azurelowlands2024-440w.webp 440w, http://localhost:8080/assets/images/136.5.azurelowlands2024-650w.webp 650w, http://localhost:8080/assets/images/136.5.azurelowlands2024-960w.webp 960w, http://localhost:8080/assets/images/136.5.azurelowlands2024-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/136.5.azurelowlands2024-1200w.webp&quot; width=&quot;1200&quot; height=&quot;798&quot; alt=&quot;Azure Lowlands speakers and org&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;The organizers did a great job with the 80s theme. There were 80s characters, cars (KITT, Ecto-1, A-team van), and of course lots of 80s music. I had a great time at Azure &amp;amp; AI Lowlands, and I‚Äôm looking forward to the next edition!&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/136.4.azurelowlands2024-440w.webp 440w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/136.4.azurelowlands2024-440w.webp&quot; width=&quot;440&quot; height=&quot;664&quot; alt=&quot;Marc Duiker and ET at Azure Lowlands&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/136.3.azurelowlands2024-440w.webp 440w, http://localhost:8080/assets/images/136.3.azurelowlands2024-650w.webp 650w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/136.3.azurelowlands2024-650w.webp&quot; width=&quot;650&quot; height=&quot;787&quot; alt=&quot;KITT at Azure Lowlands&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;
 			</content>
    </entry><entry>
      <title>Speaking at dotnet2024 about Dapr Resiliency &amp; Durable Execution</title>
      <link href="http://localhost:8080/articles/speaking-at-dotnet2024/" />
      <updated>2024-06-25T00:00:00Z</updated>
      <id>http://localhost:8080/articles/speaking-at-dotnet2024/</id>
      <content type="html">
				&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/135.1.dotnet2024-440w.webp 440w, http://localhost:8080/assets/images/135.1.dotnet2024-650w.webp 650w, http://localhost:8080/assets/images/135.1.dotnet2024-960w.webp 960w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/135.1.dotnet2024-960w.webp&quot; width=&quot;960&quot; height=&quot;720&quot; alt=&quot;Speaking at dotent2024&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;TLDR:&lt;/strong&gt; &lt;a href=&quot;https://github.com/diagrid-labs/dapr-resiliency-and-durable-execution&quot; target=&quot;_blank&quot;&gt;Demo &amp;amp; CodeTour (slides) on GitHub&lt;/a&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;On June 25th, I spoke at the &lt;a href=&quot;https://dotnetconfspain.com/&quot; rel=&quot;noopener&quot;&gt;&lt;em&gt;dotnet2024&lt;/em&gt;&lt;/a&gt; conference in Madrid, Spain. My session was titled: &lt;em&gt;Failure is not an option: Durable Execution + Dapr = üöÄ&lt;/em&gt; and covered how &lt;a href=&quot;https://dapr.io&quot; rel=&quot;noopener&quot;&gt;Dapr&lt;/a&gt; has built-in features and APIs that helps developers building resilient distributed applications.&lt;/p&gt;&lt;p&gt;This was the first conference session where I only used VSCode for both slides and demos (no PowerPoint or Keynote). I‚Äôm using the &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=vsls-contrib.codetour&quot; rel=&quot;noopener&quot;&gt;CodeTour extension&lt;/a&gt; to drive the presentation. Please have a look at the &lt;a href=&quot;https://github.com/diagrid-labs/dapr-resiliency-and-durable-execution&quot; rel=&quot;noopener&quot;&gt;GitHub repo&lt;/a&gt; with the demos and slides, clone it locally and give CodeTour a try!&lt;/p&gt;&lt;p&gt;I finally got the opportunity to meet &lt;a href=&quot;https://www.hanselman.com/&quot; rel=&quot;noopener&quot;&gt;Scott Hanselman&lt;/a&gt; who gave a great keynote session at this conference! He really is an inspiration to me, he is very thoughful in everything he does, and such a skilled speaker.&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/135.2.dotnet2024-440w.webp 440w, http://localhost:8080/assets/images/135.2.dotnet2024-650w.webp 650w, http://localhost:8080/assets/images/135.2.dotnet2024-960w.webp 960w, http://localhost:8080/assets/images/135.2.dotnet2024-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/135.2.dotnet2024-1200w.webp&quot; width=&quot;1200&quot; height=&quot;900&quot; alt=&quot;Speaking at dotent2024&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;Thanks to Unai Zorrilla Castra (&lt;a href=&quot;https://www.plainconcepts.com/&quot; rel=&quot;noopener&quot;&gt;Plain Concepts&lt;/a&gt;) and the other organizers of &lt;em&gt;dotnet2024&lt;/em&gt; for inviting me, making me feel welcome, and creating such a good conference! It was great meeting with both old and new speaker friends there. I hope to come back another time!&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Do you have questions about Dapr? Please join the &lt;a href=&quot;https://bit.ly/dapr-discord&quot; rel=&quot;noopener&quot;&gt;Dapr Discord&lt;/a&gt; and ask away! Do you like Dapr and want to show your support? Claim this &lt;a href=&quot;https://bit.ly/dapr-supporter&quot; rel=&quot;noopener&quot;&gt;community supporter Holopin badge&lt;/a&gt;!&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://bit.ly/dapr-supporter&quot;&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/124.3.dapr-community-supporter-440w.webp 440w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/124.3.dapr-community-supporter-440w.webp&quot; width=&quot;440&quot; height=&quot;440&quot; alt=&quot;Dapr community supporter badge&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/a&gt;&lt;/p&gt;
 			</content>
    </entry><entry>
      <title>Speaking at FutureTech 2024 about Dapr Actors</title>
      <link href="http://localhost:8080/articles/speaking-at-futuretech-2024/" />
      <updated>2024-04-17T00:00:00Z</updated>
      <id>http://localhost:8080/articles/speaking-at-futuretech-2024/</id>
      <content type="html">
				&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/134.1.futuretech-440w.webp 440w, http://localhost:8080/assets/images/134.1.futuretech-650w.webp 650w, http://localhost:8080/assets/images/134.1.futuretech-960w.webp 960w, http://localhost:8080/assets/images/134.1.futuretech-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/134.1.futuretech-1200w.webp&quot; width=&quot;1200&quot; height=&quot;1200&quot; alt=&quot;Speaking at FutureTech&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;TLDR:&lt;/strong&gt; &lt;a href=&quot;http://localhost:8080/articles/2024/134.futuretech-dapr-actors.pdf&quot; target=&quot;_blank&quot;&gt;Download the slides&lt;/a&gt; | &lt;a href=&quot;https://github.com/diagrid-labs/dapr-actor-demos&quot; target=&quot;_blank&quot;&gt;Dapr Actor Demos on GitHub&lt;/a&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;On April 17th, I spoke at the &lt;a href=&quot;https://futuretech.nl&quot; rel=&quot;noopener&quot;&gt;FutureTech&lt;/a&gt; conference in Utrecht, the Netherlands. I gave a session about Dapr Actors, one of the &lt;a href=&quot;https://dapr.io&quot; rel=&quot;noopener&quot;&gt;Dapr&lt;/a&gt; APIs that allows you to build distributed and concurrent applications using the Actor Model.&lt;/p&gt;&lt;p&gt;Next to my session, there were three other sessions that covered some aspects of Dapr:&lt;/p&gt;&lt;ul class=&quot;list&quot;&gt;&lt;li&gt;&lt;em&gt;Microservices Orchestration with Azure Container Apps&lt;/em&gt; by Eduard Keilholz&lt;/li&gt;&lt;li&gt;&lt;em&gt;DAPR and .NET Aspire: A royal wedding&lt;/em&gt; by Florian van Dillen&lt;/li&gt;&lt;li&gt;&lt;em&gt;Building Future-Ready Apps with .NET 8 and Azure Serverless Ecosystem&lt;/em&gt; by Stas Lebedenko&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;It was awesome to see so much Dapr content at a conference like FutureTech!&lt;/p&gt;&lt;p&gt;As usual, I brought plenty of Dapr stickers for the conference attendees. All of them were gone by the end of the day üòÅ.&lt;/p&gt;&lt;p&gt;Thanks to the organizers of FutureTech for inviting me and organizing this event! I really enjoyed meeting many former colleagues and friends again. The speaker dinner the evening before was an excellent opportunity to connect with peers and meet lovely new people.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Do you have questions about Dapr? Please join the &lt;a href=&quot;https://bit.ly/dapr-discord&quot; rel=&quot;noopener&quot;&gt;Dapr Discord&lt;/a&gt; and ask away! Do you like Dapr and want to show your support? Claim this &lt;a href=&quot;https://bit.ly/dapr-supporter&quot; rel=&quot;noopener&quot;&gt;community supporter Holopin badge&lt;/a&gt;!&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://bit.ly/dapr-supporter&quot;&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/124.3.dapr-community-supporter-440w.webp 440w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/124.3.dapr-community-supporter-440w.webp&quot; width=&quot;440&quot; height=&quot;440&quot; alt=&quot;Dapr community supporter badge&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/a&gt;&lt;/p&gt;
 			</content>
    </entry><entry>
      <title>Creating the Dapr game</title>
      <link href="http://localhost:8080/articles/dapr-game/" />
      <updated>2024-03-24T00:00:00Z</updated>
      <id>http://localhost:8080/articles/dapr-game/</id>
      <content type="html">
				&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/133.2.dapr-game-384w.webp 384w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/133.2.dapr-game-384w.webp&quot; width=&quot;384&quot; height=&quot;384&quot; alt=&quot;Dapr game&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;I made another retro game! This time it‚Äôs a Dapr inspired game that I made for people new to Dapr. The game was first shown at KubeCon Paris 2024 at the Diagrid booth (see &lt;a href=&quot;http://localhost:8080/articles/dapr-game/132.kubecon-paris-2024.md&quot;&gt;this post&lt;/a&gt;) but the game is now available for everyone to play online at &lt;a href=&quot;https://marcduiker.itch.io/dapr-game&quot; rel=&quot;noopener&quot;&gt;itch.io&lt;/a&gt;! üéâ&lt;/p&gt;&lt;iframe frameborder=&quot;0&quot; src=&quot;https://itch.io/embed/2163754&quot; width=&quot;552&quot; height=&quot;167&quot;&gt;&amp;lt;a href=&quot;https://marcduiker.itch.io/dapr-game&quot;&amp;gt;The Dapr Game by marcduiker&amp;lt;/a&amp;gt;&lt;/iframe&gt;&lt;p&gt;The player needs to avoid rogue messages, collect Dapr coins and the Dapr hat, in order to get to the development team and share their Dapr knowledge. The game has an educational element because after a level is completed some Dapr information is shared with the player.&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/133.4.dapr-game-sprite-384w.webp 384w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/133.4.dapr-game-sprite-384w.webp&quot; width=&quot;384&quot; height=&quot;384&quot; alt=&quot;Dapr game sprite&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;I made the game with &lt;a href=&quot;https://www.lexaloffle.com/pico-8.php&quot; rel=&quot;noopener&quot;&gt;Pico8&lt;/a&gt;, a fantasy game console for making, sharing, and playing retro games. I had a lot of fun drawing all the sprites, like the computers and the groups of developers, designing the sound effects, and composing the music. The gameplay is very similar to the Azure Functions game, but I added some new gameplay features, such as the gray/blue powerlines to limit player movement once the Dapr hat is collected. At the moment the game consists of 3 levels, but I will add a couple more over time.&lt;/p&gt;&lt;p&gt;If you have the Pico8 software, you can download this png file below and play the game offline.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Note: The links at the end of the game won‚Äôt open in a browser when playing in Pico8 offline. That functionality is only supported in the web version available on &lt;a href=&quot;http://itch.io&quot; rel=&quot;noopener&quot;&gt;itch.io&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/133.3.pico8-dapr-cart-440w.webp 440w, http://localhost:8080/assets/images/133.3.pico8-dapr-cart-650w.webp 650w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/133.3.pico8-dapr-cart-650w.webp&quot; width=&quot;650&quot; height=&quot;832&quot; alt=&quot;Dapr game Pico8 cart&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;
 			</content>
    </entry><entry>
      <title>KubeCon Paris 2024</title>
      <link href="http://localhost:8080/articles/kubecon-paris-2024/" />
      <updated>2024-03-23T00:00:00Z</updated>
      <id>http://localhost:8080/articles/kubecon-paris-2024/</id>
      <content type="html">
				&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/132.1.kubecon-paris-440w.webp 440w, http://localhost:8080/assets/images/132.1.kubecon-paris-650w.webp 650w, http://localhost:8080/assets/images/132.1.kubecon-paris-960w.webp 960w, http://localhost:8080/assets/images/132.1.kubecon-paris-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/132.1.kubecon-paris-1200w.webp&quot; width=&quot;1200&quot; height=&quot;799&quot; alt=&quot;KubeCon Paris Diagrid Team&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;From March 19-22 KubeCon Europe was taking place in Paris. Diagrid was sponsoring both &lt;a href=&quot;https://events.linuxfoundation.org/kubecon-cloudnativecon-europe/co-located-events/appdevelopercon/&quot; rel=&quot;noopener&quot;&gt;AppDeveloperCon&lt;/a&gt; and &lt;a href=&quot;https://events.linuxfoundation.org/kubecon-cloudnativecon-europe/&quot; rel=&quot;noopener&quot;&gt;KubeCon&lt;/a&gt;, and I was responsible for the booths, swag, a Dapr demo to highlight a new free edition of &lt;a href=&quot;https://www.diagrid.io/conductor&quot; rel=&quot;noopener&quot;&gt;one of our products&lt;/a&gt;, and a &lt;a href=&quot;http://localhost:8080/articles/kubecon-paris-2024/133.dapr-game.md&quot;&gt;retro game&lt;/a&gt; to attract people to the booth.&lt;/p&gt;&lt;p&gt;A week before KubeCon I recorded a video to announce our presence at the event:&lt;/p&gt;&lt;!-- ## TODO --&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/WlkThEEW10s?si=LEfK1ebCdwd_R3ii&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; referrerpolicy=&quot;strict-origin-when-cross-origin&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;p&gt;My colleagues did a ton of talks at both the co-located event and KubeCon, and I had the opportunity to give a lightning talk about Dapr. It was my first time speaking at KubeCon, so I was quite excited for this!&lt;/p&gt;&lt;iframe width=&quot;326&quot; height=&quot;580&quot; src=&quot;https://www.youtube.com/embed/Hz_xsEHPx9c&quot; title=&quot;KubeCon Paris 2024&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/132.5.kubecon-paris-440w.webp 440w, http://localhost:8080/assets/images/132.5.kubecon-paris-650w.webp 650w, http://localhost:8080/assets/images/132.5.kubecon-paris-960w.webp 960w, http://localhost:8080/assets/images/132.5.kubecon-paris-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/132.5.kubecon-paris-1200w.webp&quot; width=&quot;1200&quot; height=&quot;817&quot; alt=&quot;KubeCon Dapr game&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;I had a great time at the booth, talking to loads of people about Dapr and the Diagrid products. Many attendees (and other sponsors) played the Dapr retro game, took the pixelart stickers, or the multi tool, our give-away, that symbolizes Dapr and all of its APIs.&lt;/p&gt;&lt;iframe width=&quot;326&quot; height=&quot;580&quot; src=&quot;https://www.youtube.com/embed/hAP91F3ZyqE&quot; title=&quot;KubeCon Paris 2024 - Playing the Dapr game&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;p&gt;It was great seeing my colleagues again, and meeting with many Dapr enthusiasts &amp;amp; end-users IRL for the first time! üéâ&lt;/p&gt;&lt;p&gt;I‚Äôm really exhausted after 4 conference days, but I‚Äôm also very happy with the result. Now, I‚Äôll go to sleep for two days üò¥.&lt;/p&gt;
 			</content>
    </entry><entry>
      <title>Organizing Dapr Day 2024</title>
      <link href="http://localhost:8080/articles/dapr-day-2024/" />
      <updated>2024-02-21T00:00:00Z</updated>
      <id>http://localhost:8080/articles/dapr-day-2024/</id>
      <content type="html">
				&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/131.1.dapr-day-2024-banner-440w.webp 440w, http://localhost:8080/assets/images/131.1.dapr-day-2024-banner-650w.webp 650w, http://localhost:8080/assets/images/131.1.dapr-day-2024-banner-960w.webp 960w, http://localhost:8080/assets/images/131.1.dapr-day-2024-banner-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/131.1.dapr-day-2024-banner-1200w.webp&quot; width=&quot;1200&quot; height=&quot;304&quot; alt=&quot;Dapr Day 2024&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;On Feb 21st Cecil Phillip and I MC-ed Dapr Day 2024, an online conference to learn all about the Dapr APIs for building distributed applications and best practices to run your apps in production.&lt;/p&gt;&lt;p&gt;Yaron Schneider, one of the Dapr co-creaters opened the event, followed by sessions from:&lt;/p&gt;&lt;ul class=&quot;list&quot;&gt;&lt;li&gt;Alex Mang - Lessons Learnt From Running Dapr-based Apps In Production&lt;/li&gt;&lt;li&gt;Robin Konrad - .NET Aspire &amp;amp; Dapr&lt;/li&gt;&lt;li&gt;Miroslav Janeski - Dapr Unleashed: Accelerating Microservice Development&lt;/li&gt;&lt;li&gt;Irvi Aini - Tracing Simplified: An Introduction to Microservices Observability with Dapr&lt;/li&gt;&lt;li&gt;Michiel van Praat - Building fintech solutions with Dapr&lt;/li&gt;&lt;li&gt;Gilles Flisch &amp;amp; Lior Nabat - Elia‚Äôs Strategy for Streamlining Superior .NET 8 Microservices Application Development with Dapr and KubeMQ&lt;/li&gt;&lt;li&gt;Mika Krooswijk &amp;amp; Stijn Rutten - Implementing Dapr in an existing environment&lt;/li&gt;&lt;li&gt;Kendall Roden - Dapr integrated: A tour of tools, platforms and partnerships backed by Dapr!&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;You can watch all the sessions in this &lt;a href=&quot;https://youtube.com/playlist?list=PLcip_LgkYwzvXxnvC4r1dax2ro-_OrpPy&amp;amp;feature=shared&quot; rel=&quot;noopener&quot;&gt;playlist&lt;/a&gt; on YouTube:&lt;/p&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/videoseries?si=C4S-iBiKQa4yi36p&amp;amp;list=PLcip_LgkYwzvXxnvC4r1dax2ro-_OrpPy&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;p&gt;Next to MC-ing the event, I also was responsible for organizing the event, assembling a program committee, reviewing sessions, communicating with the speakers, and video editing. Thanks to the CNCF for using their platform for the CfPs and streaming the event! üôè&lt;/p&gt;&lt;p&gt;I‚Äôm looking forward to the next Dapr Day! üòÅ&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/131.2.dapr-day-2024-banner-440w.webp 440w, http://localhost:8080/assets/images/131.2.dapr-day-2024-banner-650w.webp 650w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/131.2.dapr-day-2024-banner-650w.webp&quot; width=&quot;650&quot; height=&quot;165&quot; alt=&quot;Dapr Day 2024 animation&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;Do you have questions about Dapr? Please join the &lt;a href=&quot;https://bit.ly/dapr-discord&quot; rel=&quot;noopener&quot;&gt;Dapr Discord&lt;/a&gt; and ask away! Do you like Dapr and want to show your support? Claim this &lt;a href=&quot;https://bit.ly/dapr-supporter&quot; rel=&quot;noopener&quot;&gt;community supporter Holopin badge&lt;/a&gt;!&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://bit.ly/dapr-supporter&quot;&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/124.3.dapr-community-supporter-440w.webp 440w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/124.3.dapr-community-supporter-440w.webp&quot; width=&quot;440&quot; height=&quot;440&quot; alt=&quot;Dapr community supporter badge&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/a&gt;&lt;/p&gt;
 			</content>
    </entry><entry>
      <title>Speaking at Swetugg Stockholm 2024</title>
      <link href="http://localhost:8080/articles/speaking-at-swetugg-stockholm-2024/" />
      <updated>2024-02-07T00:00:00Z</updated>
      <id>http://localhost:8080/articles/speaking-at-swetugg-stockholm-2024/</id>
      <content type="html">
				&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/126.1.swetugg-440w.webp 440w, http://localhost:8080/assets/images/126.1.swetugg-650w.webp 650w, http://localhost:8080/assets/images/126.1.swetugg-960w.webp 960w, http://localhost:8080/assets/images/126.1.swetugg-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/126.1.swetugg-1200w.webp&quot; width=&quot;1200&quot; height=&quot;903&quot; alt=&quot;Speaking at Swetugg&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;TLDR:&lt;/strong&gt; &lt;a href=&quot;http://localhost:8080/articles/2024/126.swetugg-serverless-dapr.pdf&quot; target=&quot;_blank&quot;&gt;Download the slides&lt;/a&gt; | &lt;a href=&quot;https://github.com/diagrid-labs/catalyst-pizza-demo&quot; target=&quot;_blank&quot;&gt;Catalyst Pizza Demo on GitHub&lt;/a&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;This week I‚Äôm at &lt;a href=&quot;https://www.swetugg.se/sthlm-2024&quot; rel=&quot;noopener&quot;&gt;Swetugg Stockholm&lt;/a&gt; where I just gave my session &lt;em&gt;‚ÄúOne API to rule them all: serverless Dapr‚Äù&lt;/em&gt;. This is a brand-new session, where I talked about the various Dapr deployment models, and demonstrated &lt;a href=&quot;https://www.diagrid.io/catalyst&quot; rel=&quot;noopener&quot;&gt;Diagrid Catalyst&lt;/a&gt;, a new product that offers true serverless Dapr APIs for communication, data, and workflow. Thanks to everyone who attended my session, the room was fully packed!&lt;/p&gt;&lt;p&gt;As usual, I brought plenty of Dapr stickers for the attendees, and I also brought some Dutch stroopwafels to share with the other speakers.&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/126.2.swetugg-440w.webp 440w, http://localhost:8080/assets/images/126.2.swetugg-650w.webp 650w, http://localhost:8080/assets/images/126.2.swetugg-960w.webp 960w, http://localhost:8080/assets/images/126.2.swetugg-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/126.2.swetugg-1200w.webp&quot; width=&quot;1200&quot; height=&quot;675&quot; alt=&quot;Stickers and stroopwafels&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;Shout-out to the Swetugg organizers, they put together a great program, a lovely speaker dinner, and put a lot of effort in creating a relaxing environment for their speakers üôè.&lt;/p&gt;&lt;p&gt;If you want to know more about Diagrid Catalyst, please visit the &lt;a href=&quot;https://www.diagrid.io/catalyst&quot; rel=&quot;noopener&quot;&gt;Diagrid website&lt;/a&gt;. You can sign up for the early access program there. I‚Äôd love go get your feedback on the product!&lt;/p&gt;
 			</content>
    </entry><entry>
      <title>Azure Community Enthusiasts: Dapr</title>
      <link href="http://localhost:8080/articles/azure-community-enthusiasts-5-feb/" />
      <updated>2024-02-05T00:00:00Z</updated>
      <id>http://localhost:8080/articles/azure-community-enthusiasts-5-feb/</id>
      <content type="html">
				&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/129.1.azure-community-enthusiasts-440w.webp 440w, http://localhost:8080/assets/images/129.1.azure-community-enthusiasts-650w.webp 650w, http://localhost:8080/assets/images/129.1.azure-community-enthusiasts-960w.webp 960w, http://localhost:8080/assets/images/129.1.azure-community-enthusiasts-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/129.1.azure-community-enthusiasts-1200w.webp&quot; width=&quot;1200&quot; height=&quot;677&quot; alt=&quot;Azure Community Enthusiasts&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;On Feb 5th I was a guest speaker at Azure Community Enthusiasts, a bi-weekly live show on &lt;a href=&quot;https://www.youtube.com/@AzureCommUG&quot; rel=&quot;noopener&quot;&gt;YouTube&lt;/a&gt; about anything related to the Azure cloud. I gave a session about Dapr, the Distributed Application Runtime. The other guest was Will Velida, who gave an introduction to Radius.&lt;/p&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/vV9R3owCdcQ&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;p&gt;Do you have questions about Dapr? Please join the &lt;a href=&quot;https://bit.ly/dapr-discord&quot; rel=&quot;noopener&quot;&gt;Dapr Discord&lt;/a&gt; and ask away! Do you like Dapr and want to show your support? Claim this &lt;a href=&quot;https://bit.ly/dapr-supporter&quot; rel=&quot;noopener&quot;&gt;community supporter Holopin badge&lt;/a&gt;!&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://bit.ly/dapr-supporter&quot;&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/124.3.dapr-community-supporter-440w.webp 440w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/124.3.dapr-community-supporter-440w.webp&quot; width=&quot;440&quot; height=&quot;440&quot; alt=&quot;Dapr community supporter badge&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/a&gt;&lt;/p&gt;
 			</content>
    </entry><entry>
      <title>Participating in Festive Tech Calendar 2023</title>
      <link href="http://localhost:8080/articles/festive-tech-calendar-2023/" />
      <updated>2023-12-20T00:00:00Z</updated>
      <id>http://localhost:8080/articles/festive-tech-calendar-2023/</id>
      <content type="html">
				&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/127.1.festive-tech-calendar-440w.webp 440w, http://localhost:8080/assets/images/127.1.festive-tech-calendar-650w.webp 650w, http://localhost:8080/assets/images/127.1.festive-tech-calendar-960w.webp 960w, http://localhost:8080/assets/images/127.1.festive-tech-calendar-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/127.1.festive-tech-calendar-1200w.webp&quot; width=&quot;1200&quot; height=&quot;673&quot; alt=&quot;Festive Tech Calendar&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;I‚Äôm a big fan of community driven tech events, and &lt;a href=&quot;https://festivetechcalendar.com/&quot; rel=&quot;noopener&quot;&gt;Festive Tech Calendar&lt;/a&gt; is one of them. It‚Äôs a virtual advent calendar for the tech community, where each day in December new content is released that is created by the community. This year I submitted a session about creating a workflow with Dapr and .NET, and made it in a Christmas theme. The session is called &lt;em&gt;‚ÄúHow Santa orchestrates the elves with Dapr Workflow‚Äù&lt;/em&gt; and covers workflow application patterns such as chaining, fan-out/fan-in, and child workflows.&lt;/p&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/UjGMmY8D9sw&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;p&gt;The Santa Claus Workflow demo is available on &lt;a href=&quot;https://github.com/diagrid-labs/santa-claus-workflow&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;A big shout-out goes to the &lt;a href=&quot;https://twitter.com/_cloudfamily&quot; rel=&quot;noopener&quot;&gt;organizers&lt;/a&gt; as they always combine this event with a charity üí™.&lt;/p&gt;&lt;p&gt;Do you have questions about Dapr? Please join the &lt;a href=&quot;https://bit.ly/dapr-discord&quot; rel=&quot;noopener&quot;&gt;Dapr Discord&lt;/a&gt; and ask away! Do you like Dapr and want to show your support? Claim this &lt;a href=&quot;https://bit.ly/dapr-supporter&quot; rel=&quot;noopener&quot;&gt;community supporter Holopin badge&lt;/a&gt;!&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://bit.ly/dapr-supporter&quot;&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/124.3.dapr-community-supporter-440w.webp 440w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/124.3.dapr-community-supporter-440w.webp&quot; width=&quot;440&quot; height=&quot;440&quot; alt=&quot;Dapr community supporter badge&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/a&gt;&lt;/p&gt;
 			</content>
    </entry><entry>
      <title>Speaking at Cloudbrew 2023</title>
      <link href="http://localhost:8080/articles/speaking-at-cloudbrew-2023/" />
      <updated>2023-12-09T00:00:00Z</updated>
      <id>http://localhost:8080/articles/speaking-at-cloudbrew-2023/</id>
      <content type="html">
				&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/125.1.cloudbrew-440w.webp 440w, http://localhost:8080/assets/images/125.1.cloudbrew-650w.webp 650w, http://localhost:8080/assets/images/125.1.cloudbrew-960w.webp 960w, http://localhost:8080/assets/images/125.1.cloudbrew-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/125.1.cloudbrew-1200w.webp&quot; width=&quot;1200&quot; height=&quot;900&quot; alt=&quot;Speaking at Cloudbrew&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;TLDR:&lt;/strong&gt; &lt;a href=&quot;http://localhost:8080/articles/2023/125.cloudbrew-dapr-actors.pdf&quot; target=&quot;_blank&quot;&gt;Download the slides&lt;/a&gt; | &lt;a href=&quot;https://github.com/diagrid-labs/dapr-actor-demos&quot; target=&quot;_blank&quot;&gt;Dapr actor demos on GitHub&lt;/a&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Last Thursday and Friday I was in Mechelen (BE) for &lt;a href=&quot;https://www.cloudbrew.be/&quot; rel=&quot;noopener&quot;&gt;Cloudbrew 2023&lt;/a&gt;. I gave my session &lt;em&gt;‚ÄúLights, camera, action! Building distributed applications with Dapr Actors‚Äù&lt;/em&gt; on Friday in the auditorium.&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/125.2.cloudbrew-440w.webp 440w, http://localhost:8080/assets/images/125.2.cloudbrew-650w.webp 650w, http://localhost:8080/assets/images/125.2.cloudbrew-960w.webp 960w, http://localhost:8080/assets/images/125.2.cloudbrew-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/125.2.cloudbrew-1200w.webp&quot; width=&quot;1200&quot; height=&quot;900&quot; alt=&quot;Speaking at Cloudbrew&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;(Top two pictures by Andre van den Berg)&lt;/em&gt;&lt;/p&gt;&lt;p&gt;It was my second time at CloudBrew, and I really enjoy this mid-size conference held in Lamot conference center, a former beer brewery üç∫. Kudos to the crew for organizing such a welcoming event. I look forward to the next edition!&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/125.3.cloudbrew-440w.webp 440w, http://localhost:8080/assets/images/125.3.cloudbrew-650w.webp 650w, http://localhost:8080/assets/images/125.3.cloudbrew-960w.webp 960w, http://localhost:8080/assets/images/125.3.cloudbrew-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/125.3.cloudbrew-1200w.webp&quot; width=&quot;1200&quot; height=&quot;1600&quot; alt=&quot;Selfie with hat&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/125.4.cloudbrew-440w.webp 440w, http://localhost:8080/assets/images/125.4.cloudbrew-650w.webp 650w, http://localhost:8080/assets/images/125.4.cloudbrew-960w.webp 960w, http://localhost:8080/assets/images/125.4.cloudbrew-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/125.4.cloudbrew-1200w.webp&quot; width=&quot;1200&quot; height=&quot;675&quot; alt=&quot;Dapr stickers&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;The slides can be &lt;a href=&quot;http://localhost:8080/articles/2023/125.cloudbrew-dapr-actors.pdf&quot; target=&quot;_blank&quot;&gt;downloaded here&lt;/a&gt;. The Dapr actor demos can be found in &lt;a href=&quot;https://github.com/diagrid-labs/dapr-actor-demos&quot; rel=&quot;noopener&quot;&gt;this GitHub repo&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;A special shout-out goes to &lt;a href=&quot;https://twitter.com/iamalexmang&quot; rel=&quot;noopener&quot;&gt;Alex Mang&lt;/a&gt; for giving a great introduction to Dapr by giving examples how it speeds up microservice development üöÄ.&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/125.5.cloudbrew-alexmang-440w.webp 440w, http://localhost:8080/assets/images/125.5.cloudbrew-alexmang-650w.webp 650w, http://localhost:8080/assets/images/125.5.cloudbrew-alexmang-960w.webp 960w, http://localhost:8080/assets/images/125.5.cloudbrew-alexmang-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/125.5.cloudbrew-alexmang-1200w.webp&quot; width=&quot;1200&quot; height=&quot;675&quot; alt=&quot;Alex Mang at CloudBrew&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Do you have questions about Dapr? Please join the &lt;a href=&quot;https://bit.ly/dapr-discord&quot; rel=&quot;noopener&quot;&gt;Dapr Discord&lt;/a&gt; and ask away! Do you like Dapr and want to show your support? Claim this &lt;a href=&quot;https://bit.ly/dapr-supporter&quot; rel=&quot;noopener&quot;&gt;community supporter Holopin badge&lt;/a&gt;!&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://bit.ly/dapr-supporter&quot;&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/124.3.dapr-community-supporter-440w.webp 440w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/124.3.dapr-community-supporter-440w.webp&quot; width=&quot;440&quot; height=&quot;440&quot; alt=&quot;Dapr community supporter badge&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/a&gt;&lt;/p&gt;
 			</content>
    </entry><entry>
      <title>Speaking at BuildStuff 2023</title>
      <link href="http://localhost:8080/articles/speaking-at-buildstuff-2023/" />
      <updated>2023-11-18T00:00:00Z</updated>
      <id>http://localhost:8080/articles/speaking-at-buildstuff-2023/</id>
      <content type="html">
				&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/124.1.buildstuff-440w.webp 440w, http://localhost:8080/assets/images/124.1.buildstuff-650w.webp 650w, http://localhost:8080/assets/images/124.1.buildstuff-960w.webp 960w, http://localhost:8080/assets/images/124.1.buildstuff-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/124.1.buildstuff-1200w.webp&quot; width=&quot;1200&quot; height=&quot;675&quot; alt=&quot;Speaking at BuildStuff&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;TLDR:&lt;/strong&gt; &lt;a href=&quot;http://localhost:8080/assets/blog/images/2023/124.dapr-workflow-buildstuff.pdf&quot; target=&quot;_blank&quot;&gt;Download the slides&lt;/a&gt; | &lt;a href=&quot;https://github.com/diagrid-labs/dapr-workflow-demos&quot; target=&quot;_blank&quot;&gt;Dapr workflow demos on GitHub&lt;/a&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Last Thursday and Friday I was in Vilnius Lithuania for &lt;a href=&quot;https://www.buildstuff.events/&quot; rel=&quot;noopener&quot;&gt;BuildStuff 2023&lt;/a&gt;. I gave my session &lt;em&gt;‚ÄúOrchestrating your business logic reliably with workflow as code‚Äù&lt;/em&gt; on Friday. It was my first time at this conference (also my first time in Lithuania) and I really enjoyed it. The conference was very well organized, I loved the under water theme (with all the deep dive sessions ü§ø), and I met with both old and new friends ü§ó. Thanks everyone for attending my session, being patient when the projector failed üòÖ, and for asking great questions after the session!&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/124.2.buildstuff-440w.webp 440w, http://localhost:8080/assets/images/124.2.buildstuff-650w.webp 650w, http://localhost:8080/assets/images/124.2.buildstuff-960w.webp 960w, http://localhost:8080/assets/images/124.2.buildstuff-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/124.2.buildstuff-1200w.webp&quot; width=&quot;1200&quot; height=&quot;900&quot; alt=&quot;Marc with shark&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;The slides can be &lt;a href=&quot;http://localhost:8080/assets/blog/images/2023/124.dapr-workflow-buildstuff.pdf&quot; target=&quot;_blank&quot;&gt;downloaded here&lt;/a&gt;. The Dapr workflow demos can be found in &lt;a href=&quot;https://github.com/diagrid-labs/dapr-workflow-demos&quot; rel=&quot;noopener&quot;&gt;this GitHub repo&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Do you have questions about Dapr? Please join the &lt;a href=&quot;https://bit.ly/dapr-discord&quot; rel=&quot;noopener&quot;&gt;Dapr Discord&lt;/a&gt; and ask away! Do you like Dapr and want to show your support? Claim this &lt;a href=&quot;https://bit.ly/dapr-supporter&quot; rel=&quot;noopener&quot;&gt;community supporter Holopin badge&lt;/a&gt;!&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/124.3.dapr-community-supporter-440w.webp 440w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/124.3.dapr-community-supporter-440w.webp&quot; width=&quot;440&quot; height=&quot;440&quot; alt=&quot;Dapr community supporter badge&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;
 			</content>
    </entry><entry>
      <title>Speaking at Swetugg G√∂teborg</title>
      <link href="http://localhost:8080/articles/speaking-at-swetugg-goteborg-2023/" />
      <updated>2023-10-27T00:00:00Z</updated>
      <id>http://localhost:8080/articles/speaking-at-swetugg-goteborg-2023/</id>
      <content type="html">
				&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/123.1.swetugg-marcduiker-440w.webp 440w, http://localhost:8080/assets/images/123.1.swetugg-marcduiker-650w.webp 650w, http://localhost:8080/assets/images/123.1.swetugg-marcduiker-960w.webp 960w, http://localhost:8080/assets/images/123.1.swetugg-marcduiker-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/123.1.swetugg-marcduiker-1200w.webp&quot; width=&quot;1200&quot; height=&quot;799&quot; alt=&quot;Speaking at Swetugg&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;TLDR:&lt;/strong&gt;&lt;/p&gt;&lt;ul class=&quot;list&quot;&gt;&lt;li&gt;&lt;a href=&quot;http://localhost:8080/articles/2023/123.swetugg-dapr-101.pdf&quot; target=&quot;_blank&quot;&gt;Download the Dapr introduction slides&lt;/a&gt; | &lt;a href=&quot;https://github.com/dapr/quickstarts&quot; target=&quot;_blank&quot;&gt;Dapr quickstarts on GitHub&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://localhost:8080/articles/2023/123.swetugg-dapr-workflow.pdf&quot; target=&quot;_blank&quot;&gt;Download the Dapr workflow slides&lt;/a&gt; | &lt;a href=&quot;https://github.com/diagrid-labs/dapr-workflow-demos&quot; target=&quot;_blank&quot;&gt;Dapr workflow demos on GitHub&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;hr&gt;&lt;p&gt;From Thursday 26th to Friday 27th October, I was at &lt;a href=&quot;https://www.swetugg.se/gbg-2023&quot; rel=&quot;noopener&quot;&gt;Swetugg G√∂teborg&lt;/a&gt; in Sweden. It was my first time at a Swetugg conference and I really enjoyed the experience.&lt;/p&gt;&lt;p&gt;I gave my session &lt;em&gt;‚ÄúStart building applications with ease using building block APIs‚Äù&lt;/em&gt; on Thursday. Since a couple of speakers had to cancel their sessions, I volunteered to give an additional talk, &lt;em&gt;‚ÄúOrchestrating your business logic reliably with workflow as code‚Äù&lt;/em&gt; on Friday. Thanks to everyone that attended!&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/123.2.swetugg-marcduiker-440w.webp 440w, http://localhost:8080/assets/images/123.2.swetugg-marcduiker-650w.webp 650w, http://localhost:8080/assets/images/123.2.swetugg-marcduiker-960w.webp 960w, http://localhost:8080/assets/images/123.2.swetugg-marcduiker-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/123.2.swetugg-marcduiker-1200w.webp&quot; width=&quot;1200&quot; height=&quot;675&quot; alt=&quot;Speaking at Swetugg&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;My Dapr intro slides can be &lt;a href=&quot;http://localhost:8080/articles/2023/122.ndcporto-dapr-workflow.pdf&quot; target=&quot;_blank&quot;&gt;downloaded here&lt;/a&gt;. The Dapr quickstarts that I demoed during the session can be found in &lt;a href=&quot;https://github.com/dapr/quickstarts&quot; rel=&quot;noopener&quot;&gt;this GitHub repo&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;The Dapr workflow slides can be &lt;a href=&quot;http://localhost:8080/articles/2023/122.ndcporto-dapr-workflow.pdf&quot; target=&quot;_blank&quot;&gt;downloaded here&lt;/a&gt;. The Dapr workflow demos can be found in &lt;a href=&quot;https://github.com/diagrid-labs/dapr-workflow-demos&quot; rel=&quot;noopener&quot;&gt;this GitHub repo&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Do you have questions about Dapr? Please join the &lt;a href=&quot;https://bit.ly/dapr-discord&quot; rel=&quot;noopener&quot;&gt;Dapr Discord&lt;/a&gt; and ask away!&lt;/p&gt;
 			</content>
    </entry><entry>
      <title>Speaking at NDC Porto about Dapr workflow</title>
      <link href="http://localhost:8080/articles/speaking-at-ndcporto-2023/" />
      <updated>2023-10-20T00:00:00Z</updated>
      <id>http://localhost:8080/articles/speaking-at-ndcporto-2023/</id>
      <content type="html">
				&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/122.ndc-porto-speaking-440w.webp 440w, http://localhost:8080/assets/images/122.ndc-porto-speaking-650w.webp 650w, http://localhost:8080/assets/images/122.ndc-porto-speaking-960w.webp 960w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/122.ndc-porto-speaking-960w.webp&quot; width=&quot;960&quot; height=&quot;626&quot; alt=&quot;Speaking at NDC Porto&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;TLDR: &lt;a href=&quot;http://localhost:8080/articles/2023/122.ndcporto-dapr-workflow.pdf&quot; target=&quot;_blank&quot;&gt;Download the slides&lt;/a&gt; | &lt;a href=&quot;https://github.com/diagrid-labs/dapr-workflow-demos&quot; target=&quot;_blank&quot;&gt;Dapr workflow demos on GitHub&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;From Wednesday 18th to Friday 20th October, I was at &lt;a href=&quot;https://ndcporto.com/agenda&quot; rel=&quot;noopener&quot;&gt;NDC Porto&lt;/a&gt; in Portugal. NDC organizes excellent developer conferences, and I was very happy my abstract &lt;em&gt;‚Äúorchestrating your business logic reliably with workflow as code‚Äù&lt;/em&gt; was accepted ü•≥.&lt;/p&gt;&lt;p&gt;By looking at the conference agenda, it was clear that microservices and (event-driven) architecture related talks are very popular currently, so my Dapr talk was a good fit üí™. I couldn‚Äôt attend many of the other talks, unfortunately, but I‚Äôll watch them as soon as they‚Äôre published on &lt;a href=&quot;https://www.youtube.com/@ndc&quot; rel=&quot;noopener&quot;&gt;YouTube&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/122.1.ndc-porto-speaking-440w.webp 440w, http://localhost:8080/assets/images/122.1.ndc-porto-speaking-650w.webp 650w, http://localhost:8080/assets/images/122.1.ndc-porto-speaking-960w.webp 960w, http://localhost:8080/assets/images/122.1.ndc-porto-speaking-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/122.1.ndc-porto-speaking-1200w.webp&quot; width=&quot;1200&quot; height=&quot;798&quot; alt=&quot;Speaking at NDC Porto&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;I‚Äôm glad my session was well attended, especially when someone like Richard Campbell is giving a talk at the same time üòÖ. Thanks to everyone for attending, and asking great questions afterwards. I hope to see you at another NDC conference again!&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/122.2.ndc-porto-speaking-440w.webp 440w, http://localhost:8080/assets/images/122.2.ndc-porto-speaking-650w.webp 650w, http://localhost:8080/assets/images/122.2.ndc-porto-speaking-960w.webp 960w, http://localhost:8080/assets/images/122.2.ndc-porto-speaking-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/122.2.ndc-porto-speaking-1200w.webp&quot; width=&quot;1200&quot; height=&quot;798&quot; alt=&quot;Speaking at NDC Porto&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;I really like meeting people at these conferences. I spoke to many developers who I haven‚Äôt met before and talked about Dapr (and pixelart). I also (re)connected with some former colleagues and speaker friends ‚ù§Ô∏è. It was great to meet you all! ü§ó&lt;/p&gt;&lt;p&gt;My slides can be &lt;a href=&quot;http://localhost:8080/articles/2023/122.ndcporto-dapr-workflow.pdf&quot; target=&quot;_blank&quot;&gt;downloaded here&lt;/a&gt;. The source code that I showed during the session can be found in &lt;a href=&quot;https://github.com/diagrid-labs/dapr-workflow-demos&quot; rel=&quot;noopener&quot;&gt;this GitHub repo&lt;/a&gt;. Do you have questions about Dapr? Please join the &lt;a href=&quot;https://bit.ly/dapr-discord&quot; rel=&quot;noopener&quot;&gt;Dapr Discord&lt;/a&gt; and ask away!&lt;/p&gt;
 			</content>
    </entry><entry>
      <title>Stop adding business value and become an artist with your IT skills</title>
      <link href="http://localhost:8080/articles/devopsdays-creative-coding/" />
      <updated>2023-10-12T00:00:00Z</updated>
      <id>http://localhost:8080/articles/devopsdays-creative-coding/</id>
      <content type="html">
				&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/119.1.devopsdays-eh-creativecoding-440w.webp 440w, http://localhost:8080/assets/images/119.1.devopsdays-eh-creativecoding-650w.webp 650w, http://localhost:8080/assets/images/119.1.devopsdays-eh-creativecoding-960w.webp 960w, http://localhost:8080/assets/images/119.1.devopsdays-eh-creativecoding-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/119.1.devopsdays-eh-creativecoding-1200w.webp&quot; width=&quot;1200&quot; height=&quot;900&quot; alt=&quot;DevOpsDays ignite session&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;TLDR: &lt;a href=&quot;http://localhost:8080/assets/images/blog/2023/119.become-an-artist-with-your-it-skills.pdf&quot; target=&quot;_blank&quot;&gt;Download the slides&lt;/a&gt; | &lt;a href=&quot;https://www.youtube.com/c/TheCodingTrain&quot; target=&quot;_blank&quot;&gt;The Coding Train YouTube channel&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;I recently got an invite to do an &lt;a href=&quot;https://www.ignitetalks.io/&quot; rel=&quot;noopener&quot;&gt;ignite talk&lt;/a&gt; at &lt;a href=&quot;https://devopsdays.org/events/2023-eindhoven/welcome/&quot; rel=&quot;noopener&quot;&gt;DevOpsDays Eindhoven&lt;/a&gt;. I never heard about the format, but it‚Äôs a 5 minute long presentation with 20 slides that auto advance. I never tried this before but, at times, I like to go out of my comfort zone, so I said yes üò¨.&lt;/p&gt;&lt;p&gt;The topic I chose is one I love best: creative coding. I named named the session &lt;em&gt;‚ÄúStop adding business value and become and artist with your IT skills‚Äù&lt;/em&gt;.&lt;br&gt;I was quite nervous giving this talk but I also had a lot of fun! Thanks everyone for attending my session!&lt;/p&gt;&lt;p&gt;My slides can be &lt;a href=&quot;http://localhost:8080/assets/images/blog/2023/119.become-an-artist-with-your-it-skills.pdf&quot; target=&quot;_blank&quot;&gt;downloaded here&lt;/a&gt;. A good starting point for learning &lt;a href=&quot;https://p5js.org&quot; rel=&quot;noopener&quot;&gt;P5js&lt;/a&gt; is &lt;a href=&quot;https://www.youtube.com/c/TheCodingTrain&quot; rel=&quot;noopener&quot;&gt;The Coding Train&lt;/a&gt; on YouTube. There is also an &lt;a href=&quot;https://github.com/terkelg/awesome-creative-coding&quot; rel=&quot;noopener&quot;&gt;awesome list on GitHub&lt;/a&gt; with links to many more creative coding resources to keep you busy for months!&lt;/p&gt;
 			</content>
    </entry><entry>
      <title>Speaking at 4CEE Tech Talk about Dapr</title>
      <link href="http://localhost:8080/articles/4cee-meetup-dapr/" />
      <updated>2023-10-12T00:00:00Z</updated>
      <id>http://localhost:8080/articles/4cee-meetup-dapr/</id>
      <content type="html">
				&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/120.1.4cee-marc-440w.webp 440w, http://localhost:8080/assets/images/120.1.4cee-marc-650w.webp 650w, http://localhost:8080/assets/images/120.1.4cee-marc-960w.webp 960w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/120.1.4cee-marc-960w.webp&quot; width=&quot;960&quot; height=&quot;638&quot; alt=&quot;4CEE tech talk&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;TLDR: &lt;a href=&quot;http://localhost:8080/articles/2023/120.c4ee-dapr-101.pdf&quot; target=&quot;_blank&quot;&gt;Download the slides&lt;/a&gt; | &lt;a href=&quot;https://github.com/dapr/quickstarts&quot; target=&quot;_blank&quot;&gt;Dapr Quickstarts repository&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Jeffrey Bosch invited me to give a tech talk at the 4CEE meetup in Ede on Thu 12th of Oct. It was a busy week with both &lt;a href=&quot;http://localhost:8080/articles/sponsoring-techorama-nl-2023&quot;&gt;Techorama&lt;/a&gt; and &lt;a href=&quot;http://localhost:8080/articles/devopsdays-creative-coding&quot;&gt;DevOpsDays Eindhoven&lt;/a&gt;, but I was glad I could join this meetup and show people the benefits of building applications with &lt;a href=&quot;https://dapr.io&quot; rel=&quot;noopener&quot;&gt;Dapr&lt;/a&gt;. The event was very well organized, the turn-out was great, and this was only the second time they organized such a thing! üëè&lt;/p&gt;&lt;p&gt;The other speaker at this meetup was Stacy Cashmore, who talked about creating a blog website using Blazor and Azure Static Web Apps. Stacy is a great speaker, I really enjoy her enthusiasm and the funny jokes she makes while doing live coding. üöÄ&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/120.2.4cee-marc-440w.webp 440w, http://localhost:8080/assets/images/120.2.4cee-marc-650w.webp 650w, http://localhost:8080/assets/images/120.2.4cee-marc-960w.webp 960w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/120.2.4cee-marc-960w.webp&quot; width=&quot;960&quot; height=&quot;638&quot; alt=&quot;Marc close-up&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;I gave an introductory session about Dapr, the distributed application runtime, and demonstrated service-to-service invocation, pub/sub messaging, and state management. Thanks everyone for attending and asking good questions!&lt;/p&gt;&lt;p&gt;My slides can be &lt;a href=&quot;http://localhost:8080/articles/2023/120.c4ee-dapr-101.pdf&quot; target=&quot;_blank&quot;&gt;downloaded here&lt;/a&gt;. A good starting point for learning Dapr is the &lt;a href=&quot;https://github.com/dapr/quickstarts&quot; rel=&quot;noopener&quot;&gt;Dapr Quickstarts repository&lt;/a&gt; on GitHub. Do you have questions about Dapr? Please join the &lt;a href=&quot;https://bit.ly/dapr-discord&quot; rel=&quot;noopener&quot;&gt;Dapr Discord&lt;/a&gt; and ask away!&lt;/p&gt;
 			</content>
    </entry><entry>
      <title>Sponsoring Techorama NL and (re-)connecting with the community ‚ù§Ô∏è</title>
      <link href="http://localhost:8080/articles/sponsoring-techorama-nl-2023/" />
      <updated>2023-10-11T00:00:00Z</updated>
      <id>http://localhost:8080/articles/sponsoring-techorama-nl-2023/</id>
      <content type="html">
				&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/121.1.techorama-440w.webp 440w, http://localhost:8080/assets/images/121.1.techorama-650w.webp 650w, http://localhost:8080/assets/images/121.1.techorama-960w.webp 960w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/121.1.techorama-960w.webp&quot; width=&quot;960&quot; height=&quot;720&quot; alt=&quot;Selfie at the booth&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;On Tuesday and Wednesday this week (10 &amp;amp; 11 Oct), I was at &lt;a href=&quot;https://techorama.nl/&quot; rel=&quot;noopener&quot;&gt;Techorama&lt;/a&gt; in Utrecht, The Netherlands. Techorama is a well-known conference in both the Netherlands and Belgium, and both editions attract a large number of developers. This time I wasn‚Äôt a speaker or attendee, but I was there as a sponsor representing &lt;a href=&quot;https://diagrid.io&quot; rel=&quot;noopener&quot;&gt;Diagrid&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Sponsoring this event was a great opportunity for Diagrid to increase the awareness around both Dapr and Diagrid, and I had a lot of fun at the booth talking to people about &lt;a href=&quot;https://dapr.io&quot; rel=&quot;noopener&quot;&gt;Dapr&lt;/a&gt;, the benefits of using it, as well as explaining Diagrid and the products we‚Äôre making.&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/121.2.builders-440w.webp 440w, http://localhost:8080/assets/images/121.2.builders-650w.webp 650w, http://localhost:8080/assets/images/121.2.builders-960w.webp 960w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/121.2.builders-960w.webp&quot; width=&quot;960&quot; height=&quot;540&quot; alt=&quot;Lego builders&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;Since I‚Äôm a big Lego fan myself, and I know many people in IT are as well, I decided to bring a box of Lego pieces, so attendees could build their own Lego microservice, connect it to other services, resulting in a large distributed application. This turned out to a big success, many developers stopped by to build a service (or two), and the result really looked like a (chaotic) Lego artwork. Thanks for building everyone! üèóÔ∏è&lt;/p&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/0fYHfPnEAyU&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/121.3.lego-440w.webp 440w, http://localhost:8080/assets/images/121.3.lego-650w.webp 650w, http://localhost:8080/assets/images/121.3.lego-960w.webp 960w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/121.3.lego-960w.webp&quot; width=&quot;960&quot; height=&quot;540&quot; alt=&quot;Lego top down view&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;At the end of the second day, I raffled off an Indiana Jones Lego kit, which was won by Jop. Many congratulations! üéâ&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/121.4.winner-197w.webp 197w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/121.4.winner-197w.webp&quot; width=&quot;197&quot; height=&quot;350&quot; alt=&quot;Winner of the Lego set&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;I‚Äôm really happy how this event turned out. I spoke to a lot of people about Dapr &amp;amp; Diagrid, and reconnected with many old friends &amp;amp; former colleagues. I finally met Paul Yuknewicz in-person (thank you for giving some great Dapr sessions üí™).&lt;/p&gt;&lt;p&gt;Special shout-outs go to Alex Thissen, Sander Molenkamp, and Edwin van Wijk for organizing a Dapr workshop on the first day of Techorama üëè. I spoke to many of the workshop attendees and they all enjoyed it and learned a lot.&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/121.5.stickers-440w.webp 440w, http://localhost:8080/assets/images/121.5.stickers-650w.webp 650w, http://localhost:8080/assets/images/121.5.stickers-960w.webp 960w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/121.5.stickers-960w.webp&quot; width=&quot;960&quot; height=&quot;638&quot; alt=&quot;Dapr stickers&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;If you want to learn more about Dapr, take a look at the &lt;a href=&quot;https://github.com/dapr/quickstarts&quot; rel=&quot;noopener&quot;&gt;Dapr Quickstarts repository&lt;/a&gt; on GitHub. Do you have questions (or feedback) about Dapr? Please join the &lt;a href=&quot;https://bit.ly/dapr-discord&quot; rel=&quot;noopener&quot;&gt;Dapr Discord&lt;/a&gt; and ask away!&lt;/p&gt;
 			</content>
    </entry><entry>
      <title>Speaking at DotNetFriday about Dapr Workflow</title>
      <link href="http://localhost:8080/articles/dotnetfriday-dapr-workflow/" />
      <updated>2023-10-02T00:00:00Z</updated>
      <id>http://localhost:8080/articles/dotnetfriday-dapr-workflow/</id>
      <content type="html">
				&lt;p&gt;&lt;strong&gt;TLDR: &lt;a href=&quot;http://localhost:8080/assets/images/blog/2023/118.dotnetfriday-dapr-workflow.pdf&quot; target=&quot;_blank&quot;&gt;Download the slides&lt;/a&gt; | &lt;a href=&quot;https://github.com/diagrid-labs/dapr-workflow-demos&quot; target=&quot;_blank&quot;&gt;GitHub repo with workflow demos&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/118.dotnetfriday-1-440w.webp 440w, http://localhost:8080/assets/images/118.dotnetfriday-1-650w.webp 650w, http://localhost:8080/assets/images/118.dotnetfriday-1-960w.webp 960w, http://localhost:8080/assets/images/118.dotnetfriday-1-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/118.dotnetfriday-1-1200w.webp&quot; width=&quot;1200&quot; height=&quot;903&quot; alt=&quot;DotNet Friday speaking&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://www.linkedin.com/in/eduard-keilholz/&quot; rel=&quot;noopener&quot;&gt;Eduard Keilhotlz&lt;/a&gt; invited me to talk at a &lt;a href=&quot;https://dotnetfriday.nl/&quot; rel=&quot;noopener&quot;&gt;DotnetFriday&lt;/a&gt; event many months ago, but there were always clashes with my agenda. Last Friday it finally happened, I went to the 4DotNet office in Nieuwegein and gave a talk about orchestrating your business logic with &lt;a href=&quot;https://docs.dapr.io/developing-applications/building-blocks/workflow/workflow-overview/&quot; rel=&quot;noopener&quot;&gt;Dapr workflow&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;When I arrived there I was welcomed with a cake, since earlier that week it was my birthday! üéÇ Thank you so much for this lovely surprise!&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/118.dotnetfriday-3-440w.webp 440w, http://localhost:8080/assets/images/118.dotnetfriday-3-650w.webp 650w, http://localhost:8080/assets/images/118.dotnetfriday-3-960w.webp 960w, http://localhost:8080/assets/images/118.dotnetfriday-3-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/118.dotnetfriday-3-1200w.webp&quot; width=&quot;1200&quot; height=&quot;1600&quot; alt=&quot;DotNet Friday cake&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;I finally met with &lt;a href=&quot;https://www.linkedin.com/in/kenny-baas/&quot; rel=&quot;noopener&quot;&gt;Kenny Baas-Schwegler&lt;/a&gt; again, who gave a session after me, together with &lt;a href=&quot;https://www.linkedin.com/in/brunoboucard/&quot; rel=&quot;noopener&quot;&gt;Bruno Boucard&lt;/a&gt;, about refactoring towards deeper insights using Domain-Driven Design. This was a great example of DDD in practise with live coding.&lt;/p&gt;&lt;p&gt;Thanks everyone for attending this event and asking great questions about Dapr workflow. My slides can be &lt;a href=&quot;http://localhost:8080/articles/2023/118.dotnetfriday-dapr-workflow.pdf&quot; target=&quot;_blank&quot;&gt;downloaded here&lt;/a&gt;. The demo apps can be found in this &lt;a href=&quot;https://github.com/diagrid-labs/dapr-workflow-demos&quot; target=&quot;_blank&quot;&gt;GitHub repo&lt;/a&gt;. If you want to learn more about Dapr or have questions about the project, please join the &lt;a href=&quot;http://bit.ly/dapr-discord&quot; rel=&quot;noopener&quot;&gt;Dapr Discord&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/118.dotnetfriday-2-440w.webp 440w, http://localhost:8080/assets/images/118.dotnetfriday-2-650w.webp 650w, http://localhost:8080/assets/images/118.dotnetfriday-2-960w.webp 960w, http://localhost:8080/assets/images/118.dotnetfriday-2-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/118.dotnetfriday-2-1200w.webp&quot; width=&quot;1200&quot; height=&quot;800&quot; alt=&quot;DotNet Friday close-up&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;
 			</content>
    </entry><entry>
      <title>MC-ing at MSBuild The Netherlands</title>
      <link href="http://localhost:8080/articles/mc-ingmsbuild/" />
      <updated>2023-10-01T00:00:00Z</updated>
      <id>http://localhost:8080/articles/mc-ingmsbuild/</id>
      <content type="html">
				&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/117.msbuild-nl-1-440w.webp 440w, http://localhost:8080/assets/images/117.msbuild-nl-1-650w.webp 650w, http://localhost:8080/assets/images/117.msbuild-nl-1-960w.webp 960w, http://localhost:8080/assets/images/117.msbuild-nl-1-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/117.msbuild-nl-1-1200w.webp&quot; width=&quot;1200&quot; height=&quot;812&quot; alt=&quot;MC-ing MSBuild&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;Last week I had the privilege to MC at MSBuild the Netherlands with &lt;a href=&quot;https://www.linkedin.com/in/stacycash/&quot; rel=&quot;noopener&quot;&gt;Stacy Cashmore&lt;/a&gt;. This developer conference was the first local flagship developer conference organized by Microsoft in many years. The event was held at Media Plaza in Utrecht, the Netherlands.&lt;/p&gt;&lt;p&gt;Stacy and I were tasked with introducing the speakers, moderating the Q&amp;amp;A, and ensuring everyone sticks to the agenda. It all went quite smooth until halfway through April Edwards keynote, when one of the camera crew fell pretty badly and had to be taken to the hospital. This was the first time I ever encountered a situation like this at a conference. It made me realize that event organizers should be prepared for literally anything. We shuffled the agenda a bit and were on track again pretty quick. Major kudos to April, who helped stabilize the injured cameraman, and continued her keynote after a break.&lt;/p&gt;&lt;p&gt;The day was packed with good sessions around Azure, GitHub, AI, and Security. It was great to see so many people in person again, both attendees and community partners. At the end of the day, we gave away some prizes to people that shared their MSBuild selfie online (I wish I had won the MS Build branded Xbox!). I really enjoyed this day, and it was a great opportunity to wear my Dapr hat! üòÅ&lt;/p&gt;&lt;p&gt;For those of you that missed the in person event, you can watch the recordings of the sessions soon on the &lt;a href=&quot;https://pulse.microsoft.com/nl-nl/microsoft-build-nl/&quot; rel=&quot;noopener&quot;&gt;Microsoft website&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/117.msbuild-nl-2-440w.webp 440w, http://localhost:8080/assets/images/117.msbuild-nl-2-650w.webp 650w, http://localhost:8080/assets/images/117.msbuild-nl-2-960w.webp 960w, http://localhost:8080/assets/images/117.msbuild-nl-2-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/117.msbuild-nl-2-1200w.webp&quot; width=&quot;1200&quot; height=&quot;900&quot; alt=&quot;MSBuild org&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;
 			</content>
    </entry><entry>
      <title>Speaking at the Tweakers Developers Summit 2023</title>
      <link href="http://localhost:8080/articles/speaking-at-tweakers-dev-summit/" />
      <updated>2023-09-17T00:00:00Z</updated>
      <id>http://localhost:8080/articles/speaking-at-tweakers-dev-summit/</id>
      <content type="html">
				&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/116.tweakers-dev-summit-marcduiker-440w.webp 440w, http://localhost:8080/assets/images/116.tweakers-dev-summit-marcduiker-650w.webp 650w, http://localhost:8080/assets/images/116.tweakers-dev-summit-marcduiker-960w.webp 960w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/116.tweakers-dev-summit-marcduiker-960w.webp&quot; width=&quot;960&quot; height=&quot;640&quot; alt=&quot;Speaking at Tweakers Dev Summit (Photo by Tweakers)&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;Last week I had the oppurtunity to speak at the &lt;a href=&quot;https://tweakers.net/partners/devsummit2023/1900/sprekerstracks/&quot; rel=&quot;noopener&quot;&gt;Tweakers Developers Summit&lt;/a&gt; in Utrecht, the Netherlands.&lt;/p&gt;&lt;p&gt;The event consisted of several tracks including, front-end, back-end, DevOps, security, smart home, and AI. The venue was the awesome De Fabrique (old industrial complex) and it was packed with developers. I really enjoyed watching the keynote by &lt;a href=&quot;http://lindaliukas.com/&quot; rel=&quot;noopener&quot;&gt;Linda Liukas&lt;/a&gt;, the author of the &lt;a href=&quot;http://www.helloruby.com/&quot; rel=&quot;noopener&quot;&gt;Hello Ruby&lt;/a&gt; book series. It was really inspiring to hear her talk about how children (and adults!) can learn programming concepts in a playful way.&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/116.tweakers-dev-summit-440w.webp 440w, http://localhost:8080/assets/images/116.tweakers-dev-summit-650w.webp 650w, http://localhost:8080/assets/images/116.tweakers-dev-summit-960w.webp 960w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/116.tweakers-dev-summit-960w.webp&quot; width=&quot;960&quot; height=&quot;540&quot; alt=&quot;My Tweakers Developer Summit access card&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;My session, which was part of the back-end track, covered how &lt;a href=&quot;https://dapr.io&quot; rel=&quot;noopener&quot;&gt;Dapr&lt;/a&gt; speeds up distributed systems development by using the many building block APIs. The preceding session named &lt;em&gt;From Monolith to Microservices and Beyond&lt;/em&gt; was a great lead-in to my session (thanks again Peter van Vliet!).&lt;/p&gt;&lt;p&gt;The slides can be &lt;a href=&quot;http://localhost:8080/assets/images/blog/2023/116.tweakers-dev-summit-presentation.pdf&quot; target=&quot;_blank&quot;&gt;downloaded here&lt;/a&gt;. If you want to learn more about Dapr or have questions about the project, please join the &lt;a href=&quot;http://bit.ly/dapr-discord&quot; rel=&quot;noopener&quot;&gt;Dapr Discord&lt;/a&gt;.&lt;/p&gt;
 			</content>
    </entry><entry>
      <title>Attending DevRelCon London 2023</title>
      <link href="http://localhost:8080/articles/devrelcon-london-2023/" />
      <updated>2023-09-14T00:00:00Z</updated>
      <id>http://localhost:8080/articles/devrelcon-london-2023/</id>
      <content type="html">
				&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/115.devrelcon_selfie-440w.webp 440w, http://localhost:8080/assets/images/115.devrelcon_selfie-650w.webp 650w, http://localhost:8080/assets/images/115.devrelcon_selfie-960w.webp 960w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/115.devrelcon_selfie-960w.webp&quot; width=&quot;960&quot; height=&quot;720&quot; alt=&quot;DevRelCon London selfie with the logo&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;The first &lt;a href=&quot;https://developerrelations.com/devrelcon&quot; rel=&quot;noopener&quot;&gt;DevRelCon&lt;/a&gt; I attended was in 2022 in Prague, where I had the opportunity to speak about how to use your non-IT skills to build your personal brand (perhaps some day the recording will be published üòÖ).&lt;/p&gt;&lt;p&gt;I had a superb time there, it really felt I was among my people ‚ù§Ô∏è. So when I noticed that the 2023 edition would be in London, I immediately bought a ticket.&lt;/p&gt;&lt;h2 id=&quot;creating-the-logo&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/devrelcon-london-2023/#creating-the-logo&quot; class=&quot;heading-anchor&quot;&gt;Creating the logo&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Not long after the 2022 conference, Matthew Revell, the conference organizer, approached me and asked if I would like to create the logo for the London conference. Of course, I immediately said yes to this!&lt;br&gt;Many hours of drawing followed, and I‚Äôm very happy with the result.&lt;/p&gt;&lt;p&gt;Here‚Äôs the time-lapse of the creation of the logo:&lt;/p&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/kCJT1eoR8U8?si=P3LJ4dYmAI959z3o&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;h2 id=&quot;the-conference&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/devrelcon-london-2023/#the-conference&quot; class=&quot;heading-anchor&quot;&gt;The conference&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;After a smooth Eurostar travel from Rotterdam to London, I went to the pre-conference drinks, where I met some of my lovely former colleagues and many new folks.&lt;br&gt;There was a surprising large Dutch devrel delegation, some I‚Äôve never met before üò≤ (Thanks Julien for bringing the stroopwafels!).&lt;/p&gt;&lt;p&gt;The main reason I went to this conference is to (re)connect with the wonderful people in Developer Relations.&lt;br&gt;Don‚Äôt get me wrong, the talks are good. I‚Äôve learned quite a bit about:&lt;/p&gt;&lt;ul class=&quot;list&quot;&gt;&lt;li&gt;Developer education (Sue Smith)&lt;/li&gt;&lt;li&gt;Cracking complext community problems (Richard Millington)&lt;/li&gt;&lt;li&gt;Communication design (Melinda Seckington)&lt;/li&gt;&lt;li&gt;Quantifying devrel impact (Kevin Lewis and John Booth).&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;There were many more talks, and a devrel unconference at the same time. It was too much to follow everything ü§Ø.&lt;br&gt;As our industry is relatively young and not well-defined, I‚Äôm very appreciative of everyone who is sharing their knowledge and experience. You are helping us all to grow up (this is a hot topic lately).&lt;/p&gt;&lt;p&gt;I got a lot of good energy from attending this conference and meeting everyone in person ü§ó. I hope a new edition of DevRelCon will happen in 2024. I will be there for sure!&lt;/p&gt;&lt;p&gt;&lt;em&gt;(Also‚Ä¶&lt;a href=&quot;https://ko-fi.com/marcduiker/commissions&quot; rel=&quot;noopener&quot;&gt;let me know&lt;/a&gt; if you need a pixel-art style logo for your conference üòâ)&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/115.2.devrelcon_opening-440w.webp 440w, http://localhost:8080/assets/images/115.2.devrelcon_opening-650w.webp 650w, http://localhost:8080/assets/images/115.2.devrelcon_opening-960w.webp 960w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/115.2.devrelcon_opening-960w.webp&quot; width=&quot;960&quot; height=&quot;540&quot; alt=&quot;DevRelCon opening by Matthew and Kevin&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/115.3.devrelcon_wesley-440w.webp 440w, http://localhost:8080/assets/images/115.3.devrelcon_wesley-650w.webp 650w, http://localhost:8080/assets/images/115.3.devrelcon_wesley-960w.webp 960w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/115.3.devrelcon_wesley-960w.webp&quot; width=&quot;960&quot; height=&quot;540&quot; alt=&quot;DevRelCon keynote by Wesley Faulkner&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/115.4.devrelcon_sue-440w.webp 440w, http://localhost:8080/assets/images/115.4.devrelcon_sue-650w.webp 650w, http://localhost:8080/assets/images/115.4.devrelcon_sue-960w.webp 960w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/115.4.devrelcon_sue-960w.webp&quot; width=&quot;960&quot; height=&quot;540&quot; alt=&quot;Sue Smith: An open framework for developer learning&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/115.5.devrelcon_kevin-440w.webp 440w, http://localhost:8080/assets/images/115.5.devrelcon_kevin-650w.webp 650w, http://localhost:8080/assets/images/115.5.devrelcon_kevin-960w.webp 960w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/115.5.devrelcon_kevin-960w.webp&quot; width=&quot;960&quot; height=&quot;540&quot; alt=&quot;Kevin Lewis &amp;amp; John Booth: Learning From Marketing to Quantify Developer Relations Impact&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/115.6.devrelcon_melinda-440w.webp 440w, http://localhost:8080/assets/images/115.6.devrelcon_melinda-650w.webp 650w, http://localhost:8080/assets/images/115.6.devrelcon_melinda-960w.webp 960w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/115.6.devrelcon_melinda-960w.webp&quot; width=&quot;960&quot; height=&quot;540&quot; alt=&quot;Melinda Seckington: The Art of Communication Design&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;
 			</content>
    </entry><entry>
      <title>Live stream with Gregor Suttie</title>
      <link href="http://localhost:8080/articles/live-stream-gregor-suttie/" />
      <updated>2023-07-18T00:00:00Z</updated>
      <id>http://localhost:8080/articles/live-stream-gregor-suttie/</id>
      <content type="html">
				&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/130.1.gregory-suttie-stream-440w.webp 440w, http://localhost:8080/assets/images/130.1.gregory-suttie-stream-650w.webp 650w, http://localhost:8080/assets/images/130.1.gregory-suttie-stream-960w.webp 960w, http://localhost:8080/assets/images/130.1.gregory-suttie-stream-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/130.1.gregory-suttie-stream-1200w.webp&quot; width=&quot;1200&quot; height=&quot;679&quot; alt=&quot;Live Stream with Gregory Suttie&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;On July 18th I joined a live stream hosted by &lt;a href=&quot;https://www.youtube.com/@GregorSuttie&quot; rel=&quot;noopener&quot;&gt;Gregor Suttie&lt;/a&gt;, an Azure MVP and active community speaker and organizer. We talked about Dapr and I demonstrated the State Management API, resiliency, and Dapr Worflow.&lt;/p&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/82qRiLAihXU&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;p&gt;Do you have questions about Dapr? Please join the &lt;a href=&quot;https://bit.ly/dapr-discord&quot; rel=&quot;noopener&quot;&gt;Dapr Discord&lt;/a&gt; and ask away! Do you like Dapr and want to show your support? Claim this &lt;a href=&quot;https://bit.ly/dapr-supporter&quot; rel=&quot;noopener&quot;&gt;community supporter Holopin badge&lt;/a&gt;!&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://bit.ly/dapr-supporter&quot;&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/124.3.dapr-community-supporter-440w.webp 440w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/124.3.dapr-community-supporter-440w.webp&quot; width=&quot;440&quot; height=&quot;440&quot; alt=&quot;Dapr community supporter badge&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/a&gt;&lt;/p&gt;
 			</content>
    </entry><entry>
      <title>Cloud Native Weekly Episode 5: Dapr</title>
      <link href="http://localhost:8080/articles/cloud-native-weekly-ep5/" />
      <updated>2023-07-06T00:00:00Z</updated>
      <id>http://localhost:8080/articles/cloud-native-weekly-ep5/</id>
      <content type="html">
				&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/128.1.cloud-native-weekly-440w.webp 440w, http://localhost:8080/assets/images/128.1.cloud-native-weekly-650w.webp 650w, http://localhost:8080/assets/images/128.1.cloud-native-weekly-960w.webp 960w, http://localhost:8080/assets/images/128.1.cloud-native-weekly-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/128.1.cloud-native-weekly-1200w.webp&quot; width=&quot;1200&quot; height=&quot;678&quot; alt=&quot;Cloud Native Weekly&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;On July 6th I was a guest speaker at Cloud Native Weekly, a weekly live show on &lt;a href=&quot;https://www.youtube.com/@CloudNativeWeekly&quot; rel=&quot;noopener&quot;&gt;YouTube&lt;/a&gt; where the hosts and guests discuss the latest news and trends in the cloud native space. This episode was all about Dapr, the Distributed Application Runtime.&lt;/p&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/Zcdsh6J5fAg&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;p&gt;Do you have questions about Dapr? Please join the &lt;a href=&quot;https://bit.ly/dapr-discord&quot; rel=&quot;noopener&quot;&gt;Dapr Discord&lt;/a&gt; and ask away! Do you like Dapr and want to show your support? Claim this &lt;a href=&quot;https://bit.ly/dapr-supporter&quot; rel=&quot;noopener&quot;&gt;community supporter Holopin badge&lt;/a&gt;!&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://bit.ly/dapr-supporter&quot;&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/124.3.dapr-community-supporter-440w.webp 440w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/124.3.dapr-community-supporter-440w.webp&quot; width=&quot;440&quot; height=&quot;440&quot; alt=&quot;Dapr community supporter badge&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/a&gt;&lt;/p&gt;
 			</content>
    </entry><entry>
      <title>Be ready for failure on stage: introducing the Speaker Buddy System</title>
      <link href="http://localhost:8080/articles/speaker-buddy/" />
      <updated>2022-11-24T00:00:00Z</updated>
      <id>http://localhost:8080/articles/speaker-buddy/</id>
      <content type="html">
				&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/64.speaker_buddy_dall-e-440w.webp 440w, http://localhost:8080/assets/images/64.speaker_buddy_dall-e-650w.webp 650w, http://localhost:8080/assets/images/64.speaker_buddy_dall-e-960w.webp 960w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/64.speaker_buddy_dall-e-960w.webp&quot; width=&quot;960&quot; height=&quot;960&quot; alt=&quot;Speaker Buddy Generated by DALL-E&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;h2 id=&quot;conferences&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/speaker-buddy/#conferences&quot; class=&quot;heading-anchor&quot;&gt;Conferences&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I love ‚ù§Ô∏è going to conferences, especially when I‚Äôm invited to speak there. Although I‚Äôve been speaking at dozens of conferences and meetups over the past years, I still have impostor syndrome when it comes to speaking. Some people really seem to have a gift for public speaking, and sometimes I feel way out of my league. I do realize those experienced speakers have been practicing for years, and perhaps I‚Äôll get there as well, practice makes &lt;s&gt;perfect&lt;/s&gt; improvement! üí™&lt;/p&gt;&lt;h2 id=&quot;failing-on-stage&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/speaker-buddy/#failing-on-stage&quot; class=&quot;heading-anchor&quot;&gt;Failing on stage&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;One thing that can throw me off during my speaking sessions is technical issues. And I don‚Äôt mean failing demos (I‚Äôm used to those ü´†), but audio/video issues that require minutes (feels like hours üò≠) to solve.&lt;/p&gt;&lt;p&gt;A couple of weeks ago, I had such an issue where my laptop didn‚Äôt mirror the screen to the AV system. I was using a MacBook that I had used a dozen times before, but I‚Äôm not very familiar with macOS, and even when I got some help (and tried multiple adapters), the issue wasn‚Äôt solved. It was a few minutes past the official start time of the talk, and I was now getting nervous (and I‚Äôm quite a chill person otherwise). Luckily the previous speaker (&lt;a href=&quot;https://github.com/devlead&quot; rel=&quot;noopener&quot;&gt;Mattias Karlsson&lt;/a&gt;) had a brilliant idea: he asked me to install TeamViewer on my laptop, connect to the TeamViewer session on his laptop, and he would connect his machine to the AV system. This worked like a charm (WiFi was reasonable), and I was able to start my talk about 5 minutes late. üéâ The stress I built up during those minutes was not beneficial for my delivery though. My breathing was shallow, and my pace was too fast.&lt;/p&gt;&lt;p&gt;Could I have prevented the technical issue? No, but I could have been better prepared.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;TLDR: Have a look at the &lt;a href=&quot;https://github.com/marcduiker/speaker-buddy&quot; rel=&quot;noopener&quot;&gt;Speaker Buddy System&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id=&quot;preparing-for-failure&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/speaker-buddy/#preparing-for-failure&quot; class=&quot;heading-anchor&quot;&gt;Preparing for failure&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;There are several ways of preparing for technical issues. I‚Äôll share some of my ideas, and close with an idea initially proposed by Mattias, called the Speaker Buddy System.&lt;/p&gt;&lt;p&gt;I won‚Äôt cover ‚Äòmy demo doesn‚Äôt work‚Äô failures here, since these things can be solved in different ways, such as; showing a solution that has been prepared beforehand, or recording the solution before the conference and playing it back during the session.&lt;/p&gt;&lt;p&gt;The general idea to overcome a catastrophic (laptop) failure is to ensure that your presentation, code, and demos are available on other environments you can quickly access.&lt;/p&gt;&lt;p&gt;Let‚Äôs go through some solutions:&lt;/p&gt;&lt;h3 id=&quot;bring-a-second-laptop&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/speaker-buddy/#bring-a-second-laptop&quot; class=&quot;heading-anchor&quot;&gt;Bring a second laptop&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Yes, it can be that ‚Äòeasy‚Äô. But one, you need to &lt;em&gt;have&lt;/em&gt; a second laptop (üí∏), and two, you need to take it with you when traveling, which isn‚Äôt always an option. I have a small Windows Surface Go that I usually bring with me next to my main laptop.&lt;/p&gt;&lt;h3 id=&quot;cloud-storage&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/speaker-buddy/#cloud-storage&quot; class=&quot;heading-anchor&quot;&gt;Cloud storage&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;For things that don‚Äôt require showing or running code, you can use a cloud storage solution like OneDrive, Google Drive, Dropbox, or even a git repository. I use OneDrive to store and access my presentations. If your laptop fails, you still need to use another machine, but you can access your presentation relatively quickly (if you have access to the internet).&lt;/p&gt;&lt;h3 id=&quot;cloud-hosted-coding-environments&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/speaker-buddy/#cloud-hosted-coding-environments&quot; class=&quot;heading-anchor&quot;&gt;Cloud-hosted coding environments&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;When you &lt;em&gt;do&lt;/em&gt; need to show, or run, code in your session, make sure you can run it in the cloud instead of your own machine! I have all my source code on GitHub, and I‚Äôm using &lt;a href=&quot;https://github.com/features/codespaces&quot; rel=&quot;noopener&quot;&gt;GitHub Codespaces&lt;/a&gt; so I can run a demo completely in the cloud if necessary. There are many similar solutions out there such as &lt;a href=&quot;https://www.gitpod.io/&quot; rel=&quot;noopener&quot;&gt;Gitpod&lt;/a&gt;, &lt;a href=&quot;https://www.jetbrains.com/space/&quot; rel=&quot;noopener&quot;&gt;JetBrains Space&lt;/a&gt;, &lt;a href=&quot;https://codesandbox.io/&quot; rel=&quot;noopener&quot;&gt;CodeSandbox&lt;/a&gt;.&lt;br&gt;The downside of this solution is that it does require a good internet connection.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;TIP&lt;/strong&gt;: If your source code is on GitHub, and you just need to show the source code, you can use &lt;a href=&quot;https://github.com/github/dev&quot; rel=&quot;noopener&quot;&gt;github.dev&lt;/a&gt;, a lightweight, browser-based editor (based on VSCode) you can access by replacing &lt;code&gt;.com&lt;/code&gt; with &lt;code&gt;.dev&lt;/code&gt; when typing the repository URL. It even supports some extensions such as the brilliant &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=vsls-contrib.codetour&quot; rel=&quot;noopener&quot;&gt;CodeTour&lt;/a&gt;, which is great for showing code in a guided way throughout your session.&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id=&quot;the-speaker-buddy-system&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/speaker-buddy/#the-speaker-buddy-system&quot; class=&quot;heading-anchor&quot;&gt;The Speaker Buddy System&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;This is the idea that Mattias and I talked about after my failing laptop experience, and I love it! We named it &lt;strong&gt;Speaker Buddy&lt;/strong&gt; (not to be mistaken with &lt;a href=&quot;https://www.conferencebuddy.io/&quot; rel=&quot;noopener&quot;&gt;Conference Buddy&lt;/a&gt;), but I‚Äôm open to better names. In the solutions mentioned above, you still need access to another laptop (and the internet), and the Speaker Buddy system solves this!&lt;/p&gt;&lt;h3 id=&quot;1-for-conference-speakers&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/speaker-buddy/#1-for-conference-speakers&quot; class=&quot;heading-anchor&quot;&gt;1. For conference speakers&lt;/a&gt;&lt;/h3&gt;&lt;h4 id=&quot;11-for-speakers-who-want-to-volunteer-as-speaker-buddy&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/speaker-buddy/#11-for-speakers-who-want-to-volunteer-as-speaker-buddy&quot; class=&quot;heading-anchor&quot;&gt;1.1. For speakers who want to volunteer as Speaker Buddy&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;You can be a Speaker Buddy if you enjoy helping others to be successful during their talks.&lt;/p&gt;&lt;p&gt;You can help out by:&lt;/p&gt;&lt;ul class=&quot;list&quot;&gt;&lt;li&gt;Being kind and respectful (e.g. following the Code of Conduct of the conference).&lt;/li&gt;&lt;li&gt;Announcing that you‚Äôre available to help out as a Speaker Buddy (preferably do this via the conference organizers and their communication channels).&lt;/li&gt;&lt;li&gt;Agreeing up front how you can help (see 1.2).&lt;/li&gt;&lt;/ul&gt;&lt;h4 id=&quot;12-for-speakers-who-want-a-speaker-buddy&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/speaker-buddy/#12-for-speakers-who-want-a-speaker-buddy&quot; class=&quot;heading-anchor&quot;&gt;1.2. For speakers who want a Speaker Buddy&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;If you are going to speak at a conference and you want another speaker to have your back in case you run into technical issues or just want a friendly and supportive face on the front row, then this is for you!&lt;/p&gt;&lt;p&gt;Once the conference agenda is known and the Speaker Buddies are confirmed by the conference organizers, contact one of the Speaker Buddies (who does not speak at the same time as you!) to ask if they are willing to help you out in case of technical issues/laptop failure, or just being there as a friendly face in the audience. If they are, you can discuss the details such as:&lt;/p&gt;&lt;ul class=&quot;list&quot;&gt;&lt;li&gt;Supporting you by sitting in the front row (smiling and nodding).&lt;/li&gt;&lt;li&gt;Have a copy of your presentation on their machine.&lt;/li&gt;&lt;li&gt;Cloning your code repository, installing SDKs and tools on their machine, if you want to show/run code locally.&lt;/li&gt;&lt;li&gt;Doing a (remote) dry run via their laptop to be completely prepared for a technical failure. (You also test your database backups right?)&lt;/li&gt;&lt;li&gt;Is there any other way your buddy can help you out? Can they tell a funny story during the technical issue, ask a relevant question, help out in case you get difficult questions, or do something else to put you at ease?&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;Even with the existence of cloud-based coding environments, I still suggest having a local environment available in case the internet connection is not good enough.&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 id=&quot;2-for-conference-organizers&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/speaker-buddy/#2-for-conference-organizers&quot; class=&quot;heading-anchor&quot;&gt;2. For conference organizers&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;I know organizers have a lot to worry about when organizing a conference, and most of the conferences I attended did a good job regarding the AV setup. I prefer when there are hired AV professionals to help out, but in case they are not, please ensure there is at least someone from the organization available in the room to assist when technical issues arise.&lt;/p&gt;&lt;p&gt;Additionally, you can offer your speakers some peace of mind when they know someone has their back in case of technical difficulties (e.g. laptop failure).&lt;/p&gt;&lt;h3 id=&quot;21-cfp-preparation&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/speaker-buddy/#21-cfp-preparation&quot; class=&quot;heading-anchor&quot;&gt;2.1. CfP preparation&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;When preparing the Call for Papers (CfP), add a field to whatever system you‚Äôre using to have the speaker indicate if they are willing to be a Speaker Buddy. Include a link to &lt;a href=&quot;https://github.com/marcduiker/speaker-buddy&quot; rel=&quot;noopener&quot;&gt;this repo&lt;/a&gt; so they can read more about it.&lt;/p&gt;&lt;h3 id=&quot;22-speaker-onboarding/confirmation&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/speaker-buddy/#22-speaker-onboarding/confirmation&quot; class=&quot;heading-anchor&quot;&gt;2.2. Speaker onboarding/confirmation&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;When onboarding/confirming speakers to your conference, mention the Speaker Buddy System and provide the list of speakers who have volunteered to be a Speaker Buddy.&lt;/p&gt;&lt;p&gt;Feel free to use this template in your communication:&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Hi {speaker},&lt;/p&gt;&lt;p&gt;We highly encourage you to look for a Speaker Buddy before attending our conference.&lt;/p&gt;&lt;p&gt;A Speaker Buddy is another speaker that can help you out in case of technical issues (e.g. laptop failure).&lt;/p&gt;&lt;p&gt;These speakers are volunteering as Speaker Buddies:&lt;/p&gt;&lt;ul class=&quot;list&quot;&gt;&lt;li&gt;{list of speakers}&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Our conference agenda is published at {conference agenda url}, so look for a Speaker Buddy that is available during your session.&lt;/p&gt;&lt;p&gt;It‚Äôs best to prepare well in advance. For more information on how to be prepared, read the tips at &lt;a href=&quot;https://github.com/marcduiker/speaker-buddy&quot; rel=&quot;noopener&quot;&gt;https://github.com/marcduiker/speaker-buddy&lt;/a&gt;.&lt;/p&gt;&lt;hr&gt;&lt;h3 id=&quot;3-preparing-the-event-location&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/speaker-buddy/#3-preparing-the-event-location&quot; class=&quot;heading-anchor&quot;&gt;3. Preparing the event location&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;When you prepare the conference rooms, label a front-row seat for the Speaker Buddy. This way, they can be supportive and help out the speaker quickly in case of technical issues.&lt;/p&gt;&lt;h2 id=&quot;lets-use-it&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/speaker-buddy/#lets-use-it&quot; class=&quot;heading-anchor&quot;&gt;Let‚Äôs use it!&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I‚Äôve put together a &lt;a href=&quot;https://github.com/marcduiker/speaker-buddy&quot; rel=&quot;noopener&quot;&gt;repository&lt;/a&gt; that contains most of the info in this blog post. I highly encourage conference organizers to refer to this repo in their communication to inform speakers about the Speaker Buddy System.&lt;/p&gt;&lt;p&gt;If you see an opportunity for improvement, please submit an issue or pull request! ‚ù§Ô∏è&lt;/p&gt;
 			</content>
    </entry><entry>
      <title>One year at Ably as a Developer Advocate</title>
      <link href="http://localhost:8080/articles/one-year-at-ably-as-developer-advocate/" />
      <updated>2022-11-02T00:00:00Z</updated>
      <id>http://localhost:8080/articles/one-year-at-ably-as-developer-advocate/</id>
      <content type="html">
				&lt;p&gt;It has been one year since I‚Äôve joined the DevRel team at Ably as Sr Developer Advocate. In this post I‚Äôll highlight some things I‚Äôve been working on and what I‚Äôve learned in the past year. I‚Äôll cover content creation, developer tooling, events, roadmap &amp;amp; predictability, communication &amp;amp; relationships, and finally ‚Äòanything that could be improved‚Äô.&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/63.1.DevRel_team_marc_selected-440w.webp 440w, http://localhost:8080/assets/images/63.1.DevRel_team_marc_selected-650w.webp 650w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/63.1.DevRel_team_marc_selected-650w.webp&quot; width=&quot;650&quot; height=&quot;365&quot; alt=&quot;Ably DevRel team&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;h2 id=&quot;content-creation&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/one-year-at-ably-as-developer-advocate/#content-creation&quot; class=&quot;heading-anchor&quot;&gt;Content creation&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Before I joined Ably, I mostly worked on event-driven architectures using .NET-based backends and Azure services (Azure Functions, CosmosDB, Service Bus). Ably really shines when real-time communication is needed between clients, or between servers and clients, so this meant I had to get up to speed with client-side programming, and WebSocket-based communication using the Ably SDK.&lt;/p&gt;&lt;p&gt;During my onboarding, I created my first demo, &lt;a href=&quot;https://agileflush.ably.dev/&quot; rel=&quot;noopener&quot;&gt;Agile Flush&lt;/a&gt;, a small and playful web app to do remote planning poker. This was my first introduction to VueJS and the Ably client SDK, and after a while I got to like working with Vue. It did take me some time to get used to the toolchain though.&lt;/p&gt;&lt;p&gt;I‚Äôve stuck to using Vue (TypeScript based, with Vite for the dev tooling) for most of my demos where I need a front-end. It pairs nicely with Azure Static Web Apps that I use for hosting the demos.&lt;/p&gt;&lt;p&gt;Here‚Äôs a list with all the demos I‚Äôve created so far, including related content pieces.&lt;/p&gt;&lt;h3 id=&quot;agile-flush&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/one-year-at-ably-as-developer-advocate/#agile-flush&quot; class=&quot;heading-anchor&quot;&gt;Agile Flush&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;A playful web app for remote poker planning. The clients publish their votes and actions to Ably, and Ably pushes the updates to the subscribed clients.&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/63.2.agileflush_screenshot-440w.webp 440w, http://localhost:8080/assets/images/63.2.agileflush_screenshot-650w.webp 650w, http://localhost:8080/assets/images/63.2.agileflush_screenshot-960w.webp 960w, http://localhost:8080/assets/images/63.2.agileflush_screenshot-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/63.2.agileflush_screenshot-1200w.webp&quot; width=&quot;1200&quot; height=&quot;703&quot; alt=&quot;Agile Flush web app&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;ul class=&quot;list&quot;&gt;&lt;li&gt;&lt;a href=&quot;https://ably.com/blog/tutorial-vuejs-nodejs-azure-static-web-apps&quot; rel=&quot;noopener&quot;&gt;Blog post&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=59BZCQuRRkM&quot; rel=&quot;noopener&quot;&gt;Video&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://agileflush.ably.dev/&quot; rel=&quot;noopener&quot;&gt;Live demo&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/ably-labs/agile-flush-vue-app&quot; rel=&quot;noopener&quot;&gt;GitHub repo&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/59BZCQuRRkM&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;h3 id=&quot;what-is-pub/sub-and-how-to-apply-it-in-c-net-to-build-a-chat-app&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/one-year-at-ably-as-developer-advocate/#what-is-pub/sub-and-how-to-apply-it-in-c-net-to-build-a-chat-app&quot; class=&quot;heading-anchor&quot;&gt;What is pub/sub and how to apply it in C# .NET to build a chat app&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;The demo is a .NET 6 console application that can publish or subscribe to messages which get delivered through Ably. The blog post also covers the basics what pub/sub is, the typical use cases, and benefits.&lt;/p&gt;&lt;ul class=&quot;list&quot;&gt;&lt;li&gt;&lt;a href=&quot;https://ably.com/blog/use-pub-sub-to-build-a-chat-app-with-csharp-net&quot; rel=&quot;noopener&quot;&gt;Blog post&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/ably-labs/pubsub-demo-dotnet&quot; rel=&quot;noopener&quot;&gt;GitHub repo&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&quot;serverless-websockets-quest&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/one-year-at-ably-as-developer-advocate/#serverless-websockets-quest&quot; class=&quot;heading-anchor&quot;&gt;Serverless WebSockets Quest&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;A turn-based mini game with with real-time aspects build on Azure Functions, Durable Functions, and Ably.&lt;/p&gt;&lt;ul class=&quot;list&quot;&gt;&lt;li&gt;&lt;a href=&quot;https://ably.com/blog/quest-for-serverless-websockets-azure-functions-adventure&quot; rel=&quot;noopener&quot;&gt;Blog post&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=KHzdc3USFU4&quot; rel=&quot;noopener&quot;&gt;Video&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://quest.ably.dev/&quot; rel=&quot;noopener&quot;&gt;Live demo&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/ably-labs/serverless-websockets-quest&quot; rel=&quot;noopener&quot;&gt;GitHub repo&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/KHzdc3USFU4&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;h3 id=&quot;collaborative-pixelart-drawing&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/one-year-at-ably-as-developer-advocate/#collaborative-pixelart-drawing&quot; class=&quot;heading-anchor&quot;&gt;Collaborative Pixelart Drawing&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;A collaborative pixelart drawing canvas. Multiple users draw on a canvas, and their movement and actions are shared with the other connected users.&lt;/p&gt;&lt;p&gt;I created two versions of this demo, one using Ably, and one using Azure Web PubSub, and did a write-up about difference in developer experience between the two services.&lt;/p&gt;&lt;ul class=&quot;list&quot;&gt;&lt;li&gt;&lt;a href=&quot;https://ably.com/blog/cloud-pubsub-services-compared-azure-web-pubsub-ably&quot; rel=&quot;noopener&quot;&gt;Blog post&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=sPgHwm3-yiM&quot; rel=&quot;noopener&quot;&gt;Video&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://pixel-paint.ably.dev/&quot; rel=&quot;noopener&quot;&gt;Live demo&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/ably-labs/collaborative-pixel-drawing&quot; rel=&quot;noopener&quot;&gt;GitHub repo&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/sPgHwm3-yiM&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;h3 id=&quot;serverless-pizza-workflow-visualizer&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/one-year-at-ably-as-developer-advocate/#serverless-pizza-workflow-visualizer&quot; class=&quot;heading-anchor&quot;&gt;Serverless Pizza Workflow Visualizer&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;A demo that visualizes the real-time progress of a serverless workflow that is built with Durable Functions. I really had a lot of fun creating the pizza-themed visuals for this demo.&lt;/p&gt;&lt;ul class=&quot;list&quot;&gt;&lt;li&gt;&lt;a href=&quot;https://ably.com/blog/visualize-azure-serverless-workflow-progress-in-realtime-with-pubsub&quot; rel=&quot;noopener&quot;&gt;Blog post&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=y9-a_ewgWCQ&quot; rel=&quot;noopener&quot;&gt;Video&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://pizza.ably.dev/&quot; rel=&quot;noopener&quot;&gt;Live demo&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/ably-labs/serverless-workflow-visualizer&quot; rel=&quot;noopener&quot;&gt;GitHub repo&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/y9-a_ewgWCQ&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;h2 id=&quot;developer-tooling&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/one-year-at-ably-as-developer-advocate/#developer-tooling&quot; class=&quot;heading-anchor&quot;&gt;Developer tooling&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I &lt;strong&gt;really&lt;/strong&gt; like improving the developer experience from a tooling perspective. Ably has a Control API, a RESTful interface that allows management of the Ably apps. I‚Äôve used this API in several tools to speed up the creation of apps and keys.&lt;/p&gt;&lt;h3 id=&quot;ably-control-api-github-action&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/one-year-at-ably-as-developer-advocate/#ably-control-api-github-action&quot; class=&quot;heading-anchor&quot;&gt;Ably Control API GitHub Action&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Since most of my demos require a new Ably App, I created a GitHub action that creates an app from a GitHub workflow. The action also enables the the creation of an API key with a configurable set of capabilities. This was the first time I‚Äôve created a GitHub action, which was a great learning experience for me. The action has a limited feature set, but I intend to add more features in the future.&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/63.7.ably-control-api-action-440w.webp 440w, http://localhost:8080/assets/images/63.7.ably-control-api-action-650w.webp 650w, http://localhost:8080/assets/images/63.7.ably-control-api-action-960w.webp 960w, http://localhost:8080/assets/images/63.7.ably-control-api-action-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/63.7.ably-control-api-action-1200w.webp&quot; width=&quot;1200&quot; height=&quot;367&quot; alt=&quot;Ably Control API GitHub Action&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;ul class=&quot;list&quot;&gt;&lt;li&gt;&lt;a href=&quot;https://ably.com/blog/infrastructure-as-code-ably-control-api-github-action&quot; rel=&quot;noopener&quot;&gt;Blog post&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=b7GE39JaM3M&quot; rel=&quot;noopener&quot;&gt;Video&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/marketplace/actions/ably-control-api&quot; rel=&quot;noopener&quot;&gt;Marketplace&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/ably-labs/ably-control-api-action&quot; rel=&quot;noopener&quot;&gt;GitHub repo&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/b7GE39JaM3M&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;h3 id=&quot;ably-vscode-extension&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/one-year-at-ably-as-developer-advocate/#ably-vscode-extension&quot; class=&quot;heading-anchor&quot;&gt;Ably VSCode extension&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;During the first Ably Innovation Days, I proposed to create a VSCode extension that allows developers to manage their Ably apps directly from VSCode. I formed a team with several colleagues, and in two days we had a working prototype that lists all the Ably apps in the activity bar, and creates a new Ably app via the command palette. We won the &lt;em&gt;Ship It üö¢&lt;/em&gt; award with this prototype, which allowed me to continue working on the extension and release it to the VSCode extension marketplace.&lt;/p&gt;&lt;ul class=&quot;list&quot;&gt;&lt;li&gt;&lt;a href=&quot;https://ably.com/blog/announcing-the-ably-vs-code-extension&quot; rel=&quot;noopener&quot;&gt;Blog post&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=3CPHb_kn1-o&quot; rel=&quot;noopener&quot;&gt;Video&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=ably-labs.vscode-ably&quot; rel=&quot;noopener&quot;&gt;Marketplace&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/ably-labs/vscode-ably&quot; rel=&quot;noopener&quot;&gt;GitHub repo&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/3CPHb_kn1-o&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;h3 id=&quot;ably-cli&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/one-year-at-ably-as-developer-advocate/#ably-cli&quot; class=&quot;heading-anchor&quot;&gt;Ably CLI&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;During the second Ably Innovation Days, I started working on specifications for an Ably CLI. After the first day &lt;a href=&quot;https://twitter.com/leggetter&quot; rel=&quot;noopener&quot;&gt;Phil&lt;/a&gt; and I started with a prototype based on &lt;a href=&quot;https://oclif.io/&quot; rel=&quot;noopener&quot;&gt;oclif&lt;/a&gt;. We managed to create a working prototype in a day that lists Ably apps, and creates a new Ably app. This project is still Work In Progress. Once the CLI is in a releasable state, I‚Äôll create some content around this.&lt;/p&gt;&lt;ul class=&quot;list&quot;&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/ably-labs/ably-cli&quot; rel=&quot;noopener&quot;&gt;GitHub repo&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;events&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/one-year-at-ably-as-developer-advocate/#events&quot; class=&quot;heading-anchor&quot;&gt;Events&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I had the opportunity to speak at several conferences and meetups this year, both online and in-person. It was great to attend in-person events again, networking with other people, seeing people respond to your talk, and people asking questions afterwards. I‚Äôm still a proponent of online (or hybrid) events as well though. Online events can be more accessible, and allow for a more diverse audience.&lt;/p&gt;&lt;p&gt;Events I spoke at:&lt;/p&gt;&lt;ul class=&quot;list&quot;&gt;&lt;li&gt;&lt;a href=&quot;https://azurelowlands.com/&quot; rel=&quot;noopener&quot;&gt;Azure Lowlands&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://ndcoslo.com/&quot; rel=&quot;noopener&quot;&gt;NDC Oslo&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://dotnetdays.ro/&quot; rel=&quot;noopener&quot;&gt;dotnetdays Romania&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=LpzJTJvH6go&amp;amp;t=3453s&quot; rel=&quot;noopener&quot;&gt;CosmosDB Conference&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://youtu.be/Y0YTtgn5KKo&quot; rel=&quot;noopener&quot;&gt;ServerlessDays NYC&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=FGklbFQrd44&quot; rel=&quot;noopener&quot;&gt;Microsoft Reactor Toronto&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://www.dotnetoxford.com/posts/2022-02-lightning-talks&quot; rel=&quot;noopener&quot;&gt;Oxford .NET User Group&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=R87-35-Aiw8&quot; rel=&quot;noopener&quot;&gt;Welsh Azure User Group&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://www.sharepointeurope.com/webinars/start-building-serverless-applications-on-azure/&quot; rel=&quot;noopener&quot;&gt;ESPC Community Webinar&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;roadmap-and-predictability&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/one-year-at-ably-as-developer-advocate/#roadmap-and-predictability&quot; class=&quot;heading-anchor&quot;&gt;Roadmap &amp;amp; Predictability&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Part of my role involves creating and updating a roadmap for the .NET &amp;amp; Azure community. This document refers to the company strategy, and how the DevRel team activities fit in that strategy. The roadmap contains the topics which I plan to create content for, estimations on their outcomes, and a timeline. The metrics &amp;amp; predictability of the outcomes is really one of the most difficult parts in DevRel. One blog post can go viral while the next one hardly gets any engagement. It‚Äôs important to try understand why something works well or why it doesn‚Äôt.&lt;/p&gt;&lt;p&gt;What I‚Äôve learned over the last year is that content creation is just a small part of the bigger picture when working in DevRel. Content distribution is just as important. If I write a great blog post but hardly anyone will read it, then writing it has been a waste of my time. I‚Äôm spending more time these days on the distribution part, to make sure the content gets the proper exposure across various channels. It‚Äôs not a part I particularly like, but it needs to be done, and I do appreciate the new insights it gives me.&lt;/p&gt;&lt;p&gt;Reflecting on the content, the engagement, and analyzing the performance (visits, session duration, sign-ups etc) is even more important. If a content piece is not resulting in (enough) sign-ups, then we investigate why, change the content, or use a different approach for future pieces. We‚Äôre measuring several aspects for a couple of months now and it still feels like we‚Äôre at the beginning of understanding the numbers. It‚Äôs certainly an area that interests me, and where I want to improve the predictability of my work. Being in DevRel means that you‚Äôre constantly learning, measuring, and tweaking. And that‚Äôs what I love about it.&lt;/p&gt;&lt;h2 id=&quot;communication-and-relationships&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/one-year-at-ably-as-developer-advocate/#communication-and-relationships&quot; class=&quot;heading-anchor&quot;&gt;Communication &amp;amp; Relationships&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;So far, it looks like this is all a one-person-show, but it‚Äôs far from that.&lt;/p&gt;&lt;p&gt;I depend on:&lt;/p&gt;&lt;ul class=&quot;list&quot;&gt;&lt;li&gt;My DevRel and content team colleagues, who help me review the content I create.&lt;/li&gt;&lt;li&gt;Our community manager, who informs me of CfPs, sponsoring opportunities, and new questions on Discord and social media.&lt;/li&gt;&lt;li&gt;Our content marketing team, to provide me with insights on keyword research and content performance.&lt;/li&gt;&lt;li&gt;Our product team, to keep me up to date with the latest product features and changes.&lt;/li&gt;&lt;li&gt;My managers, to provide me with valuable feedback about my work, so I can keep improving.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The &lt;em&gt;relations&lt;/em&gt; part of DevRel is really crucial. In order to have a good relation with your developer audience, you also need to have a good relation with your team members, Marketing, Product, Documentation, Engineering, and Customer Support. Establishing and growing these relations take time. New people join the company and others leave, it‚Äôs an ever changing environment. It can be tiring and challenging at times, but once the relationship is there, it feels good to work together to achieve a common goal.&lt;/p&gt;&lt;h2 id=&quot;anything-that-could-be-improved&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/one-year-at-ably-as-developer-advocate/#anything-that-could-be-improved&quot; class=&quot;heading-anchor&quot;&gt;Anything that could be improved?&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Always! üòÖ I noticed that I spent less time on my open source projects than before I joined Ably. It‚Äôs probably because I now create content for a living, I don‚Äôt always feel like doing that in my spare time as well. I still have plenty of plans to continue working on these projects though, it just needs a bit more planning and prioritization.&lt;/p&gt;&lt;p&gt;One of the areas I really want to expand on is collaborations with other people. These could be collaborations with other DevRel folks, or individual developers who share a common interest around serverless, real-time communication, pixelart, or something completely out of the box! If you think we should combine forces to work on a fun project together, please &lt;a href=&quot;https://twitter.com/marcduiker&quot; rel=&quot;noopener&quot;&gt;reach out&lt;/a&gt;!&lt;/p&gt;
 			</content>
    </entry><entry>
      <title>Azure Functions University - Deployment Lesson (.NET 6)</title>
      <link href="http://localhost:8080/articles/azfuncuni-deployment-lesson-dotnet6/" />
      <updated>2022-03-15T00:00:00Z</updated>
      <id>http://localhost:8080/articles/azfuncuni-deployment-lesson-dotnet6/</id>
      <content type="html">
				&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/62.AzureFunctionsUniversity_Deployment_Lesson_NET6-440w.webp 440w, http://localhost:8080/assets/images/62.AzureFunctionsUniversity_Deployment_Lesson_NET6-650w.webp 650w, http://localhost:8080/assets/images/62.AzureFunctionsUniversity_Deployment_Lesson_NET6-960w.webp 960w, http://localhost:8080/assets/images/62.AzureFunctionsUniversity_Deployment_Lesson_NET6-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/62.AzureFunctionsUniversity_Deployment_Lesson_NET6-1200w.webp&quot; width=&quot;1200&quot; height=&quot;675&quot; alt=&quot;Deployment Lesson .NET 6&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;Hi serverless friends, we have a new Azure Functions University lesson for you! In this lesson we will learn how to deploy Azure Functions written in .NET 6.&lt;/p&gt;&lt;h2 id=&quot;lesson&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/azfuncuni-deployment-lesson-dotnet6/#lesson&quot; class=&quot;heading-anchor&quot;&gt;Lesson&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;You can find the lesson on GitHub: &lt;a href=&quot;https://github.com/marcduiker/azure-functions-university/blob/main/lessons/dotnet6/deployment/README.md&quot; rel=&quot;noopener&quot;&gt;Deployment to Azure (.NET 6)&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;And you can watch the video on YouTube:&lt;/p&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/RgF8bA1-CMo&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;br&gt;The lesson consists of the following exercises:&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Nr&lt;/th&gt;&lt;th&gt;Exercise&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Prerequisites&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Understanding the Azure Resources&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Deployment using VSCode&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;Creating Azure Resources using Azure CLI&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;Deployment using Azure Functions CLI&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Deployment using GitHub Actions&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;6&lt;/td&gt;&lt;td&gt;Homework&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 			</content>
    </entry><entry>
      <title>Azure Functions University - Durable Functions Advanced Patterns (TypeScript)</title>
      <link href="http://localhost:8080/articles/azfuncuni-durablefunctions-advanced-lesson-typescript/" />
      <updated>2022-02-25T00:00:00Z</updated>
      <id>http://localhost:8080/articles/azfuncuni-durablefunctions-advanced-lesson-typescript/</id>
      <content type="html">
				&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/61.AzureFunctionsUniversity_DurableFunctions_Lesson2_typescript-440w.webp 440w, http://localhost:8080/assets/images/61.AzureFunctionsUniversity_DurableFunctions_Lesson2_typescript-650w.webp 650w, http://localhost:8080/assets/images/61.AzureFunctionsUniversity_DurableFunctions_Lesson2_typescript-960w.webp 960w, http://localhost:8080/assets/images/61.AzureFunctionsUniversity_DurableFunctions_Lesson2_typescript-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/61.AzureFunctionsUniversity_DurableFunctions_Lesson2_typescript-1200w.webp&quot; width=&quot;1200&quot; height=&quot;675&quot; alt=&quot;Durable Functions Lesson 2 TypeScript&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;Hi serverless friends, we have a new Azure Functions University lesson for you! In this lesson we will learn how to use some advanced Durable Functions patterns in Azure Functions written in TypeScript.&lt;/p&gt;&lt;h2 id=&quot;lesson&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/azfuncuni-durablefunctions-advanced-lesson-typescript/#lesson&quot; class=&quot;heading-anchor&quot;&gt;Lesson&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;You can find the lesson on GitHub: &lt;a href=&quot;https://github.com/marcduiker/azure-functions-university/tree/main/lessons/typescript/durable-functions/advanced/README.md&quot; rel=&quot;noopener&quot;&gt;Durable Functions - Advanced Patterns (TypeScript)&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;And you can watch the video on YouTube:&lt;/p&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/iYij7Mf7_dE&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;br&gt;The lesson consists of the following exercises:&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Nr&lt;/th&gt;&lt;th&gt;Exercise&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Prerequisites&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Scenario&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Fan-Out/Fan-In&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;Sub-Orchestration&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;External Events - Human Interaction&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Homework&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 			</content>
    </entry><entry>
      <title>Azure Functions University - Calling third-party REST APIs (.NET 6)</title>
      <link href="http://localhost:8080/articles/azfuncuni-callingrestapis-lesson-dotnet6/" />
      <updated>2022-02-13T00:00:00Z</updated>
      <id>http://localhost:8080/articles/azfuncuni-callingrestapis-lesson-dotnet6/</id>
      <content type="html">
				&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/60.AzureFunctionsUniversity_Calling3rdpartyRESTAPIs_dotnet6-440w.webp 440w, http://localhost:8080/assets/images/60.AzureFunctionsUniversity_Calling3rdpartyRESTAPIs_dotnet6-650w.webp 650w, http://localhost:8080/assets/images/60.AzureFunctionsUniversity_Calling3rdpartyRESTAPIs_dotnet6-960w.webp 960w, http://localhost:8080/assets/images/60.AzureFunctionsUniversity_Calling3rdpartyRESTAPIs_dotnet6-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/60.AzureFunctionsUniversity_Calling3rdpartyRESTAPIs_dotnet6-1200w.webp&quot; width=&quot;1200&quot; height=&quot;675&quot; alt=&quot;Calling third-party REST APIs .NET 6&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;Hi serverless friends, we have a new Azure Functions University lesson for you! In this lesson we will learn how to call 3rd party REST APIs in Azure Functions written in .NET 6.&lt;/p&gt;&lt;h2 id=&quot;lesson&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/azfuncuni-callingrestapis-lesson-dotnet6/#lesson&quot; class=&quot;heading-anchor&quot;&gt;Lesson&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;You can find the lesson on GitHub: &lt;a href=&quot;https://github.com/marcduiker/azure-functions-university/blob/main/lessons/dotnet6/http-refit/README.md&quot; rel=&quot;noopener&quot;&gt;Calling third-party REST APIs (.NET 6)&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;And you can watch the video on YouTube:&lt;/p&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/11Qi8A_8cVY&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;br&gt;The lesson consists of the following exercises:&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Nr&lt;/th&gt;&lt;th&gt;Exercise&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Prerequisites&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Creating a default HTTP-triggered function app&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Defining a third-party REST API&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;Adding custom API parameters&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;Homework&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 			</content>
    </entry><entry>
      <title>Azure Functions University - HTTP Lesson (.NET 6)</title>
      <link href="http://localhost:8080/articles/azfuncuni-http-lesson-dotnet6/" />
      <updated>2022-01-03T00:00:00Z</updated>
      <id>http://localhost:8080/articles/azfuncuni-http-lesson-dotnet6/</id>
      <content type="html">
				&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/59.AzureFunctionsUniversity_HTTP_Lesson_dotnet6-440w.webp 440w, http://localhost:8080/assets/images/59.AzureFunctionsUniversity_HTTP_Lesson_dotnet6-650w.webp 650w, http://localhost:8080/assets/images/59.AzureFunctionsUniversity_HTTP_Lesson_dotnet6-960w.webp 960w, http://localhost:8080/assets/images/59.AzureFunctionsUniversity_HTTP_Lesson_dotnet6-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/59.AzureFunctionsUniversity_HTTP_Lesson_dotnet6-1200w.webp&quot; width=&quot;1200&quot; height=&quot;675&quot; alt=&quot;Http Lesson .NET 6&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;Hi serverless friends, we have a new Azure Functions University lesson for you! In this lesson we will learn how to use the HTTP trigger in Azure Functions written in .NET 6.&lt;/p&gt;&lt;h2 id=&quot;lesson&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/azfuncuni-http-lesson-dotnet6/#lesson&quot; class=&quot;heading-anchor&quot;&gt;Lesson&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;You can find the lesson on GitHub: &lt;a href=&quot;https://github.com/marcduiker/azure-functions-university/blob/main/lessons/dotnet6/http/README.md&quot; rel=&quot;noopener&quot;&gt;HTTP Trigger (.NET 6)&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;And you can watch the video on YouTube:&lt;/p&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/aifFp86G3tI&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;br&gt;The lesson consists of the following exercises:&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Nr&lt;/th&gt;&lt;th&gt;Exercise&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Prerequisites&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Creating a Function App&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Changing the template for GET requests&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;Adding a BadRequest response&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;Handling POST requests with string data&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Handling POST requests with JSON data&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;6&lt;/td&gt;&lt;td&gt;Changing the route for a custom greeting&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;7&lt;/td&gt;&lt;td&gt;Homework&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 			</content>
    </entry><entry>
      <title>Azure Functions University - HTTP Lesson (Python)</title>
      <link href="http://localhost:8080/articles/azfuncuni-http-lesson-python/" />
      <updated>2021-12-10T00:00:00Z</updated>
      <id>http://localhost:8080/articles/azfuncuni-http-lesson-python/</id>
      <content type="html">
				&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/58.AzureFunctionsUniversity_HTTP_Lesson_python-440w.webp 440w, http://localhost:8080/assets/images/58.AzureFunctionsUniversity_HTTP_Lesson_python-650w.webp 650w, http://localhost:8080/assets/images/58.AzureFunctionsUniversity_HTTP_Lesson_python-960w.webp 960w, http://localhost:8080/assets/images/58.AzureFunctionsUniversity_HTTP_Lesson_python-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/58.AzureFunctionsUniversity_HTTP_Lesson_python-1200w.webp&quot; width=&quot;1200&quot; height=&quot;675&quot; alt=&quot;Http Lesson Python&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;Hi serverless friends, we have a new Azure Functions University lesson for you! In this lesson we will learn how to use the HTTP trigger in Azure Functions written in Python.&lt;/p&gt;&lt;h2 id=&quot;lesson&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/azfuncuni-http-lesson-python/#lesson&quot; class=&quot;heading-anchor&quot;&gt;Lesson&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;You can find the lesson on GitHub: &lt;a href=&quot;https://github.com/marcduiker/azure-functions-university/blob/main/lessons/python/http/README.md&quot; rel=&quot;noopener&quot;&gt;HTTP Trigger (Python)&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;And you can watch the video on YouTube:&lt;/p&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/fDnPGeRTwHc&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;br&gt;The lesson consists of the following exercises:&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Nr&lt;/th&gt;&lt;th&gt;Exercise&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Prerequisites&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Creating a Function App&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Changing the template for GET requests&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;Changing the template for POST requests&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;Adding a new function for POST requests&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Homework&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 			</content>
    </entry><entry>
      <title>Azure Functions University - HTTP Lesson (PowerShell via Portal)</title>
      <link href="http://localhost:8080/articles/azfuncuni-http-lesson-powershell-portal/" />
      <updated>2021-10-24T00:00:00Z</updated>
      <id>http://localhost:8080/articles/azfuncuni-http-lesson-powershell-portal/</id>
      <content type="html">
				&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/57.AzureFunctionsUniversity_HTTP_Lesson_PowerShell-440w.webp 440w, http://localhost:8080/assets/images/57.AzureFunctionsUniversity_HTTP_Lesson_PowerShell-650w.webp 650w, http://localhost:8080/assets/images/57.AzureFunctionsUniversity_HTTP_Lesson_PowerShell-960w.webp 960w, http://localhost:8080/assets/images/57.AzureFunctionsUniversity_HTTP_Lesson_PowerShell-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/57.AzureFunctionsUniversity_HTTP_Lesson_PowerShell-1200w.webp&quot; width=&quot;1200&quot; height=&quot;675&quot; alt=&quot;Http Lesson PowerShell&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;Hi serverless friends, we have a new Azure Functions University lesson for you! In this lesson we will learn how to use the HTTP trigger in PowerShell Azure Functions in the Azure Portal.&lt;/p&gt;&lt;h2 id=&quot;lesson&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/azfuncuni-http-lesson-powershell-portal/#lesson&quot; class=&quot;heading-anchor&quot;&gt;Lesson&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;You can find the lesson on GitHub: &lt;a href=&quot;https://github.com/marcduiker/azure-functions-university/blob/main/lessons/PowerShell/http/http-lesson-powershell-portal.md&quot; rel=&quot;noopener&quot;&gt;HTTP Trigger (PowerShell via the Azure Portal)&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;And you can watch the video on YouTube:&lt;/p&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/w0FcA7Prnjk&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;br&gt;The lesson consists of the following exercises:&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Nr&lt;/th&gt;&lt;th&gt;Exercise&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Prerequisites&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Creating a Function App&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Take a tour of the interface&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;Creating your first Function&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;Changing the template for GET requests&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Changing the template for POST requests&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;6&lt;/td&gt;&lt;td&gt;Changing the name of the Request parameter&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;7&lt;/td&gt;&lt;td&gt;Change the route for a custom greeting&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;8&lt;/td&gt;&lt;td&gt;Homework&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 			</content>
    </entry><entry>
      <title>Azure Functions University - Blob Lesson (TypeScript)</title>
      <link href="http://localhost:8080/articles/azfuncuni-blob-lesson-typescript/" />
      <updated>2021-09-03T00:00:00Z</updated>
      <id>http://localhost:8080/articles/azfuncuni-blob-lesson-typescript/</id>
      <content type="html">
				&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/56.AzureFunctionsUniversity_Blob_Lesson_typescript-440w.webp 440w, http://localhost:8080/assets/images/56.AzureFunctionsUniversity_Blob_Lesson_typescript-650w.webp 650w, http://localhost:8080/assets/images/56.AzureFunctionsUniversity_Blob_Lesson_typescript-960w.webp 960w, http://localhost:8080/assets/images/56.AzureFunctionsUniversity_Blob_Lesson_typescript-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/56.AzureFunctionsUniversity_Blob_Lesson_typescript-1200w.webp&quot; width=&quot;1200&quot; height=&quot;675&quot; alt=&quot;Blob Lesson TypeScript&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;Hi serverless friends, we have a new Azure Functions University lesson for you! In this lesson we will learn how to use the Blob trigger &amp;amp; bindings in Azure Functions written in TypeScript.&lt;/p&gt;&lt;h2 id=&quot;lesson&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/azfuncuni-blob-lesson-typescript/#lesson&quot; class=&quot;heading-anchor&quot;&gt;Lesson&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;You can find the lesson on GitHub: &lt;a href=&quot;https://github.com/marcduiker/azure-functions-university/blob/main/lessons/typescript/blob/README.md&quot; rel=&quot;noopener&quot;&gt;Blob Trigger &amp;amp; Bindings (TypeScript)&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;And you can watch the video on YouTube:&lt;/p&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/SC4-_ZwjlR4&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;br&gt;The lesson consists of the following exercises:&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Nr&lt;/th&gt;&lt;th&gt;Exercise&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Prerequisites&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Using the Microsoft Azure Storage Explorer and Azurite&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Using plain Blob output bindings&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;Using binding expressions for Blob output bindings&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;Using payload data of trigger for Blob output bindings&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Using plain Blob input bindings&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;6&lt;/td&gt;&lt;td&gt;Using Blob storage SDK for reading&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;7&lt;/td&gt;&lt;td&gt;Creating a Blob triggered Function&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;8&lt;/td&gt;&lt;td&gt;Homework&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 			</content>
    </entry><entry>
      <title>Azure Functions University - Lesson Tips</title>
      <link href="http://localhost:8080/articles/azfuncuni-lesson-tips/" />
      <updated>2021-05-19T00:00:00Z</updated>
      <id>http://localhost:8080/articles/azfuncuni-lesson-tips/</id>
      <content type="html">
				&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/55.AzureFunctionsUniversity_Lesson_Tips-440w.webp 440w, http://localhost:8080/assets/images/55.AzureFunctionsUniversity_Lesson_Tips-650w.webp 650w, http://localhost:8080/assets/images/55.AzureFunctionsUniversity_Lesson_Tips-960w.webp 960w, http://localhost:8080/assets/images/55.AzureFunctionsUniversity_Lesson_Tips-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/55.AzureFunctionsUniversity_Lesson_Tips-1200w.webp&quot; width=&quot;1200&quot; height=&quot;675&quot; alt=&quot;Lesson Tip&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;Hi serverless friends, since the amount of Azure Functions University content is growing rapidly, I‚Äôve made a video on how you can get started with Azure Functions University.&lt;/p&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/xJEi8Mofp0A&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;br&gt;This video contains these topics:&lt;ul class=&quot;list&quot;&gt;&lt;li&gt;0:00 Intro&lt;/li&gt;&lt;li&gt;0:30 YouTube&lt;/li&gt;&lt;li&gt;0:53 YouTube Playlists&lt;/li&gt;&lt;li&gt;1:34 YouTube Chapters&lt;/li&gt;&lt;li&gt;2:18 GitHub repo&lt;/li&gt;&lt;li&gt;3:03 Table of contents links in markdown&lt;/li&gt;&lt;li&gt;3:44 Cloning the GitHub repo&lt;/li&gt;&lt;li&gt;5:13 The Azure Functions University folder structure&lt;/li&gt;&lt;li&gt;6:33 Using VSCode workspaces&lt;/li&gt;&lt;li&gt;12:22 Using CodeTour&lt;/li&gt;&lt;li&gt;16:00 Recap and closing&lt;/li&gt;&lt;/ul&gt;
 			</content>
    </entry><entry>
      <title>Azure Functions University - HTTP Lesson (PowerShell)</title>
      <link href="http://localhost:8080/articles/azfuncuni-http-lesson-powershell/" />
      <updated>2021-05-08T00:00:00Z</updated>
      <id>http://localhost:8080/articles/azfuncuni-http-lesson-powershell/</id>
      <content type="html">
				&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/54.AzureFunctionsUniversity_HTTP_Lesson_PowerShell-440w.webp 440w, http://localhost:8080/assets/images/54.AzureFunctionsUniversity_HTTP_Lesson_PowerShell-650w.webp 650w, http://localhost:8080/assets/images/54.AzureFunctionsUniversity_HTTP_Lesson_PowerShell-960w.webp 960w, http://localhost:8080/assets/images/54.AzureFunctionsUniversity_HTTP_Lesson_PowerShell-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/54.AzureFunctionsUniversity_HTTP_Lesson_PowerShell-1200w.webp&quot; width=&quot;1200&quot; height=&quot;675&quot; alt=&quot;Http Lesson PowerShell&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;Hi serverless friends, we have a new Azure Functions University lesson for you! In this lesson we will learn how to use the HTTP trigger in Azure Functions written in PowerShell.&lt;/p&gt;&lt;h2 id=&quot;lesson&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/azfuncuni-http-lesson-powershell/#lesson&quot; class=&quot;heading-anchor&quot;&gt;Lesson&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;You can find the lesson on GitHub: &lt;a href=&quot;https://github.com/marcduiker/azure-functions-university/blob/main/lessons/PowerShell/http/README.md&quot; rel=&quot;noopener&quot;&gt;HTTP Trigger (PowerShell)&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;And you can watch the video on YouTube:&lt;/p&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/uPzpfAosmZ8&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;br&gt;The lesson consists of the following exercises:&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Nr&lt;/th&gt;&lt;th&gt;Exercise&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Prerequisites&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Creating a Function App&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Changing the template for GET requests&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;Changing the template for POST requests&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;Changing the name of the Request parameter&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Change the route for a custom greeting&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;6&lt;/td&gt;&lt;td&gt;Homework&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 			</content>
    </entry><entry>
      <title>Creating Azure Functions University, an open source educational project</title>
      <link href="http://localhost:8080/articles/azure-functions-university/" />
      <updated>2021-04-27T00:00:00Z</updated>
      <id>http://localhost:8080/articles/azure-functions-university/</id>
      <content type="html">
				&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/53.1.AzureFunctionsUniversity_YouTube_Lesson1-440w.webp 440w, http://localhost:8080/assets/images/53.1.AzureFunctionsUniversity_YouTube_Lesson1-650w.webp 650w, http://localhost:8080/assets/images/53.1.AzureFunctionsUniversity_YouTube_Lesson1-960w.webp 960w, http://localhost:8080/assets/images/53.1.AzureFunctionsUniversity_YouTube_Lesson1-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/53.1.AzureFunctionsUniversity_YouTube_Lesson1-1200w.webp&quot; width=&quot;1200&quot; height=&quot;640&quot; alt=&quot;Screenshot of the first Azure Functions University lesson&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;h2 id=&quot;azure-functions-university&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/azure-functions-university/#azure-functions-university&quot; class=&quot;heading-anchor&quot;&gt;Azure Functions University&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Azure Functions University is an educational project to learn about Azure Functions, the Functions as a Service offering in Azure. The content is aimed at people who do not have any previous experience with serverless technology and want to learn more about it.&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/53.2.AzureFunctionsUniversity_GitHub_Readme-440w.webp 440w, http://localhost:8080/assets/images/53.2.AzureFunctionsUniversity_GitHub_Readme-650w.webp 650w, http://localhost:8080/assets/images/53.2.AzureFunctionsUniversity_GitHub_Readme-960w.webp 960w, http://localhost:8080/assets/images/53.2.AzureFunctionsUniversity_GitHub_Readme-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/53.2.AzureFunctionsUniversity_GitHub_Readme-1200w.webp&quot; width=&quot;1200&quot; height=&quot;817&quot; alt=&quot;Screenshot of the Azure Functions University GitHub repository&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;h2 id=&quot;the-idea-behind-the-project&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/azure-functions-university/#the-idea-behind-the-project&quot; class=&quot;heading-anchor&quot;&gt;The idea behind the project&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I started this project because I want to enable newcomers to serverless technology to get up and running with Azure Functions in a very low friction way. Learning new things can be challenging, and frequently, the official documentation alone is not enough to understand a new topic and put it into practice.&lt;/p&gt;&lt;p&gt;The dual-channel delivery, &lt;a href=&quot;https://bit.ly/az-func-uni&quot; rel=&quot;noopener&quot;&gt;lessons on GitHub&lt;/a&gt; and &lt;a href=&quot;https://bit.ly/az-func-uni-playlist&quot; rel=&quot;noopener&quot;&gt;videos on YouTube&lt;/a&gt;, is intentional because some people prefer watching (or listening) to videos, while others prefer reading.&lt;/p&gt;&lt;h2 id=&quot;how-it-started&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/azure-functions-university/#how-it-started&quot; class=&quot;heading-anchor&quot;&gt;How it started&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The Azure Functions University project started in October 2020. I have had quite some content on both GitHub and YouTube for some years now, but most of that was intended for intermediate or experienced users of Azure Functions. Since there is a huge increase in people new to programming, I want to help out that group and make it easy for them to start with serverless technology.&lt;/p&gt;&lt;p&gt;I consider myself reasonably experienced with Azure Functions. On the one hand, that‚Äôs good for the project, so I can share a lot of what I know. But on the other hand, this can be a pitfall because I‚Äôm likely to have assumptions on topics that people new to serverless don‚Äôt have. To prevent too much bias from my side, I wanted someone relatively new to the technology to co-create the content and co-host the live streams. I was following Gwyneth Pena (US) on Twitter, and since I really like her personality and the style of her videos, I asked her to join. I was thrilled she said yes immediately.&lt;/p&gt;&lt;p&gt;Gwyneth was changing jobs right after we started, and she couldn‚Äôt help out for a while. I had to find others to help create content and co-host the live streams. Luckily some people reached out. There are now contributions from Gabriela Martinez (Mexico), Christian Lechner (Germany), Stacy Cashmore (Netherlands), and Barbara Forbes (Netherlands).&lt;/p&gt;&lt;h2 id=&quot;curriculum&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/azure-functions-university/#curriculum&quot; class=&quot;heading-anchor&quot;&gt;Curriculum&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;At this moment, the curriculum contains the following lessons:&lt;/p&gt;&lt;ul class=&quot;list&quot;&gt;&lt;li&gt;&lt;strong&gt;HTTP&lt;/strong&gt;; How to do GET requests and use query string parameters and do POST requests where the data is read from the request body.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Blob&lt;/strong&gt;; How to use output and input bindings to read/write data from/to Blob storage using different binding types, using the BlobTrigger to start a function when a blob is written to storage.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Queue&lt;/strong&gt;; How to use output bindings with various binding types, using the QueueTrigger to start a function when a message is put in a queue.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Table&lt;/strong&gt;; How to use output and input bindings to read/write data from/to Table storage with various binding types.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Deployment&lt;/strong&gt;; How to deploy your Function App to Azure using VSCode, Azure CLI, and GitHUb Actions.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Configuration&lt;/strong&gt;; Why and how to use app settings in your Function App, using App Configuration service for easier management for app settings across multiple resources.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;CosmosDB&lt;/strong&gt;; How to use the output and input bindings to read/write data from/to CosmosDB, using the CosmosDBTrigger to start a function when a new document is added to a collection, and using KeyVault to store the CosmosDB connection string.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Durable Functions, part I&lt;/strong&gt;; Why using Durable Functions is beneficial when dealing with multiple functions. This is demonstrated by using the function chaining pattern to illustrate how orchestrations work.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/53.3.AzureFunctionsUniversity_YouTube_Playlist-440w.webp 440w, http://localhost:8080/assets/images/53.3.AzureFunctionsUniversity_YouTube_Playlist-650w.webp 650w, http://localhost:8080/assets/images/53.3.AzureFunctionsUniversity_YouTube_Playlist-960w.webp 960w, http://localhost:8080/assets/images/53.3.AzureFunctionsUniversity_YouTube_Playlist-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/53.3.AzureFunctionsUniversity_YouTube_Playlist-1200w.webp&quot; width=&quot;1200&quot; height=&quot;774&quot; alt=&quot;Screenshot of the Azure Functions University playlist on YouTube&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;I believe that consistency is key when creating educational content. Therefore each lesson follows the same structure:&lt;/p&gt;&lt;ul class=&quot;list&quot;&gt;&lt;li&gt;there are several exercises written in markdown, including code snippets;&lt;/li&gt;&lt;li&gt;three types of call-outs are used: üìù tips , üîç observations and ‚ùì questions;&lt;/li&gt;&lt;li&gt;a complete Function App project is available as reference;&lt;/li&gt;&lt;li&gt;at the end of each lesson, there‚Äôs a homework assignment.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;All coding exercises use VSCode as the code editor because I find this is a more beginner-friendly environment than Visual Studio 2019.&lt;/p&gt;&lt;p&gt;Although we started creating content for .NET functions, we‚Äôre now also accepting contributions for other languages. We have some lessons in TypeScript and PowerShell as well now.&lt;/p&gt;&lt;h2 id=&quot;challenges&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/azure-functions-university/#challenges&quot; class=&quot;heading-anchor&quot;&gt;Challenges&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Creating quality content is hard, and it is very time-consuming. For the first couple of lessons, I created most of the content myself, which was hard to combine with a full-time job. Since more people are helping now, it gets easier, although reviewing the pull requests is a considerable effort. I want to ensure the tone of the lessons remains constant and that inclusive language is used. I now realize what it feels like to be a maintainer of a small open source project.&lt;/p&gt;&lt;p&gt;The frequency between the lessons varies between two to four weeks. Ideally, I‚Äôd like to have a livestream every other week. However, planning is tricky since schedules and priorities shift, not only mine but also the contributors. This is voluntary work we all do in our free time, and sometimes other things are more important, and that‚Äôs OK. Working on this project should be enjoyable, not stressful.&lt;/p&gt;&lt;p&gt;Keeping the lessons up-to-date is becoming a challenge right now. The current .NET content is targeted for .NET Core 3.1. Since Functions can now also be written in .NET 5, additional content needs to be created soon to reflect this. The .NET Core content will remain since .NET Core 3.1 has long-term support, and I expect the content will remain relevant for a while.&lt;/p&gt;&lt;p&gt;This brings us to another challenge, and that is the Azure Functions University GitHub repository. At the moment, there are eight lessons across three programming languages, .NET Core, TypeScript and PowerShell. Sub-folders are used for each language in order to keep everything tidy. VSCode workspaces are used for the specific lessons. Eventually, the source code needs to be split into separate repositories for each language/runtime. This will make the source code easier to manage, and VSCode will be less confused about which projects to run when the entire folder is opened.&lt;/p&gt;&lt;h2 id=&quot;whats-next&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/azure-functions-university/#whats-next&quot; class=&quot;heading-anchor&quot;&gt;What‚Äôs next?&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;There‚Äôs a lot of progress to be made. First, there is still a lot of new content to be written. Many topics have not been touched yet, e.g., security, monitoring, SignalR, EventGrid. There are also content translations to the other languages that Azure Functions supports. Some people did show interest in helping out with Python and TypeScript, but it‚Äôs still a long way to go until that‚Äôs on the same level as the .NET lessons.&lt;/p&gt;&lt;p&gt;Secondly, I want to have better insight into how many people are using the GitHub repo and how they experience it. I‚Äôll be looking into GitHub classroom to see if I can get a better grip on the usage of the lessons. I prefer to have as little friction as possible, because additional sign-up boundaries might prevent people from using the material.&lt;/p&gt;&lt;p&gt;Will this project ever be finished? Not any time soon, I think. The Azure Functions team recently presented their roadmap for the next major releases. I expect plenty of opportunities to create new lessons and help more people to use serverless technology.&lt;/p&gt;&lt;h2 id=&quot;help-us&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/azure-functions-university/#help-us&quot; class=&quot;heading-anchor&quot;&gt;Help us!&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;We‚Äôre always looking for contributors who can help create content and co-host a live stream! Contributions can be new lessons, additions to existing lessons, or ‚Äòtranslations‚Äô to other programming languages (TypeScript, Python, PowerShell, Java).&lt;/p&gt;&lt;p&gt;Please have a look at the existing issues to see if you can contribute to those. If there is nothing to your liking, you can submit a new issue. You don‚Äôt need to be an expert on the topic. We can work on the content together. There‚Äôs quite an extensive &lt;a href=&quot;https://github.com/marcduiker/azure-functions-university/blob/main/CONTRIBUTING.md&quot; rel=&quot;noopener&quot;&gt;contribution guide&lt;/a&gt;.&lt;/p&gt;&lt;h2 id=&quot;links&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/azure-functions-university/#links&quot; class=&quot;heading-anchor&quot;&gt;Links&lt;/a&gt;&lt;/h2&gt;&lt;ul class=&quot;list&quot;&gt;&lt;li&gt;YouTube playlist: &lt;a href=&quot;https://bit.ly/az-func-uni-playlist&quot; rel=&quot;noopener&quot;&gt;https://bit.ly/az-func-uni-playlist&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Azure Functions University GitHub repo: &lt;a href=&quot;http://bit.ly/az-func-uni&quot; rel=&quot;noopener&quot;&gt;http://bit.ly/az-func-uni&lt;/a&gt;&lt;/li&gt;&lt;li&gt;GitHub issue list: &lt;a href=&quot;http://bit.ly/az-func-uni-issues&quot; rel=&quot;noopener&quot;&gt;http://bit.ly/az-func-uni-issues&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
 			</content>
    </entry><entry>
      <title>Azure Functions University - HTTP Lesson (TypeScript)</title>
      <link href="http://localhost:8080/articles/azfuncuni-http-lesson-typescript/" />
      <updated>2021-04-15T00:00:00Z</updated>
      <id>http://localhost:8080/articles/azfuncuni-http-lesson-typescript/</id>
      <content type="html">
				&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/52.AzureFunctionsUniversity_HTTP_Lesson_typescript-440w.webp 440w, http://localhost:8080/assets/images/52.AzureFunctionsUniversity_HTTP_Lesson_typescript-650w.webp 650w, http://localhost:8080/assets/images/52.AzureFunctionsUniversity_HTTP_Lesson_typescript-960w.webp 960w, http://localhost:8080/assets/images/52.AzureFunctionsUniversity_HTTP_Lesson_typescript-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/52.AzureFunctionsUniversity_HTTP_Lesson_typescript-1200w.webp&quot; width=&quot;1200&quot; height=&quot;675&quot; alt=&quot;Http Lesson TypeScript&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;Hi serverless friends, we have a new Azure Functions University lesson for you! In this lesson we will learn how to use the HTTP trigger in Azure Functions written in TypeScript.&lt;/p&gt;&lt;h2 id=&quot;lesson&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/azfuncuni-http-lesson-typescript/#lesson&quot; class=&quot;heading-anchor&quot;&gt;Lesson&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;You can find the lesson on GitHub: &lt;a href=&quot;https://github.com/marcduiker/azure-functions-university/blob/main/lessons/typescript/http/README.md&quot; rel=&quot;noopener&quot;&gt;HTTP Trigger (TypeScript)&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;And you can watch the video on YouTube:&lt;/p&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/zYb5sVQgUN4&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;br&gt;The lesson consists of the following exercises:&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Nr&lt;/th&gt;&lt;th&gt;Exercise&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Prerequisites&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Creating a Function App&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Changing the template for GET requests&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;Changing the template for POST requests&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;Adding a new function for POST requests&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Homework&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 			</content>
    </entry><entry>
      <title>Azure Functions University - Configuration Lesson (.NET Core)</title>
      <link href="http://localhost:8080/articles/azfuncuni-configuration-lesson-dotnet/" />
      <updated>2021-03-28T00:00:00Z</updated>
      <id>http://localhost:8080/articles/azfuncuni-configuration-lesson-dotnet/</id>
      <content type="html">
				&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/51.AzureFunctionsUniversity_Configuration_Lesson_dotnetcore-440w.webp 440w, http://localhost:8080/assets/images/51.AzureFunctionsUniversity_Configuration_Lesson_dotnetcore-650w.webp 650w, http://localhost:8080/assets/images/51.AzureFunctionsUniversity_Configuration_Lesson_dotnetcore-960w.webp 960w, http://localhost:8080/assets/images/51.AzureFunctionsUniversity_Configuration_Lesson_dotnetcore-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/51.AzureFunctionsUniversity_Configuration_Lesson_dotnetcore-1200w.webp&quot; width=&quot;1200&quot; height=&quot;675&quot; alt=&quot;Configuration Lesson .NET Core&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;Hi serverless friends, we have a new Azure Functions University lesson for you! In this lesson we will learn how to use Configuration &amp;amp; Settings in Azure Functions written in .NET Core 3.1.&lt;/p&gt;&lt;h2 id=&quot;lesson&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/azfuncuni-configuration-lesson-dotnet/#lesson&quot; class=&quot;heading-anchor&quot;&gt;Lesson&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;You can find the lesson on GitHub: &lt;a href=&quot;https://github.com/marcduiker/azure-functions-university/blob/main/lessons/dotnetcore31/configuration/README.md&quot; rel=&quot;noopener&quot;&gt;Configuration &amp;amp; Settings (.NET Core)&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;And you can watch the video on YouTube:&lt;/p&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/p8FVnMSYMpA&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;br&gt;The lesson consists of the following exercises:&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Nr&lt;/th&gt;&lt;th&gt;Exercise&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Prerequisites&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Why do we use configuration?&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Function App application settings&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;Using custom application settings&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;Manage app settings using Azure CLI&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Using App Configuration Service&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;6&lt;/td&gt;&lt;td&gt;Homework&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 			</content>
    </entry><entry>
      <title>Azure Functions University - Durable Functions Introduction &amp; Chaining (TypeScript)</title>
      <link href="http://localhost:8080/articles/azfuncuni-durablefunctions-lesson-typescript/" />
      <updated>2021-02-14T00:00:00Z</updated>
      <id>http://localhost:8080/articles/azfuncuni-durablefunctions-lesson-typescript/</id>
      <content type="html">
				&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/50.AzureFunctionsUniversity_DurableFunctions_Lesson1_typescript-440w.webp 440w, http://localhost:8080/assets/images/50.AzureFunctionsUniversity_DurableFunctions_Lesson1_typescript-650w.webp 650w, http://localhost:8080/assets/images/50.AzureFunctionsUniversity_DurableFunctions_Lesson1_typescript-960w.webp 960w, http://localhost:8080/assets/images/50.AzureFunctionsUniversity_DurableFunctions_Lesson1_typescript-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/50.AzureFunctionsUniversity_DurableFunctions_Lesson1_typescript-1200w.webp&quot; width=&quot;1200&quot; height=&quot;675&quot; alt=&quot;Durable Functions Lesson 1 TypeScript&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;Hi serverless friends, we have a new Azure Functions University lesson for you! In this lesson we will learn how to use Durable Functions in Azure Functions written in TypeScript.&lt;/p&gt;&lt;h2 id=&quot;lesson&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/azfuncuni-durablefunctions-lesson-typescript/#lesson&quot; class=&quot;heading-anchor&quot;&gt;Lesson&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;You can find the lesson on GitHub: &lt;a href=&quot;https://github.com/marcduiker/azure-functions-university/tree/main/lessons/typescript/durable-functions/chaining/README.md&quot; rel=&quot;noopener&quot;&gt;Durable Functions - Introduction &amp;amp; Chaining (TypeScript)&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;And you can watch the video on YouTube:&lt;/p&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/gE130BITP9g&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;br&gt;The lesson consists of the following exercises:&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Nr&lt;/th&gt;&lt;th&gt;Exercise&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Prerequisites&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Introduction to Azure Durable Functions&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Creating a Function App project for a Durable Function&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;Implementing a ‚ÄúReal-World‚Äù Scenario&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;Retries - Dealing with Temporal Errors&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Circuit Breaker - Dealing with Timeouts&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;6&lt;/td&gt;&lt;td&gt;Homework&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 			</content>
    </entry><entry>
      <title>Azure Functions University - CosmosDB Lesson (.NET Core)</title>
      <link href="http://localhost:8080/articles/azfuncuni-cosmosdb-lesson-dotnet/" />
      <updated>2021-02-07T00:00:00Z</updated>
      <id>http://localhost:8080/articles/azfuncuni-cosmosdb-lesson-dotnet/</id>
      <content type="html">
				&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/49.AzureFunctionsUniversity_CosmosDB_Lesson_dotnetcore-440w.webp 440w, http://localhost:8080/assets/images/49.AzureFunctionsUniversity_CosmosDB_Lesson_dotnetcore-650w.webp 650w, http://localhost:8080/assets/images/49.AzureFunctionsUniversity_CosmosDB_Lesson_dotnetcore-960w.webp 960w, http://localhost:8080/assets/images/49.AzureFunctionsUniversity_CosmosDB_Lesson_dotnetcore-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/49.AzureFunctionsUniversity_CosmosDB_Lesson_dotnetcore-1200w.webp&quot; width=&quot;1200&quot; height=&quot;675&quot; alt=&quot;CosmosDB Lesson .NET Cor&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;Hi serverless friends, we have a new Azure Functions University lesson for you! In this lesson we will learn how to use the CosmosDB trigger &amp;amp; bindings in Azure Functions written in .NET Core 3.1.&lt;/p&gt;&lt;h2 id=&quot;lesson&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/azfuncuni-cosmosdb-lesson-dotnet/#lesson&quot; class=&quot;heading-anchor&quot;&gt;Lesson&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;You can find the lesson on GitHub: &lt;a href=&quot;https://github.com/marcduiker/azure-functions-university/blob/main/lessons/dotnetcore31/cosmosdb/README.md&quot; rel=&quot;noopener&quot;&gt;CosmosDB Trigger &amp;amp; Bindings (.NET Core)&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;And you can watch the video on YouTube:&lt;/p&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/h_vX3LrQ4l4&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;br&gt;The lesson consists of the following exercises:&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Nr&lt;/th&gt;&lt;th&gt;Exercise&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Prerequisites&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Setup the Azure Cosmos DB Emulator&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Using the Cosmos DB output binding&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;Using the Cosmos DB input binding&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;Creating a Cosmos DB Trigger function&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Deploying to Azure&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;6&lt;/td&gt;&lt;td&gt;Using Azure Key Vault for storing the connection string&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;7&lt;/td&gt;&lt;td&gt;Using Dependency Injection pattern for Cosmos DB connection&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;8&lt;/td&gt;&lt;td&gt;Homework&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 			</content>
    </entry><entry>
      <title>Azure Functions University - Table Lesson (.NET Core)</title>
      <link href="http://localhost:8080/articles/azfuncuni-table-lesson-dotnet/" />
      <updated>2021-01-17T00:00:00Z</updated>
      <id>http://localhost:8080/articles/azfuncuni-table-lesson-dotnet/</id>
      <content type="html">
				&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/48.AzureFunctionsUniversity_Table_Lesson_dotnetcore-440w.webp 440w, http://localhost:8080/assets/images/48.AzureFunctionsUniversity_Table_Lesson_dotnetcore-650w.webp 650w, http://localhost:8080/assets/images/48.AzureFunctionsUniversity_Table_Lesson_dotnetcore-960w.webp 960w, http://localhost:8080/assets/images/48.AzureFunctionsUniversity_Table_Lesson_dotnetcore-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/48.AzureFunctionsUniversity_Table_Lesson_dotnetcore-1200w.webp&quot; width=&quot;1200&quot; height=&quot;675&quot; alt=&quot;Table Lesson .NET Core&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;Hi serverless friends, we have a new Azure Functions University lesson for you! In this lesson we will learn how to use the Table bindings in Azure Functions written in .NET Core 3.1.&lt;/p&gt;&lt;h2 id=&quot;lesson&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/azfuncuni-table-lesson-dotnet/#lesson&quot; class=&quot;heading-anchor&quot;&gt;Lesson&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;You can find the lesson on GitHub: &lt;a href=&quot;https://github.com/marcduiker/azure-functions-university/blob/main/lessons/dotnetcore31/table/README.md&quot; rel=&quot;noopener&quot;&gt;Table Bindings (.NET Core)&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;And you can watch the video on YouTube:&lt;/p&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/xiNkCsupUTs&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;br&gt;The lesson consists of the following exercises:&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Nr&lt;/th&gt;&lt;th&gt;Exercise&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Prerequisites&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Using the Microsoft Azure Storage Explorer for Tables&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Using &lt;code&gt;TableEntity&lt;/code&gt; output bindings&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;Using &lt;code&gt;IAsyncCollector&amp;lt;T&amp;gt;&lt;/code&gt; Table output bindings&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;Using &lt;code&gt;TableEntity&lt;/code&gt; input bindings&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Using &lt;code&gt;CloudTable&lt;/code&gt; input bindings&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;6&lt;/td&gt;&lt;td&gt;Homework&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 			</content>
    </entry><entry>
      <title>Azure Functions University - Deployment Lesson (.NET Core)</title>
      <link href="http://localhost:8080/articles/azfuncuni-deployment-lesson-dotnet/" />
      <updated>2020-12-20T00:00:00Z</updated>
      <id>http://localhost:8080/articles/azfuncuni-deployment-lesson-dotnet/</id>
      <content type="html">
				&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/47.AzureFunctionsUniversity_Deployment_Lesson_dotnetcore-440w.webp 440w, http://localhost:8080/assets/images/47.AzureFunctionsUniversity_Deployment_Lesson_dotnetcore-650w.webp 650w, http://localhost:8080/assets/images/47.AzureFunctionsUniversity_Deployment_Lesson_dotnetcore-960w.webp 960w, http://localhost:8080/assets/images/47.AzureFunctionsUniversity_Deployment_Lesson_dotnetcore-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/47.AzureFunctionsUniversity_Deployment_Lesson_dotnetcore-1200w.webp&quot; width=&quot;1200&quot; height=&quot;675&quot; alt=&quot;Deployment Lesson .NET Core&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;Hi serverless friends, we have a new Azure Functions University lesson for you! In this lesson we will learn how to deploy Azure Functions written in .NET Core 3.1.&lt;/p&gt;&lt;h2 id=&quot;lesson&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/azfuncuni-deployment-lesson-dotnet/#lesson&quot; class=&quot;heading-anchor&quot;&gt;Lesson&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;You can find the lesson on GitHub: &lt;a href=&quot;https://github.com/marcduiker/azure-functions-university/blob/main/lessons/dotnetcore31/deployment/README.md&quot; rel=&quot;noopener&quot;&gt;Deployment to Azure (.NET Core)&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;And you can watch the video on YouTube:&lt;/p&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/-B8dE4GTWsk&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;p&gt;The lesson consists of the following exercises:&lt;/p&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Nr&lt;/th&gt;&lt;th&gt;Exercise&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Prerequisites&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Understanding the Azure Resources&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Deployment using VSCode&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;Creating Azure Resources using Azure CLI&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;Deployment using Azure Functions CLI&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Deployment using GitHub Actions&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;6&lt;/td&gt;&lt;td&gt;Homework&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 			</content>
    </entry><entry>
      <title>Azure Functions University - Queue Lesson (.NET Core)</title>
      <link href="http://localhost:8080/articles/azfuncuni-queue-lesson-dotnet/" />
      <updated>2020-11-27T00:00:00Z</updated>
      <id>http://localhost:8080/articles/azfuncuni-queue-lesson-dotnet/</id>
      <content type="html">
				&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/46.AzureFunctionsUniversity_Queue_Lesson_dotnetcore-440w.webp 440w, http://localhost:8080/assets/images/46.AzureFunctionsUniversity_Queue_Lesson_dotnetcore-650w.webp 650w, http://localhost:8080/assets/images/46.AzureFunctionsUniversity_Queue_Lesson_dotnetcore-960w.webp 960w, http://localhost:8080/assets/images/46.AzureFunctionsUniversity_Queue_Lesson_dotnetcore-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/46.AzureFunctionsUniversity_Queue_Lesson_dotnetcore-1200w.webp&quot; width=&quot;1200&quot; height=&quot;675&quot; alt=&quot;Queue Lesson .NET Core&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;Hi serverless friends, we have a new Azure Functions University lesson for you! In this lesson we will learn how to use the Queue trigger and bindings in Azure Functions written in .NET Core 3.1.&lt;/p&gt;&lt;h2 id=&quot;lesson&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/azfuncuni-queue-lesson-dotnet/#lesson&quot; class=&quot;heading-anchor&quot;&gt;Lesson&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;You can find the lesson on GitHub: &lt;a href=&quot;https://github.com/marcduiker/azure-functions-university/blob/main/lessons/dotnetcore31/queue/README.md&quot; rel=&quot;noopener&quot;&gt;Queue Trigger &amp;amp; Bindings (.NET Core)&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;And you can watch the video on YouTube:&lt;/p&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/nKJUwW6SGZo&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;p&gt;The lesson consists of the following exercises:&lt;/p&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Nr&lt;/th&gt;&lt;th&gt;Exercise&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Using the Microsoft Azure Storage Explorer for Queues&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Using &lt;code&gt;string&lt;/code&gt; Queue output bindings&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;Using custom typed Queue output bindings&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;Using &lt;code&gt;CloudQueueMessage&lt;/code&gt; Queue output bindings&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Using &lt;code&gt;dynamic&lt;/code&gt; Queue output bindings&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;6&lt;/td&gt;&lt;td&gt;Using &lt;code&gt;IAsyncCollector&amp;lt;T&amp;gt;&lt;/code&gt; Queue output bindings&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;7.1&lt;/td&gt;&lt;td&gt;Creating a default Queue triggered function&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;7.2&lt;/td&gt;&lt;td&gt;Examine &amp;amp; Run the Queue triggered function&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;7.3&lt;/td&gt;&lt;td&gt;Break the Queue triggered function&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;7.4&lt;/td&gt;&lt;td&gt;Change the Queue triggered function&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;8&lt;/td&gt;&lt;td&gt;Homework&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 			</content>
    </entry><entry>
      <title>How I Got Started With Creative Coding</title>
      <link href="http://localhost:8080/articles/creative-coding/" />
      <updated>2020-11-23T00:00:00Z</updated>
      <id>http://localhost:8080/articles/creative-coding/</id>
      <content type="html">
				&lt;p&gt;This article is part of &lt;a href=&quot;https://festivetechcalendar.com/&quot; rel=&quot;noopener&quot;&gt;Festive Tech Calendar 2020&lt;/a&gt;. An online event organized by the tech community with content created by many kind individuals around the world.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;I really enjoy coding. It think it‚Äôs because coding allows me to create something from nothing. That ‚Äòsomething‚Äô could be a useful feature for a client I work for, but it can also be something for me alone to enjoy. Sometimes the result of what I code doesn‚Äôt even do anything useful. It might something that I like looking at or listening to. That sort of coding is also known as creative coding.&lt;br&gt;Here‚Äôs the Wikipedia definition:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Creative coding is a type of computer programming in which the goal is to create something expressive instead of functional. It is used to create live visuals for VJing, as well as creating visual art and design, entertainment, art installations, projections and projection mapping, sound art, advertising, product prototypes, and much more.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Source: &lt;a href=&quot;https://en.wikipedia.org/wiki/Creative_coding&quot; rel=&quot;noopener&quot;&gt;Wikipedia&lt;/a&gt;&lt;/p&gt;&lt;p&gt;For me, creative coding means creating something enjoyable for myself and, hopefully, also for others. Creative coding can be a myriad of things, allowing you to express yourself in many different ways. I‚Äôd like to share my experience with you, and I hope you‚Äôll be inspired to try some creative coding yourself!&lt;/p&gt;&lt;h2 id=&quot;games-and-graphics&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/creative-coding/#games-and-graphics&quot; class=&quot;heading-anchor&quot;&gt;Games &amp;amp; Graphics&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;My fascination with creative coding started with computer graphics. This started in my early teenage years while playing &lt;a href=&quot;https://en.wikipedia.org/wiki/Prince_of_Persia_(1989_video_game)&quot; rel=&quot;noopener&quot;&gt;Prince of Persia&lt;/a&gt;. The fascination grew over time when I began to create graphics myself. I created 3D landscapes with Bryce, fractal flames using &lt;a href=&quot;https://en.wikipedia.org/wiki/Apophysis_(software)&quot; rel=&quot;noopener&quot;&gt;Apophisis&lt;/a&gt;, and other recursive structures using &lt;a href=&quot;https://en.wikipedia.org/wiki/L-system&quot; rel=&quot;noopener&quot;&gt;L-system&lt;/a&gt; generators. I‚Äôm still intrigued by how well recursive rules can describe nature. Look at these computer-generated fractal weeds üòç:&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/45.1.Fractal_weeds-440w.webp 440w, http://localhost:8080/assets/images/45.1.Fractal_weeds-650w.webp 650w, http://localhost:8080/assets/images/45.1.Fractal_weeds-960w.webp 960w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/45.1.Fractal_weeds-960w.webp&quot; width=&quot;960&quot; height=&quot;562&quot; alt=&quot;Fractal Weeds&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;h2 id=&quot;photography&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/creative-coding/#photography&quot; class=&quot;heading-anchor&quot;&gt;Photography&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;For a couple of years, my attention turned to photography and photo editing. I especially enjoyed urban exploration photography, visiting abandoned locations, and capturing the beauty of buildings and interiors in decay. The atmosphere of these locations is breathtaking.&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/45.2.salve_mater_urbex-440w.webp 440w, http://localhost:8080/assets/images/45.2.salve_mater_urbex-650w.webp 650w, http://localhost:8080/assets/images/45.2.salve_mater_urbex-960w.webp 960w, http://localhost:8080/assets/images/45.2.salve_mater_urbex-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/45.2.salve_mater_urbex-1200w.webp&quot; width=&quot;1200&quot; height=&quot;800&quot; alt=&quot;Indoor shot of a decayed building&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;Decayed interioir of a former sanatorium.&lt;/em&gt;&lt;/p&gt;&lt;p&gt;For about two years, I gave photography workshops at the local community college. This experience really helped me to speak in public with more confidence.&lt;/p&gt;&lt;h2 id=&quot;visual-arts&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/creative-coding/#visual-arts&quot; class=&quot;heading-anchor&quot;&gt;Visual arts&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;When I learned to code, during my first job, my interest in creating computer graphics spiked again. I discovered &lt;a href=&quot;https://processing.org/&quot; rel=&quot;noopener&quot;&gt;Processing&lt;/a&gt;, a software sketchbook. I created many sketches while watching tutorials from Daniel Schiffman (&lt;a href=&quot;https://www.youtube.com/user/shiffman/&quot; rel=&quot;noopener&quot;&gt;The Coding Train&lt;/a&gt;). He has a gift for explaining topics on software engineering, maths, and graphics in a very accessible way.&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/45.3.the_coding_train-440w.webp 440w, http://localhost:8080/assets/images/45.3.the_coding_train-650w.webp 650w, http://localhost:8080/assets/images/45.3.the_coding_train-960w.webp 960w, http://localhost:8080/assets/images/45.3.the_coding_train-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/45.3.the_coding_train-1200w.webp&quot; width=&quot;1200&quot; height=&quot;556&quot; alt=&quot;The Coding Train on YouTube&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;I really recommend &lt;a href=&quot;https://www.youtube.com/playlist?list=PLRqwX-V7Uu6aFlwukCmDf0-1-uSR7mklK&quot; rel=&quot;noopener&quot;&gt;The Nature of Code playlist&lt;/a&gt;, which features 83 videos ranging from Perlin noise, my favorite type of noise, to fractals and genetic algorithms.&lt;/p&gt;&lt;iframe width=&quot;600&quot; height=&quot;600&quot; src=&quot;https://editor.p5js.org/marcduiker/embed/LMF39YZcR&quot;&gt;&lt;/iframe&gt;&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://editor.p5js.org/marcduiker/sketches/LMF39YZcR&quot; rel=&quot;noopener&quot;&gt;Noise worms&lt;/a&gt;: move your mouse (or tap) over the image to change the noise pattern.&lt;/em&gt;&lt;/p&gt;&lt;h2 id=&quot;retro-game-development&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/creative-coding/#retro-game-development&quot; class=&quot;heading-anchor&quot;&gt;Retro game development&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I excel in starting new projects and never finishing them üòÖ. Sometimes I don‚Äôt even start them at all üò¨. About one and a half years ago, I read about retro game development using &lt;a href=&quot;https://www.lexaloffle.com/pico-8.php&quot; rel=&quot;noopener&quot;&gt;PICO-8&lt;/a&gt;. I bought the software with the intent to create some cool games, but I didn‚Äôt touch the software for a couple of months. Then, I read about PICO-8 again, this time in a &lt;a href=&quot;https://magpi.raspberrypi.org/articles/build-retro-game-pico-8-raspberry-pi&quot; rel=&quot;noopener&quot;&gt;MagPi magazine&lt;/a&gt;. At about the same time, Scott Hanselman invited Joseph White, the creator of PICO-8, on one of his &lt;a href=&quot;https://hanselminutes.com/703/tiny-games-with-the-pico-8-fantasy-console-and-joseph-white&quot; rel=&quot;noopener&quot;&gt;podcasts&lt;/a&gt;. This clearly was a sign I had to pick up PICO-8 and create a game with it. Since I am a big fan of Azure Functions, I created a game in which you play the Azure Functions logo and need to collect items to restore the power of an Azure data center.&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/45.4.azure_functions_the_game-256w.webp 256w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/45.4.azure_functions_the_game-256w.webp&quot; width=&quot;256&quot; height=&quot;256&quot; alt=&quot;Animated gif of Azure Functions, The Game&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://marcduiker.itch.io/azure-functions-the-game&quot; rel=&quot;noopener&quot;&gt;Azure Functions, The Game&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;&lt;p&gt;Creating this puzzle game took some effort, I spent many evenings and nights over a couple of weeks, but the process was so much fun! PICO-8 is a very restricted environment to create games in, the screen is only 128x128 pixels, sprites are 8x8 pixels, and there‚Äôs even a restriction on the amount of code you can write. Once it was finished, I was thrilled the game was well received in the community, the Azure Functions team and others within Microsoft üòä.&lt;/p&gt;&lt;p&gt;My next game, YuckyYAML, is still in progress. It is a puzzle game, inspired by Sokoban, and is themed around Docker &amp;amp; Kubernetes, so it features whales and containers.&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/45.5.yucky_yaml_3-256w.webp 256w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/45.5.yucky_yaml_3-256w.webp&quot; width=&quot;256&quot; height=&quot;256&quot; alt=&quot;Animated gif of the Yucky YAML game (work in progress)&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;PICO-8 is also an excellent platform to create mini-games. These are very basic games you can play in a minute or so. I created two interactive cards for a lovely 5-year-old, one for his birthday, where he needs to collect all the balloons. And another one for Easter, where he needs to collect eggs. These mini-games are around 100 lines of code and take only an hour or two to create.&lt;/p&gt;&lt;p&gt;You can play the above mentioned games at &lt;a href=&quot;https://marcduiker.itch.io/&quot; rel=&quot;noopener&quot;&gt;marcduiker.itch.io&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;If you want to learn about game development with PICO-8, I highly recommend &lt;a href=&quot;https://www.youtube.com/playlist?list=PLea8cjCua_P0qjjiG8G5FBgqwpqMU7rBk&quot; rel=&quot;noopener&quot;&gt;this YouTube playlist&lt;/a&gt; which contains over 70 videos on how to create a breakout game from start to finish.&lt;/p&gt;&lt;h2 id=&quot;ms-build&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/creative-coding/#ms-build&quot; class=&quot;heading-anchor&quot;&gt;MS Build&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I was very fortunate to be part of MS Build this year. First, I took part in a panel discussion on Serverless APIs, and second, I talked about one of my pet projects, the &lt;a href=&quot;https://twitter.com/az_func_updates&quot; rel=&quot;noopener&quot;&gt;Azure Functions Updates Twitterbot&lt;/a&gt;.&lt;/p&gt;&lt;h3 id=&quot;8-bit-avatars&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/creative-coding/#8-bit-avatars&quot; class=&quot;heading-anchor&quot;&gt;8-bit avatars&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;After my talks, I wanted to show appreciation to the hosts since I know it‚Äôs a lot of effort to keep an event rolling smoothly. So I started creating 8-bit pixel portraits for the hosts. I used a 16x16 pixel format, which is really limited, so it was a challenge drawing everyone in a way they were still recognizable. I posted them on Twitter, and the responses I got were so kind. I kept making the portraits until I had one for each of the hosts. At the end of Build, the hosts gave me a shout-out for my work, which made me very proud. It was a wonderful experience to contribute to Build in this way üòä.&lt;/p&gt;&lt;h3 id=&quot;make-code&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/creative-coding/#make-code&quot; class=&quot;heading-anchor&quot;&gt;Make Code&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;One of the last sessions of MS Build was about MakeCode, an educational programming platform backed by various organizations. During &lt;a href=&quot;https://mybuild.microsoft.com/sessions/a1638103-16a8-4059-90ac-54c7e0dda8a2?source=sessions&quot; rel=&quot;noopener&quot;&gt;this session&lt;/a&gt;, Louanne Murphy and Scott Hanselman showed how versatile and accessible the platform is. One of the areas where you can use MakeCode is creating &lt;a href=&quot;https://arcade.makecode.com/&quot; rel=&quot;noopener&quot;&gt;arcade games&lt;/a&gt;, so obviously, I had to try that. In about 1.5 hours, I completed this mini-game featuring Dona and Seth, competing to eat as many Cheeze-Its within 30 seconds.The game is far from perfect, but the process of making this was a lot of fun!&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/45.7.Cheeze-it_Deth_Match-440w.webp 440w, http://localhost:8080/assets/images/45.7.Cheeze-it_Deth_Match-600w.webp 600w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/45.7.Cheeze-it_Deth_Match-600w.webp&quot; width=&quot;600&quot; height=&quot;702&quot; alt=&quot;Screenshot of Cheeze-It Deth Match, a minigame made with MakeCode&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://arcade.makecode.com/30800-46845-98441-86480&quot; rel=&quot;noopener&quot;&gt;Cheeze-It Deth Match&lt;/a&gt; on MakeCode.&lt;/em&gt;&lt;/p&gt;&lt;h2 id=&quot;post-build&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/creative-coding/#post-build&quot; class=&quot;heading-anchor&quot;&gt;Post Build&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I was really starting to like the 8-bit avatars, so I kept on making some for close (Twitter) friends. Others began to notice the avatars, and the demand kept increasing. Since I‚Äôm saving for a Surface Go 2, I decided to ask for a small donation when people ask me to create their avatar. So far, I‚Äôve created 120 of these avatars, and I‚Äôm still receiving commissions.&lt;br&gt;Since the avatars I created for Build, I‚Äôve doubled the resolution, I‚Äôm now using 32x32 pixels, which is still very limited but allows a bit more detail in hair and clothes. I‚Äôm using a limited 32 color palette, which ensures all portraits have the same look &amp;amp; feel.&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/45.8.avatars_collage_107frames-440w.webp 440w, http://localhost:8080/assets/images/45.8.avatars_collage_107frames-640w.webp 640w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/45.8.avatars_collage_107frames-640w.webp&quot; width=&quot;640&quot; height=&quot;640&quot; alt=&quot;Animation of various avatars I&#39;ve made&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;h2 id=&quot;whats-next&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/creative-coding/#whats-next&quot; class=&quot;heading-anchor&quot;&gt;What‚Äôs next&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Creative coding has really become a part of my life. It is ever-changing, sometimes it‚Äôs visuals, sometimes music, sometimes games. As long as I can keep creating something that I (and others) like, it gives me a very satisfying feeling, and I will continue doing this for a long time.&lt;/p&gt;&lt;p&gt;I encourage you to ty creative coding yourself! It doesn‚Äôt matter if you are a programming veteran or a novice, you can start very small and build up your skills over time and try different tools and languages. I‚Äôm very curious about your creations! Please share them with me on Twitter &lt;a href=&quot;https://twitter.com/marcduiker&quot; rel=&quot;noopener&quot;&gt;@marcduiker&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;If you want to support my creative coding work, please consider a &lt;a href=&quot;https://ko-fi.com/marcduiker&quot; rel=&quot;noopener&quot;&gt;donating a coffee&lt;/a&gt; or commission me to create your personalized 8-bit avatar üòä, I draw them entirely by hand.&lt;/p&gt;
 			</content>
    </entry><entry>
      <title>Azure Functions University - Blob Lesson (.NET Core)</title>
      <link href="http://localhost:8080/articles/azfuncuni-blob-lesson-dotnet/" />
      <updated>2020-11-11T00:00:00Z</updated>
      <id>http://localhost:8080/articles/azfuncuni-blob-lesson-dotnet/</id>
      <content type="html">
				&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/44.AzureFunctionsUniversity_Blob_Lesson_dotnetcore-440w.webp 440w, http://localhost:8080/assets/images/44.AzureFunctionsUniversity_Blob_Lesson_dotnetcore-650w.webp 650w, http://localhost:8080/assets/images/44.AzureFunctionsUniversity_Blob_Lesson_dotnetcore-960w.webp 960w, http://localhost:8080/assets/images/44.AzureFunctionsUniversity_Blob_Lesson_dotnetcore-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/44.AzureFunctionsUniversity_Blob_Lesson_dotnetcore-1200w.webp&quot; width=&quot;1200&quot; height=&quot;675&quot; alt=&quot;Blob Lesson .NET Core&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;Hi serverless friends, we have a new Azure Functions University lesson for you! In this lesson we will learn how to use the Blob trigger and bindings in Azure Functions written in .NET Core 3.1.&lt;/p&gt;&lt;h2 id=&quot;lesson&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/azfuncuni-blob-lesson-dotnet/#lesson&quot; class=&quot;heading-anchor&quot;&gt;Lesson&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;You can find the lesson on GitHub: &lt;a href=&quot;https://github.com/marcduiker/azure-functions-university/blob/main/lessons/dotnetcore31/blob/README.md&quot; rel=&quot;noopener&quot;&gt;Blob Trigger &amp;amp; Bindings (.NET Core)&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;And you can watch the video on YouTube:&lt;/p&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/z5AQdk-43ZI&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;p&gt;The lesson consists of the following exercises:&lt;/p&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Nr&lt;/th&gt;&lt;th&gt;Exercise&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Using the Microsoft Azure Storage Explorer and Storage Emulator&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Using &lt;code&gt;string&lt;/code&gt; Blob output bindings&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;Using &lt;code&gt;CloudBlobContainer&lt;/code&gt; Blob output bindings&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;Using &lt;code&gt;dynamic&lt;/code&gt; Blob output bindings&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Using &lt;code&gt;Stream&lt;/code&gt; Blob input bindings&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;6&lt;/td&gt;&lt;td&gt;Using &lt;code&gt;CloudBlobContainer&lt;/code&gt; Blob input bindings&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;7&lt;/td&gt;&lt;td&gt;Using &lt;code&gt;dynamic&lt;/code&gt; Blob input bindings&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;8&lt;/td&gt;&lt;td&gt;Creating a Blob triggered function&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;9&lt;/td&gt;&lt;td&gt;Homework&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 			</content>
    </entry><entry>
      <title>Azure Functions University - HTTP Lesson (.NET Core)</title>
      <link href="http://localhost:8080/articles/azfuncuni-http-lesson-dotnet/" />
      <updated>2020-10-28T00:00:00Z</updated>
      <id>http://localhost:8080/articles/azfuncuni-http-lesson-dotnet/</id>
      <content type="html">
				&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/43.AzureFunctionsUniversity_HTTP_Lesson_dotnetcore-440w.webp 440w, http://localhost:8080/assets/images/43.AzureFunctionsUniversity_HTTP_Lesson_dotnetcore-650w.webp 650w, http://localhost:8080/assets/images/43.AzureFunctionsUniversity_HTTP_Lesson_dotnetcore-960w.webp 960w, http://localhost:8080/assets/images/43.AzureFunctionsUniversity_HTTP_Lesson_dotnetcore-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/43.AzureFunctionsUniversity_HTTP_Lesson_dotnetcore-1200w.webp&quot; width=&quot;1200&quot; height=&quot;675&quot; alt=&quot;Http Lesson .NET Core&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;Hi serverless friends, we have a new Azure Functions University lesson for you! In this lesson we will learn how to use the HTTP trigger in Azure Functions written in .NET Core 3.1.&lt;/p&gt;&lt;h2 id=&quot;lesson&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/azfuncuni-http-lesson-dotnet/#lesson&quot; class=&quot;heading-anchor&quot;&gt;Lesson&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;You can find the lesson on GitHub: &lt;a href=&quot;https://github.com/marcduiker/azure-functions-university/blob/main/lessons/dotnetcore31/http/README.md&quot; rel=&quot;noopener&quot;&gt;HTTP Trigger (.NET Core)&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;And you can watch the video on YouTube:&lt;/p&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/5k35dlBAXxA&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;p&gt;The lesson consists of the following exercises:&lt;/p&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Nr&lt;/th&gt;&lt;th&gt;Exercise&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;Prerequisites&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Creating a Function App&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Changing the template for GET requests&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;Changing the template for POST requests&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;Adding a new function for POST requests&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Change the route for a custom greeting&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;6&lt;/td&gt;&lt;td&gt;Homework&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
 			</content>
    </entry><entry>
      <title>Durable Functions API - Writing Safe Orchestrations</title>
      <link href="http://localhost:8080/articles/writing-safe-orchestrations/" />
      <updated>2020-09-16T00:00:00Z</updated>
      <id>http://localhost:8080/articles/writing-safe-orchestrations/</id>
      <content type="html">
				&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/42.safe-orchestrations-cover-440w.webp 440w, http://localhost:8080/assets/images/42.safe-orchestrations-cover-650w.webp 650w, http://localhost:8080/assets/images/42.safe-orchestrations-cover-960w.webp 960w, http://localhost:8080/assets/images/42.safe-orchestrations-cover-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/42.safe-orchestrations-cover-1200w.webp&quot; width=&quot;1200&quot; height=&quot;674&quot; alt=&quot;Slide showing Writing Safe Orchestrations&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;This article is part of &lt;a href=&quot;https://aka.ms/ServerlessSeptember2020&quot; rel=&quot;noopener&quot;&gt;#ServerlessSeptember&lt;/a&gt;. You‚Äôll find other helpful articles, detailed tutorials, and videos in this all-things-Serverless content collection. New articles from community members and cloud advocates are published every week from Monday to Thursday through September.&lt;/p&gt;&lt;p&gt;Find out more about how Microsoft Azure enables your Serverless functions at &lt;a href=&quot;https://docs.microsoft.com/azure/azure-functions/?WT.mc_id=servsept20-devto-cxaall&quot; rel=&quot;noopener&quot;&gt;https://docs.microsoft.com/azure/azure-functions/&lt;/a&gt;.&lt;/p&gt;&lt;h2 id=&quot;writing-safe-orchestrations&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/writing-safe-orchestrations/#writing-safe-orchestrations&quot; class=&quot;heading-anchor&quot;&gt;Writing Safe Orchestrations&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;This post is the fifth part of a series of blogs/vlogs to discover the Durable Functions API.&lt;/p&gt;&lt;p&gt;In the video linked below, I‚Äôm diving into the &lt;a href=&quot;https://github.com/Azure/azure-functions-durable-extension/releases/tag/Analyzer-v0.3.0&quot; rel=&quot;noopener&quot;&gt;Durable Task Analyzer&lt;/a&gt;, which is bundled with the Durable Functions extension. This C# Roslyn analyzer helps you to write deterministic code for your orchestrators, so it‚Äôs safe to be replayed. The analyzer detects code violations which are described on &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/azure-functions/durable/durable-functions-code-constraints&quot; rel=&quot;noopener&quot;&gt;this docs page&lt;/a&gt;.&lt;/p&gt;&lt;h3 id=&quot;video&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/writing-safe-orchestrations/#video&quot; class=&quot;heading-anchor&quot;&gt;Video&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Here‚Äôs the video, please give it a thumbs up if you like it and please subscribe to my channel if you haven‚Äôt done so already:&lt;/p&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/ZtIQgR25_Y0&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;h3 id=&quot;resources&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/writing-safe-orchestrations/#resources&quot; class=&quot;heading-anchor&quot;&gt;Resources&lt;/a&gt;&lt;/h3&gt;&lt;ul class=&quot;list&quot;&gt;&lt;li&gt;GitHub repo with demo solution containing the code violations &amp;amp; workarounds: &lt;a href=&quot;https://github.com/marcduiker/demos-durable-task-analyzer&quot; rel=&quot;noopener&quot;&gt;github.com/marcduiker/demos-durable-task-analyzer&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;GitHub repo with Durable Functions code snippets: &lt;a href=&quot;https://github.com/marcduiker/durable-functions-snippets&quot; rel=&quot;noopener&quot;&gt;github.com/marcduiker/durable-functions-snippets&lt;/a&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&quot;links-to-other-posts-in-this-series&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/writing-safe-orchestrations/#links-to-other-posts-in-this-series&quot; class=&quot;heading-anchor&quot;&gt;Links to other posts in this series&lt;/a&gt;&lt;/h3&gt;&lt;ul class=&quot;list&quot;&gt;&lt;li&gt;&lt;a href=&quot;http://localhost:8080/articles/durable-functions-api-durableorchestrationclient-1&quot;&gt;Starting Orchestrations (DurableOrchestrationClient Part 1)&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://localhost:8080/articles/durable-functions-api-durableorchestrationclient-2&quot;&gt;Retrieving the Orchestration Status (DurableOrchestrationClient Part 2)&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://localhost:8080/articles/durable-functions-api-purge-terminate&quot;&gt;Purge &amp;amp; Terminate Orchestrations (DurableOrchestrationClient Part 3)&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://localhost:8080/articles/durable-functions-api-durableorchestrationclient-4&quot;&gt;Human Interaction Pattern (DurableOrchestrationClient Part 4)&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
 			</content>
    </entry><entry>
      <title>My MSBuild 2020 experience: serverless, community &amp; creativity</title>
      <link href="http://localhost:8080/articles/msbuild-serverless-community-creativity/" />
      <updated>2020-05-22T00:00:00Z</updated>
      <id>http://localhost:8080/articles/msbuild-serverless-community-creativity/</id>
      <content type="html">
				&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/41.1.Build_Wallpaper_DarkTheme_DesignA_8bit-440w.webp 440w, http://localhost:8080/assets/images/41.1.Build_Wallpaper_DarkTheme_DesignA_8bit-650w.webp 650w, http://localhost:8080/assets/images/41.1.Build_Wallpaper_DarkTheme_DesignA_8bit-960w.webp 960w, http://localhost:8080/assets/images/41.1.Build_Wallpaper_DarkTheme_DesignA_8bit-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/41.1.Build_Wallpaper_DarkTheme_DesignA_8bit-1200w.webp&quot; width=&quot;1200&quot; height=&quot;661&quot; alt=&quot;8-bit MSBuild wallpaper&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;Microsoft just finished its 48-hour live online event, &lt;a href=&quot;https://mybuild.microsoft.com/&quot; rel=&quot;noopener&quot;&gt;MSBuild 2020&lt;/a&gt;, and I enjoyed it immensely! I was fortunate to be invited for two sessions: a panel discussion on &lt;em&gt;building serverless APIs&lt;/em&gt;, and a &lt;em&gt;connect with the community&lt;/em&gt; session. I also threw in some pixel art just for fun, more on that later.&lt;/p&gt;&lt;h2 id=&quot;build-and-secure-serverless-apis-panel-discussion&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/msbuild-serverless-community-creativity/#build-and-secure-serverless-apis-panel-discussion&quot; class=&quot;heading-anchor&quot;&gt;Build and Secure Serverless APIs panel discussion&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;My first appearance was during a serverless panel discussion (Session BDL146) together with Rajorshi Ghosh Choudhury (Hasura) and Guy Prodjarny (Snyk). The session was hosted by ‚òÅ ü•ë Simona Cotin. We talked about our definition of serverless, state management, GraphQL, security aspects, and common pitfalls. We covered a lot in just 30 minutes!&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/41.2.serverless_panel-440w.webp 440w, http://localhost:8080/assets/images/41.2.serverless_panel-650w.webp 650w, http://localhost:8080/assets/images/41.2.serverless_panel-960w.webp 960w, http://localhost:8080/assets/images/41.2.serverless_panel-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/41.2.serverless_panel-1200w.webp&quot; width=&quot;1200&quot; height=&quot;672&quot; alt=&quot;Build and Secure Serverless APIs panel&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;Build and Secure Serverless APIs panel&lt;/em&gt;&lt;/p&gt;&lt;p&gt;You can view the &lt;a href=&quot;https://mybuild.microsoft.com/sessions/e477304a-6de3-4714-a1f3-cc955da82b1a&quot; rel=&quot;noopener&quot;&gt;recording here&lt;/a&gt;.&lt;/p&gt;&lt;h2 id=&quot;community-update&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/msbuild-serverless-community-creativity/#community-update&quot; class=&quot;heading-anchor&quot;&gt;Community Update&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The second session I was part of, was &lt;em&gt;Connect with Microsoft Western Europe and your local dev community&lt;/em&gt; (Session COM178). During this session, many community members took part in panel discussions and gave updates on projects they are working on in their own time.&lt;/p&gt;&lt;p&gt;I got the opportunity to talk about the &lt;a href=&quot;https://marcduiker.dev/articles/creating-azure-functions-updates-twitterbot&quot; rel=&quot;noopener&quot;&gt;Azure Functions Update Twitter bot&lt;/a&gt; that I made with Azure Functions &amp;amp; Durable Functions. I explained the reason why I built it, shared plans for future updates, and mentioned that I‚Äôll be helping out Suzanne Daniels (Microsoft Dev PMM) with &lt;a href=&quot;https://meetupgemist.nl/&quot; rel=&quot;noopener&quot;&gt;meetupgemist.nl&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;The recording is not available yet, but here is &lt;a href=&quot;https://mybuild.microsoft.com/sessions/0063cc6a-b3f9-439f-b67a-ccf3dbe11b59&quot; rel=&quot;noopener&quot;&gt;the session page&lt;/a&gt;.&lt;/p&gt;&lt;h2 id=&quot;creativity&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/msbuild-serverless-community-creativity/#creativity&quot; class=&quot;heading-anchor&quot;&gt;Creativity&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;My other contributions to MSBuild was not planned upfront at all. They just happened throughout the event.&lt;/p&gt;&lt;h3 id=&quot;digital-swag&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/msbuild-serverless-community-creativity/#digital-swag&quot; class=&quot;heading-anchor&quot;&gt;Digital Swag&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;On the first day of MSBuild, just before it started, I read &lt;a href=&quot;https://twitter.com/livelovegeek/status/1262849878943653889&quot; rel=&quot;noopener&quot;&gt;this tweet&lt;/a&gt; by Morgan Mitchell who announced &lt;a href=&quot;https://github.com/microsoft/Build2020_DigitalSwag&quot; rel=&quot;noopener&quot;&gt;this GitHub repo&lt;/a&gt; with digital swag for MSBuild. I really liked the desktop wallpapers and decided to make an &lt;a href=&quot;https://twitter.com/marcduiker/status/1262719249203597312&quot; rel=&quot;noopener&quot;&gt;8-bit version&lt;/a&gt; for one of the designs (see the header image of this post). I made a pull request, which got merged very quick, and my first creative contribution to MSBuild was a fact! üòÄ&lt;/p&gt;&lt;h3 id=&quot;pixel-art-portraits&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/msbuild-serverless-community-creativity/#pixel-art-portraits&quot; class=&quot;heading-anchor&quot;&gt;Pixel art portraits&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;By the end of day one, I wanted to do a funny take on my highlight of that day. And since I LOL‚Äôd about Scott Gu his appearance in pyjama pants and dino slippers, I decided to make an 8-bit version of that and &lt;a href=&quot;https://twitter.com/marcduiker/status/1262851019865763843?s=20&quot; rel=&quot;noopener&quot;&gt;posted it on Twitter&lt;/a&gt;. It got some likes but nothing crazy.&lt;/p&gt;&lt;p&gt;During the next day, I thought it would be nice to show my appreciation to the hosts, because I know from experience it is a demanding task. I created 16x16 pixel portraits for them. I started with the UK/EMEA hosts of that day, Asim Hussain and Simona Cotin, and &lt;a href=&quot;http://localhost:8080/articles/msbuild-serverless-community-creativity/(https:/twitter.com/marcduiker/status/1263065949164441601&quot;&gt;posted that on Twitter&lt;/a&gt;. This got quite some traction, and it became clear to me that I should make more of these, so all the hosts would have one. I continued made pixel portraits for:&lt;/p&gt;&lt;ul class=&quot;list&quot;&gt;&lt;li&gt;&lt;a href=&quot;https://twitter.com/marcduiker/status/1263123133843808258?s=20&quot; rel=&quot;noopener&quot;&gt;Christina Warren&lt;/a&gt; (US)&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://twitter.com/marcduiker/status/1263185437226647553?s=20&quot; rel=&quot;noopener&quot;&gt;Seth Juarez &amp;amp; Don Sarkar&lt;/a&gt; (US)&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://twitter.com/marcduiker/status/1263410707460218880?s=20&quot; rel=&quot;noopener&quot;&gt;Amy Kate Boyd &amp;amp; Dean Bryen&lt;/a&gt; (UK/EMEA)&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://twitter.com/marcduiker/status/1263436663553916928?s=20&quot; rel=&quot;noopener&quot;&gt;Sonia Cuff, Aaron Powell &amp;amp; Rick Claus&lt;/a&gt; (APAC)&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://twitter.com/marcduiker/status/1263454743407529984?s=20&quot; rel=&quot;noopener&quot;&gt;A quokka&lt;/a&gt; ü§∑‚Äç‚ôÄÔ∏è&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;I received lovely responses from everyone üòä. The Microsoft Developer Twitter account did a shout-out with an illustrated &amp;amp; 8-bit version of myself üòÇ.&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/41.3.illustrated_marc-440w.webp 440w, http://localhost:8080/assets/images/41.3.illustrated_marc-650w.webp 650w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/41.3.illustrated_marc-650w.webp&quot; width=&quot;650&quot; height=&quot;550&quot; alt=&quot;Hilarious shout-out from the Microsoft Developer Twitter account&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;Hilarious shout-out from the Microsoft Developer Twitter account.&lt;/em&gt;&lt;/p&gt;&lt;p&gt;During the final minutes of Build, I even got a shout-out from Dona, Seth, and Christina for this. This really made my day! üéâüòÉ&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/41.4.twitter_thankyou_message-440w.webp 440w, http://localhost:8080/assets/images/41.4.twitter_thankyou_message-650w.webp 650w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/41.4.twitter_thankyou_message-650w.webp&quot; width=&quot;650&quot; height=&quot;879&quot; alt=&quot;My thank you tweet with the 8-bit collage&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;My thank you tweet with the 8-bit collage.&lt;/em&gt;&lt;/p&gt;&lt;p&gt;I receive quite some requests for 8-bit portraits now üòÖ. I hope you understand I can‚Äôt do all of them. I make them by hand, pixel by pixel (using a tool called Aseprite). It takes quite some time to create a recognizable pixel portrait for someone. If you want to support my creative work, please buy me a coffee: &lt;a href=&quot;https://ko-fi.com/marcduiker&quot; rel=&quot;noopener&quot;&gt;ko-fi.com/marcduiker&lt;/a&gt; and let‚Äôs get in touch üòä.&lt;/p&gt;&lt;h3 id=&quot;retro-game&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/msbuild-serverless-community-creativity/#retro-game&quot; class=&quot;heading-anchor&quot;&gt;Retro game&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;I really enjoyed one of the last sessions of the third day titled &lt;em&gt;Inspiring Next Gen Coders with Make Code&lt;/em&gt; (&lt;a href=&quot;https://mybuild.microsoft.com/sessions/a1638103-16a8-4059-90ac-54c7e0dda8a2?source=sessions&quot; rel=&quot;noopener&quot;&gt;session INT157C&lt;/a&gt;). Scott Hanselman and Louanne Murphy demonstrated &lt;em&gt;Make Code&lt;/em&gt;, an open educational programming platform backed by various organizations. It allows you to create games or do IoT projects with hardware components from micro:bit and Adafruit, for instance. Programming is done in the browser with visual blocks or in Javascript. Since I was really eager to try &lt;em&gt;Make Code&lt;/em&gt;, I decided to create a small retro style game using &lt;a href=&quot;https://arcade.makecode.com&quot; rel=&quot;noopener&quot;&gt;arcade.makecode.com&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/41.5.cheez-it_deth_match_game-440w.webp 440w, http://localhost:8080/assets/images/41.5.cheez-it_deth_match_game-650w.webp 650w, http://localhost:8080/assets/images/41.5.cheez-it_deth_match_game-960w.webp 960w, http://localhost:8080/assets/images/41.5.cheez-it_deth_match_game-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/41.5.cheez-it_deth_match_game-1200w.webp&quot; width=&quot;1200&quot; height=&quot;610&quot; alt=&quot;The Cheez-It Deth Match game&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;The Cheez-It Deth Match game&lt;/em&gt;&lt;/p&gt;&lt;p&gt;I only used the visual blocks and the built-in sprite editor to make this game called &lt;em&gt;Cheez-It Deth Match&lt;/em&gt;. The game refers to a social hour during MSBuild day 2, where Dona Sarkar and Seth Juarez were ‚Äòcooking‚Äô Cheez-Its ü§î. &lt;em&gt;Deth&lt;/em&gt; refers to the combination of Dona and Seth (&lt;a href=&quot;https://twitter.com/donasarkar/status/1263305140200632321&quot; rel=&quot;noopener&quot;&gt;see this tweet&lt;/a&gt;).&lt;/p&gt;&lt;p&gt;It‚Äôs a local two-player game, best played with a keyboard. One player plays Dona, and the other Seth and whoever eats the most Cheez-Its wins. Play it online at &lt;a href=&quot;https://makecode.com/_CPJKJtiR5dz4&quot; rel=&quot;noopener&quot;&gt;makecode.com&lt;/a&gt; üïπ. The game is definitely not perfect, but I built it in just 1.5 hours! The development &amp;amp; playing experience is incredibly smooth and fun.&lt;/p&gt;&lt;h2 id=&quot;build-complete&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/msbuild-serverless-community-creativity/#build-complete&quot; class=&quot;heading-anchor&quot;&gt;Build Complete&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Due to all the interactions (live and on Twitter) with the hosts and attendees, I really felt part of the event, even part of the team. I had so much fun during my speaking opportunities, and I really hope it helped and inspired other developers. ‚ù§Ô∏è&lt;/p&gt;&lt;p&gt;I‚Äôm also thrilled my creative contributions were so well received, and I hope it made the event even more engaging and fun. I‚Äôm looking forward to the next MSBuild!&lt;/p&gt;&lt;p&gt;Cheers,&lt;/p&gt;&lt;p&gt;Marc&lt;/p&gt;
 			</content>
    </entry><entry>
      <title>ServerlessDays Amsterdam, a personal post-mortem</title>
      <link href="http://localhost:8080/articles/serverlessdays-amsterdam-post-mortem/" />
      <updated>2020-05-12T00:00:00Z</updated>
      <id>http://localhost:8080/articles/serverlessdays-amsterdam-post-mortem/</id>
      <content type="html">
				&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/40.00-desk-440w.webp 440w, http://localhost:8080/assets/images/40.00-desk-650w.webp 650w, http://localhost:8080/assets/images/40.00-desk-960w.webp 960w, http://localhost:8080/assets/images/40.00-desk-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/40.00-desk-1200w.webp&quot; width=&quot;1200&quot; height=&quot;675&quot; alt=&quot;My desk at the start of the conference&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;It is now May 12th, four days after the ServerlessDays Amsterdam 2020 virtual conference. The conference was incredibly fun and slightly terrifying at the same time.&lt;/p&gt;&lt;p&gt;I had two roles during the conference; in the morning, I would do the hosting with Lian Li (who really has a talent for MC-ing), and during the entire day, I would be responsible for the technical part. In specific that means that I‚Äôd be calling in speakers &amp;amp; panelists into the Skype group call, and controlling the streaming software (OBS), switching scenes, configuring webcam sources, shared screens, names, and starting the prerecorded sessions.&lt;/p&gt;&lt;p&gt;I gained some practice with live streaming over the last month since we did two virtual ServerlessDays Meetups. Still, I knew the conference would be a next-level challenge, and it sure was üòÖ. So I spent most of my free time over the last three weeks on perfecting my streaming setup and preparing a detailed script that I could use during the conference.&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/40.01-script-440w.webp 440w, http://localhost:8080/assets/images/40.01-script-650w.webp 650w, http://localhost:8080/assets/images/40.01-script-960w.webp 960w, http://localhost:8080/assets/images/40.01-script-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/40.01-script-1200w.webp&quot; width=&quot;1200&quot; height=&quot;687&quot; alt=&quot;First few lines of the script for the conference&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;h2 id=&quot;may-7th&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/serverlessdays-amsterdam-post-mortem/#may-7th&quot; class=&quot;heading-anchor&quot;&gt;May 7th&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I want to highlight some of the work I did before the conference day because this saved me quite some time and effort on the day itself.&lt;/p&gt;&lt;h3 id=&quot;prerecorded-sessions&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/serverlessdays-amsterdam-post-mortem/#prerecorded-sessions&quot; class=&quot;heading-anchor&quot;&gt;Prerecorded sessions&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Since half of the speakers provided us with a prerecorded session (thank you!), I put those recordings in a VLC Media Source playlist in OBS with 5-second bumpers in between. When a new recorded session would start, I only needed to remove the first recording from the playlist, and I was good to go.&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/40.02-vlc-media-source-440w.webp 440w, http://localhost:8080/assets/images/40.02-vlc-media-source-650w.webp 650w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/40.02-vlc-media-source-650w.webp&quot; width=&quot;650&quot; height=&quot;253&quot; alt=&quot;The VLC Media source in OBS with all the prerecorded videos&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;The VLC Media source in OBS with all the prerecorded videos.&lt;/em&gt;&lt;/p&gt;&lt;p&gt;An annoying thing about the VLC Media Source (and the regular Media Source) is that you don‚Äôt see the remaining playtime of the video. Having these times is essential if you want to give a heads up to the hosts, and speaker. To fix this, I added timers for each prerecorded session to my StreamDeck. So when I switched to the OBS scene with the VLC Media Source, I would also press the corresponding timer on the StreamDeck, which started a countdown.&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/40.03-streamdeck-timers-440w.webp 440w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/40.03-streamdeck-timers-440w.webp&quot; width=&quot;440&quot; height=&quot;343&quot; alt=&quot;Using timers for each recorded session&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;Using timers for each recorded session.&lt;/em&gt;&lt;/p&gt;&lt;h3 id=&quot;text-files-and-chatlog-mode&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/serverlessdays-amsterdam-post-mortem/#text-files-and-chatlog-mode&quot; class=&quot;heading-anchor&quot;&gt;Text Files &amp;amp; Chatlog Mode&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Something I didn‚Äôt want to spend much time on during the day itself would be configuring the speaker‚Äôs names in OBS. I was looking into the read from file option, and then I noticed the Chatlog Mode. With this option enabled, with a row count of 1, only the last line is used as the input for a text field. So I put all the speaker names in a text file in reverse order and used that as the source for the speaker name field in OBS. When a new speaker was joining, I only needed to remove the last line and save the file.&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/40.04-chatlogmode-440w.webp 440w, http://localhost:8080/assets/images/40.04-chatlogmode-650w.webp 650w, http://localhost:8080/assets/images/40.04-chatlogmode-960w.webp 960w, http://localhost:8080/assets/images/40.04-chatlogmode-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/40.04-chatlogmode-1200w.webp&quot; width=&quot;1200&quot; height=&quot;675&quot; alt=&quot;Using text files with chatlog mode enabled&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;Using text files with chatlog mode enabled.&lt;/em&gt;&lt;/p&gt;&lt;h2 id=&quot;may-8th-the-conference-day&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/serverlessdays-amsterdam-post-mortem/#may-8th-the-conference-day&quot; class=&quot;heading-anchor&quot;&gt;May 8th, the conference day&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&quot;700&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/serverlessdays-amsterdam-post-mortem/#700&quot; class=&quot;heading-anchor&quot;&gt;7:00&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;My day started at a reasonable time. I woke up at 7:00, took a shower, had some breakfast, and made &lt;em&gt;a lot of coffee&lt;/em&gt; ‚òï. I also prepared some lunch, snacks, and fruits to take with me upstairs since I would spend my entire day in my home office in the attic. I did allow myself some bathroom breaks though.&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/40.05-food-440w.webp 440w, http://localhost:8080/assets/images/40.05-food-650w.webp 650w, http://localhost:8080/assets/images/40.05-food-960w.webp 960w, http://localhost:8080/assets/images/40.05-food-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/40.05-food-1200w.webp&quot; width=&quot;1200&quot; height=&quot;900&quot; alt=&quot;Refreshments for during the day&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;Refreshments for during the day.&lt;/em&gt;&lt;/p&gt;&lt;h3 id=&quot;800-am&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/serverlessdays-amsterdam-post-mortem/#800-am&quot; class=&quot;heading-anchor&quot;&gt;8:00 AM&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Once settled behind my laptop, I RDP-ed to the virtual machine in Azure, which is the heart of the streaming setup. It‚Äôs an NV6 machine, GPU enabled, and with enough CPU and memory to use for streaming.&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/40.06-obs-440w.webp 440w, http://localhost:8080/assets/images/40.06-obs-650w.webp 650w, http://localhost:8080/assets/images/40.06-obs-960w.webp 960w, http://localhost:8080/assets/images/40.06-obs-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/40.06-obs-1200w.webp&quot; width=&quot;1200&quot; height=&quot;650&quot; alt=&quot;The OBS setup running in an Azure VM&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;The OBS setup running in an Azure VM.&lt;/em&gt;&lt;/p&gt;&lt;p&gt;Since we‚Äôre using a combination of Skype, NDI Tools, and OBS, I started a Skype group call on the VM and invited myself, so I call in from my laptop.&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/40.07-skype-group-440w.webp 440w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/40.07-skype-group-440w.webp&quot; width=&quot;440&quot; height=&quot;494&quot; alt=&quot;The Skype group call&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;The Skype group call.&lt;/em&gt;&lt;/p&gt;&lt;p&gt;I verified the webcam source in OBS since I was also doing a hosting role in the morning. I once more checked the order of the speaker names in the text file, and the prerecorded sessions in the playlist. I also checked the scene transitions using my StreamDeck since I updated the software earlier this week (risky, I know).&lt;/p&gt;&lt;h3 id=&quot;830&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/serverlessdays-amsterdam-post-mortem/#830&quot; class=&quot;heading-anchor&quot;&gt;8:30&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;I invited Lian to the group call and asked her to share her screen so I could set up the sources in OBS.&lt;/p&gt;&lt;h3 id=&quot;845&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/serverlessdays-amsterdam-post-mortem/#845&quot; class=&quot;heading-anchor&quot;&gt;8:45&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Our keynote speaker, Ant Stanley, joined the group call. We three had a nice and relaxed chat while I was setting up the sources in OBS. Ant was going to give his session live, so we needed to make sure screen sharing was working. I added his webcam feed to the screen sharing scene so the audience could see his face during his session (more on this later). Lian quickly asked Ant for a fun fact she could use for his intro.&lt;/p&gt;&lt;h3 id=&quot;850&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/serverlessdays-amsterdam-post-mortem/#850&quot; class=&quot;heading-anchor&quot;&gt;8:50&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;I started the 10 min countdown timer and started streaming. We were streaming simultaneously to YouTube, Twitch, and Periscope (using Restream). There were already some people waiting on YouTube, amazing!&lt;/p&gt;&lt;h3 id=&quot;900&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/serverlessdays-amsterdam-post-mortem/#900&quot; class=&quot;heading-anchor&quot;&gt;9:00&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Just before 9:00, I started counting down out loud so Lian would know when the exact moment of go-live would be. As soon as the timer reached 0:00, I switched to the scene with webcam feeds of Lian and me, and we are &lt;a href=&quot;https://www.youtube.com/watch?v=cqaewpYtYTA&amp;amp;t=595s&quot; rel=&quot;noopener&quot;&gt;LIVE&lt;/a&gt; üéâ. Lian did most of the intro work here, as agreed upfront, and she did great! There was an issue with Lian her webcam feed, unfortunately. The entire frame was resizing now and then. The resizing kept on occurring during the whole day and also happened to a few others. I don‚Äôt know the cause yet, could be Skype, NDI Tools, or the OBS plugin. I was quite distracted by this and tried to rescale the webcam source whenever this happened, it felt like a continuous battle üòü.&lt;/p&gt;&lt;ul class=&quot;list&quot;&gt;&lt;li&gt;Issue 1: Uncontrolled resizing of webcam/NDI source.&lt;/li&gt;&lt;li&gt;Solution: &lt;s&gt;unknown&lt;/s&gt;, ‚Äì [UPDATE May 14th] ‚Äì&lt;br&gt;Thanks to the Twitterverse I now know the source of the issue and the solution! NDI Tools scales the video feed based on available bandwidth. Apparently everyone knew this but me! üòÖ Thanks to &lt;a href=&quot;https://twitter.com/maartenballiauw&quot; rel=&quot;noopener&quot;&gt;Maarten Balliauw&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/hboelman&quot; rel=&quot;noopener&quot;&gt;Henk Boelman&lt;/a&gt;, who already &lt;a href=&quot;https://www.henkboelman.com/articles/online-meetups-with-obs-and-skype/&quot; rel=&quot;noopener&quot;&gt;wrote about this&lt;/a&gt;. The fix is to apply a Transform in OBS to prevent the scaling as is &lt;a href=&quot;https://support.skype.com/en/faq/FA34853/what-is-skype-for-content-creators&quot; rel=&quot;noopener&quot;&gt;described here&lt;/a&gt;. Note to self: RTFM! üòÇ&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&quot;915&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/serverlessdays-amsterdam-post-mortem/#915&quot; class=&quot;heading-anchor&quot;&gt;9:15&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Ant started his keynote session, and I switched to the scene with his shared screen and his webcam feed. It became apparent quickly that there was not a single good spot for this small webcam inside the shared screen feed since Ant‚Äôs slides were ever-changing. I moved his webcam feed around during this presentation, which must have looked hilarious to the audience üòÇ.&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/40.08-ant-440w.webp 440w, http://localhost:8080/assets/images/40.08-ant-650w.webp 650w, http://localhost:8080/assets/images/40.08-ant-960w.webp 960w, http://localhost:8080/assets/images/40.08-ant-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/40.08-ant-1200w.webp&quot; width=&quot;1200&quot; height=&quot;674&quot; alt=&quot;Ant being moved from right to left during his presentation&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;Ant being moved from right to left during his live presentation.&lt;/em&gt;&lt;/p&gt;&lt;ul class=&quot;list&quot;&gt;&lt;li&gt;Issue 2: Webcam source hides info on slides.&lt;/li&gt;&lt;li&gt;Solution: Don‚Äôt compose a scene where the webcam source is overlaying the presentation source. Or instruct speakers to leave some space available for their webcam feed.&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&quot;950-1215&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/serverlessdays-amsterdam-post-mortem/#950-1215&quot; class=&quot;heading-anchor&quot;&gt;9:50-12:15&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;After Ant‚Äôs keynote, there were three prerecorded sessions, each with live Q&amp;amp;A from Tomasz Konieczny, Riccardo Mocchetti, and Aymen Chetoui. About five minutes before each session, I would add the speaker to the Skype group call, set up their webcam source, update the VLC Media Source playlist, and update the speakers.txt file. All these sessions went quite smoothly. A live ten-minute lightning session with Ebru Cucen followed without me requiring to move around her webcam source all the time, thank you, Ebru! üòÑ&lt;/p&gt;&lt;h3 id=&quot;1215&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/serverlessdays-amsterdam-post-mortem/#1215&quot; class=&quot;heading-anchor&quot;&gt;12:15&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Just before 12:15, the members of the expert panel joined the group call. I set up their webcams/NDI sources in the scene called Panel OBS. This scene was new and hadn‚Äôt been tested during any of the meetups. And this became quite evident since I forgot to mute the panelists‚Äô audio sources, which resulted in a loud and annoying echo (sorry for your ears!). I received multiple warnings from the team and attendees, so this was fixed relatively quickly. It could have easily been prevented if I had tried the scene with the four panelists in advance. Besides the audio issue, the resizing issue was also prominent in this scene, for both Lian and Sara‚Äôs webcams. The panel discussion itself went very well, but due to the technical issues, I was too distracted to follow it closely.&lt;/p&gt;&lt;ul class=&quot;list&quot;&gt;&lt;li&gt;Issue 3: Echo due to multiple audio sources in an untested scene.&lt;/li&gt;&lt;li&gt;Solution: Always do a trial run with scenes that use multiple NDI sources.&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&quot;1240&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/serverlessdays-amsterdam-post-mortem/#1240&quot; class=&quot;heading-anchor&quot;&gt;12:40&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Time for the lunch break! Even though I had prepared my lunch up-front and took it with me upstairs, I really enjoyed being able to have a small break. At this moment, I was still annoyed with the weird resizing webcam issues, so it was good to have a short break for my laptop. Lian dropped out of the call because we would now switch over to Floor Drees and Marek Kuczynski as the hosts. I invited them to the group call, set up their webcam sources, and updated the hosts‚Äô names in OBS to match theirs. I also added the next speaker, Sven Al Hamad, to the group call and configured his prerecorded session and name. So far, so good.&lt;/p&gt;&lt;h3 id=&quot;1320&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/serverlessdays-amsterdam-post-mortem/#1320&quot; class=&quot;heading-anchor&quot;&gt;13:20&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;When the break was almost over, I counted down out loud again, so Floor and Marek would know the exact moment of go live. I LOL‚Äôd about the introduction Floor gave when she mentioned that Marek would explain why they are ‚Äòarch enemies‚Äô ü§£. Floor works at Microsoft and Marek at AWS. I love the fact that they could host together, it shows we have a fun and respectful community üß°.&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/40.08-floorandmarek-440w.webp 440w, http://localhost:8080/assets/images/40.08-floorandmarek-650w.webp 650w, http://localhost:8080/assets/images/40.08-floorandmarek-960w.webp 960w, http://localhost:8080/assets/images/40.08-floorandmarek-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/40.08-floorandmarek-1200w.webp&quot; width=&quot;1200&quot; height=&quot;674&quot; alt=&quot;Hilarious intro by Floor and Marek&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;Hilarious intro by Floor and Marek.&lt;/em&gt;&lt;/p&gt;&lt;h3 id=&quot;1320-1525&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/serverlessdays-amsterdam-post-mortem/#1320-1525&quot; class=&quot;heading-anchor&quot;&gt;13:20 - 15:25&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;The next three sessions from Sven Al Hamad, Josh Carlise, and Farrah Campbell were all prerecorded and went pretty smoothly, at least from the perspective of the audience. My Skype call actually dropped during the prerecorded session by Sven. It took me about 1 minute to reconnect again, nobody noticed, but this freaked me out quite a bit! üò±&lt;/p&gt;&lt;ul class=&quot;list&quot;&gt;&lt;li&gt;Issue 4: Skype call dropped unexpectedly.&lt;/li&gt;&lt;li&gt;Solution: Don‚Äôt use Skype for events that last several hours?&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;At the start of Josh his session, I was a bit too slow with updating the speaker name source in OBS. Also, Josh‚Äôs audio was not working initially, but it was all fixed quickly. His session ended pretty hilariously thanks to a question from Floor; ‚ÄúWhat is behind door number 3?‚Äù. It was a bathroom, and Josh said he didn‚Äôt want to open the door in case someone would be in there ü§£.&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/40.09-doorno3-440w.webp 440w, http://localhost:8080/assets/images/40.09-doorno3-650w.webp 650w, http://localhost:8080/assets/images/40.09-doorno3-960w.webp 960w, http://localhost:8080/assets/images/40.09-doorno3-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/40.09-doorno3-1200w.webp&quot; width=&quot;1200&quot; height=&quot;674&quot; alt=&quot;Josh pointing to door no 3&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;Josh pointing to door no 3.&lt;/em&gt;&lt;/p&gt;&lt;h3 id=&quot;1525-1625&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/serverlessdays-amsterdam-post-mortem/#1525-1625&quot; class=&quot;heading-anchor&quot;&gt;15:25 - 16:25&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Two live sessions followed; one by Sia Ghassemi, who showed some awesome tricks with Excel and Azure Functions, and one lightning session by Sebastien Goasguen about AWS EventBridge. Both went well regarding the tech, no weird issues with resizing webcam feeds or placement of the webcam on the presentations, woohoo! The success didn‚Äôt last long though‚Ä¶&lt;/p&gt;&lt;p&gt;During the lightning session, the panelists joined the group call again for the expert panel session, but two of the three webcam feeds were not showing in OBS! I removed the non-working NDI sources from the scene and added them again, now it did work again, phew. But of course, I forgot something which would result in more issues‚Ä¶&lt;/p&gt;&lt;ul class=&quot;list&quot;&gt;&lt;li&gt;Issue 5: Webcam feeds not available for people rejoining the call.&lt;/li&gt;&lt;li&gt;Solution/Workaround: Remove NDI sources and add them again.&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&quot;1625-1730&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/serverlessdays-amsterdam-post-mortem/#1625-1730&quot; class=&quot;heading-anchor&quot;&gt;16:25 - 17:30&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;As soon as the second expert panel session started, the annoying echo was back! When I added the NDI sources for the panelists again, I forgot to mute their corresponding audio sources, aarrgh! I did fix it a bit quicker than the first panel session, I think.&lt;/p&gt;&lt;p&gt;Near the end of the panel discussion, I added our closing keynote speaker to the call, Simona Cotin. I was a bit late with switching to the scene with just two webcam feeds for Floor and Marek. So while the panelists were leaving the group call, their scene was still active, and empty rectangles were appearing where their webcam used to be. Not the most elegant. Then I switched to the scene with both hosts and Simona, and then Floor her webcam feed started resizing out of the blue. Luckily during Simona her session, everything went smoothly again. The keynote was very well done, both in style and content.&lt;/p&gt;&lt;ul class=&quot;list&quot;&gt;&lt;li&gt;Issue 6: Empty spots in the scene due to people dropping out of the call.&lt;/li&gt;&lt;li&gt;Solution: Agree upfront that people will stay in the group call a bit longer with webcam enabled.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;During the final keynote session, I created a new scene in OBS with the webcam feeds of all four hosts, so Floor, Marek, Lian, and myself. I wanted to have a moment where we would all be visible to the audience so I could say thanks for their excellent work.&lt;/p&gt;&lt;h3 id=&quot;1730-1755&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/serverlessdays-amsterdam-post-mortem/#1730-1755&quot; class=&quot;heading-anchor&quot;&gt;17:30 - 17:55&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;After Simona‚Äôs keynote, I switched to the new scene, and again two of the four webcam sources had resizing issues. I pretty much gave up by now to correct it. üò´&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/40.10-4hosts-440w.webp 440w, http://localhost:8080/assets/images/40.10-4hosts-650w.webp 650w, http://localhost:8080/assets/images/40.10-4hosts-960w.webp 960w, http://localhost:8080/assets/images/40.10-4hosts-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/40.10-4hosts-1200w.webp&quot; width=&quot;1200&quot; height=&quot;674&quot; alt=&quot;Unexpected resizing of webcam feeds again&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;Unexpected resizing of webcam feeds again.&lt;/em&gt;&lt;/p&gt;&lt;p&gt;After thanking Floor and Marek, I switched to the scene with just Lian and me so we could close the conference. Again this scene suffered from webcam feed resizing now and then.&lt;br&gt;When it was time to raffle the prizes, the Google Sheets script for selecting the winners did not cooperate, it took way longer than we expected. We spent quite some time online waiting for the script to finish, and Lian did a great job of filling the void with her creativity. Also, Floor helped by asking questions to keep the conversation going, great teamwork! In the end, we decided not to wait for the script to finish and announce the winners on Discord.&lt;/p&gt;&lt;ul class=&quot;list&quot;&gt;&lt;li&gt;Issue 7: Script to select winners was taking too long.&lt;/li&gt;&lt;li&gt;Solution: Always have a backup plan when doing a live raffle of prizes.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Lian continued the closing of the conference and thanked sponsors, speakers, and organizers. At the exact moment, Lian was thanking me, my Skype connection froze, and eventually, my call dropped again! I was really was annoyed since this was the second time it happened during the day. I had to replay the YouTube recording to hear Lian‚Äôs compliments, so thank you, Lian, for your kind words. I was lucky my frozen image was looking ok and I‚Äôm not making a weird face üòÖ.&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/40.11-frozen-440w.webp 440w, http://localhost:8080/assets/images/40.11-frozen-650w.webp 650w, http://localhost:8080/assets/images/40.11-frozen-960w.webp 960w, http://localhost:8080/assets/images/40.11-frozen-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/40.11-frozen-1200w.webp&quot; width=&quot;1200&quot; height=&quot;674&quot; alt=&quot;My frozen but happy image during the close out of the conference&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;My frozen but happy image during the close out of the conference.&lt;/em&gt;&lt;/p&gt;&lt;ul class=&quot;list&quot;&gt;&lt;li&gt;Issue 8: Skype call dropped unexpectedly again.&lt;/li&gt;&lt;li&gt;Solution: Never use Skype again for an event that lasts an entire day! üòû&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;After I rejoined the call, Lian &amp;amp; I continued our conversation for a bit, and we encouraged everyone to attend the after-party event by Sam Aaron.&lt;/p&gt;&lt;h3 id=&quot;1755&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/serverlessdays-amsterdam-post-mortem/#1755&quot; class=&quot;heading-anchor&quot;&gt;17:55&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;As soon as I dropped off the group call, I stopped streaming the conference event and got in contact with Sam via Discord to test the stream for the after-party. I was using another Restream account for the after-party, which I had configured earlier that week; unfortunately, I had to reconnect the Twitch account in Restream. Next, the ServerlessDays after-party event on YouTube was not showing Sam‚Äôs live stream. I had to create a new YouTube event via Restream, and Sam had to stop and start streaming to get the live streaming to work again.&lt;/p&gt;&lt;ul class=&quot;list&quot;&gt;&lt;li&gt;Issue 9: Connection issues with streaming and very little time to fix it.&lt;/li&gt;&lt;li&gt;Solution: Perform a live test at least a day in advance. Use a paid version for Restream, which allows multiple simultaneous streams and better options for restarting streams.&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&quot;1810&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/serverlessdays-amsterdam-post-mortem/#1810&quot; class=&quot;heading-anchor&quot;&gt;18:10&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Once both Twitch and YouTube streams were up and running, which was 10 minutes later than planned, I could finally relax, grab a beer, and enjoy Sam‚Äôs performance.&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/40.12-afterparty-440w.webp 440w, http://localhost:8080/assets/images/40.12-afterparty-650w.webp 650w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/40.12-afterparty-650w.webp&quot; width=&quot;650&quot; height=&quot;866&quot; alt=&quot;Me enjoying the afterparty!&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;Me enjoying the afterparty!&lt;/em&gt;&lt;/p&gt;&lt;p&gt;The performance was awesome! Sam was clearly having a good time as well since we could see hem dancing while coding his music. I had prepared a short audio recording where I welcome everyone to the after-party. During the performance, I sent it to Sam, hoping that he would use it, and he did!&lt;/p&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/8RX2WkBiXk0&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;p&gt;Once the after-party was done, we thanked Sam on Discord. There was plenty of positive feedback there, which was great to see.&lt;/p&gt;&lt;p&gt;Once the after-party was over, I watched some Netflix, and then went to bed. I couldn‚Äôt fall asleep, though, as I still felt the adrenaline rushing through my body. When I did fell asleep, I probably dreamt of continuously resizing webcam feeds in OBS üò´.&lt;/p&gt;&lt;h2 id=&quot;may-9th&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/serverlessdays-amsterdam-post-mortem/#may-9th&quot; class=&quot;heading-anchor&quot;&gt;May 9th&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;When I looked at the Restream statistics the day after, there were, on average, 82 people watching simultaneously. This is a bit lower than I expected since we received 380 registrations for the event. A lot of people must have thought the recording would appear online anyway. Or perhaps they had an online conference overload. Honestly, I can understand that. This was a free conference in the end, so some virtual no-show was expected.&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/40.13-restream-440w.webp 440w, http://localhost:8080/assets/images/40.13-restream-650w.webp 650w, http://localhost:8080/assets/images/40.13-restream-960w.webp 960w, http://localhost:8080/assets/images/40.13-restream-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/40.13-restream-1200w.webp&quot; width=&quot;1200&quot; height=&quot;613&quot; alt=&quot;Restream statistics showing the view count throughout the day&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;Restream statistics showing the view count throughout the day.&lt;/em&gt;&lt;/p&gt;&lt;p&gt;You can clearly see a drop around lunchtime (the chart is in UTC) and a slow decline towards the afternoon, as is expected for any conference. Most of the viewers watched on YouTube (61.1%), followed by Twitch (38.9%). Apparently, nobody viewed the event on Periscope/Twitter, so I‚Äôll be dropping that channel for future streaming sessions.&lt;/p&gt;&lt;h2 id=&quot;may-12th&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/serverlessdays-amsterdam-post-mortem/#may-12th&quot; class=&quot;heading-anchor&quot;&gt;May 12th&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The YouTube viewcount as of today is 775. So the views are steadily increasing, which is great!&lt;/p&gt;&lt;p&gt;Yesterday, Lian sent out a questionnaire asking for feedback, regarding both the format and the content. I hope we will receive enough information so we can make an even better conference next year üòä.&lt;/p&gt;&lt;h2 id=&quot;until-next-time&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/serverlessdays-amsterdam-post-mortem/#until-next-time&quot; class=&quot;heading-anchor&quot;&gt;Until next time?&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;If you‚Äôve read until this point, you‚Äôre either really interested in this or slightly masochistic. If you want to see all the mistakes for yourself, please enjoy the recording of the conference on YouTube. I do suggest you use the links in the description of the video so you can skip ahead to the individual sessions.&lt;/p&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/cqaewpYtYTA&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;p&gt;So, would I ever do this again? Yes and no. I would do this again since I enjoy working with the kind people in this awesome community. I also like to play around with the technology and learn new things. I would not do it in the exact same way, though. I‚Äôd prepare more, investigate in different tools, and, most importantly, share the responsibility for running the technical setup. Because now, I was solely responsible for doing tech work, which was quite a risk. If I had fallen down the stairs and had broken my leg, nobody could have stepped in quickly and continued the streaming. So my most important lesson learned is to involve others early on and to help them get familiar with the technical setup. This way, we can share the responsibility and I can sleep better in the nights leading to the event üòâ.&lt;/p&gt;&lt;p&gt;I hope to see you all at the conference next year, or at one of our &lt;a href=&quot;https://www.meetup.com/ServerlessDays-Amsterdam/&quot; rel=&quot;noopener&quot;&gt;(virtual) Meetups&lt;/a&gt;!&lt;/p&gt;&lt;p&gt;&lt;em&gt;Marc&lt;/em&gt;&lt;/p&gt;
 			</content>
    </entry><entry>
      <title>Live streaming the meetups and conference for ServerlessDays Amsterdam - Part 1</title>
      <link href="http://localhost:8080/articles/streaming-for-serverlessdays/" />
      <updated>2020-04-08T00:00:00Z</updated>
      <id>http://localhost:8080/articles/streaming-for-serverlessdays/</id>
      <content type="html">
				&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/39.1.cover-440w.webp 440w, http://localhost:8080/assets/images/39.1.cover-591w.webp 591w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/39.1.cover-591w.webp&quot; width=&quot;591&quot; height=&quot;442&quot; alt=&quot;StreamDeck&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;h2 id=&quot;everyone-is-live-streaming&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/streaming-for-serverlessdays/#everyone-is-live-streaming&quot; class=&quot;heading-anchor&quot;&gt;Everyone is live streaming!&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Well, ok, not &lt;em&gt;everyone&lt;/em&gt;, but a lot of meetups &amp;amp; conferences which were previously only offline and IRL have an online presence these days. It really lowers the boundary of attending these events, and I think this is great!&lt;/p&gt;&lt;p&gt;ServerlessDays Amsterdam (which I‚Äôm co-organizing) is also moving online for both the meetups and the conference. In this post, I‚Äôm highlighting some details on how we‚Äôre setting this up.&lt;/p&gt;&lt;h2 id=&quot;streaming-setup-basics&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/streaming-for-serverlessdays/#streaming-setup-basics&quot; class=&quot;heading-anchor&quot;&gt;Streaming setup basics&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I was already using &lt;a href=&quot;https://streamlabs.com/streamlabs-obs&quot; rel=&quot;noopener&quot;&gt;StreamLabs OBS (SLOBS)&lt;/a&gt; and regular &lt;a href=&quot;https://obsproject.com/&quot; rel=&quot;noopener&quot;&gt;OBS&lt;/a&gt; for my vlog. I like the level of control these tools offer, and yes, that comes with a steeper learning curve compared to using online conferencing tools like Zoom/Jitsi.&lt;/p&gt;&lt;p&gt;A lot of things have been written recently on how to set up a live streaming/recording system with OBS. So I‚Äôm just going to refer to the blogs which I‚Äôve read and highly recommend:&lt;/p&gt;&lt;ul class=&quot;list&quot;&gt;&lt;li&gt;&lt;a href=&quot;https://www.hanselman.com/blog/TakeRemoteWorkerEducatorWebcamVideoCallsToTheNextLevelWithOBSNDIToolsAndElgatoStreamDeck.aspx&quot; rel=&quot;noopener&quot;&gt;Take Remote Worker/Educator webcam video calls to the next level with OBS, NDI Tools, and Elgato Stream Deck - Scott Hanselman&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://www.henkboelman.com/articles/online-meetups-with-obs-and-skype/&quot; rel=&quot;noopener&quot;&gt;Online meetups with OBS and Skype - Henk Boelman&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://blog.maartenballiauw.be/post/2020/04/02/streaming-a-community-event-on-youtube-sharing-the-technologies-and-learnings-from-virtual-azure-community-day.html&quot; rel=&quot;noopener&quot;&gt;Streaming a Community Event on YouTube - Sharing the Technologies and Learnings from Virtual Azure Community Day - Maarten Balliauw&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;Special thanks goes out to Cloud Advocate Henk Boelman, who gave me detailed advice of using a virtual machine (VM) in Azure in combination with Skype, NDI Tools, and OBS. It works like a charm! ‚ù§Ô∏è&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Having a dedicated VM in the cloud for streaming has quite some benefits over using my local laptop:&lt;/p&gt;&lt;ul class=&quot;list&quot;&gt;&lt;li&gt;I can get a VM which is much more powerful than my laptop.&lt;/li&gt;&lt;li&gt;I can share the VM with others.&lt;/li&gt;&lt;li&gt;My internet connection is no longer the bottleneck for the live stream.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Are there downsides to using a VM? Yes, sure, the most obvious one is the price. You have to pay for a VM. The larger the VM, the more you pay. I‚Äôm lucky that I have Azure credits, thanks to being an Azure MVP. But even if I didn‚Äôt have these credits, I would still do it. This VM is only used for a couple of hours each month. So I‚Äôm never paying the full month price, just a fraction of it.&lt;/p&gt;&lt;h2 id=&quot;specific-setup-for-serverlessdays-amsterdam&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/streaming-for-serverlessdays/#specific-setup-for-serverlessdays-amsterdam&quot; class=&quot;heading-anchor&quot;&gt;Specific setup for ServerlessDays Amsterdam&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;For Serverless Amsterdam I ended up provisioning a GPU enabled virtual machine (Win 10 OS) on Azure, size &lt;em&gt;Standard NV6&lt;/em&gt;, with the following specs:&lt;/p&gt;&lt;ul class=&quot;list&quot;&gt;&lt;li&gt;6 virtual CPUs&lt;/li&gt;&lt;li&gt;56 GiB memory&lt;/li&gt;&lt;li&gt;1 GPU&lt;/li&gt;&lt;li&gt;8 GiB GPU memory&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&quot;enable-the-gpu-utilisation&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/streaming-for-serverlessdays/#enable-the-gpu-utilisation&quot; class=&quot;heading-anchor&quot;&gt;Enable the GPU utilisation&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;What I didn‚Äôt realize initially is that the VM has no preinstalled drivers to actually use the GPU. So make sure to install the NVIDIA GPU drivers. I did that by installing the &lt;code&gt;NVIDIA GPU Driver Extension&lt;/code&gt; though the Extensions blade in the Azure Portal:&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/39.2.nvidia_driver_extensions-440w.webp 440w, http://localhost:8080/assets/images/39.2.nvidia_driver_extensions-650w.webp 650w, http://localhost:8080/assets/images/39.2.nvidia_driver_extensions-960w.webp 960w, http://localhost:8080/assets/images/39.2.nvidia_driver_extensions-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/39.2.nvidia_driver_extensions-1200w.webp&quot; width=&quot;1200&quot; height=&quot;664&quot; alt=&quot;Azure Portal Extensions&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;Now we can use the hardware encoding (NVENC) in OBS:&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/39.3.obs_output-440w.webp 440w, http://localhost:8080/assets/images/39.3.obs_output-650w.webp 650w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/39.3.obs_output-650w.webp&quot; width=&quot;650&quot; height=&quot;454&quot; alt=&quot;OBS Output Settings&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;h3 id=&quot;redirect-local-usb-devices-to-the-vm&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/streaming-for-serverlessdays/#redirect-local-usb-devices-to-the-vm&quot; class=&quot;heading-anchor&quot;&gt;Redirect local USB devices to the VM&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;I purchased an &lt;a href=&quot;https://www.elgato.com/en/gaming/stream-deck&quot; rel=&quot;noopener&quot;&gt;Elgato Stream Deck&lt;/a&gt; so I can easily switch between scenes in OBS and set timers. I really like this small piece of hardware since it‚Äôs very customizable.&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/39.4.tweet_stream_deck-440w.webp 440w, http://localhost:8080/assets/images/39.4.tweet_stream_deck-591w.webp 591w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/39.4.tweet_stream_deck-591w.webp&quot; width=&quot;591&quot; height=&quot;442&quot; alt=&quot;Twitter Stream Deck Tweet&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;The Stream Deck can be used OOTB when OBS is running locally but I‚Äôd also want to use this device in OBS running in the VM. However local USB devices are not connected by default when a remote desktop session is used. Lucky we can use a technique called &lt;a href=&quot;https://techcommunity.microsoft.com/t5/enterprise-mobility-security/introducing-microsoft-remotefx-usb-redirection-part-1/ba-p/247035&quot; rel=&quot;noopener&quot;&gt;RemoteFX USB redirection&lt;/a&gt; which is enabled by changing two group policies, one for the local machine (client) and one for the remote VM (host).&lt;/p&gt;&lt;h4 id=&quot;group-policy-setting-for-the-local-machine&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/streaming-for-serverlessdays/#group-policy-setting-for-the-local-machine&quot; class=&quot;heading-anchor&quot;&gt;Group Policy Setting for the Local Machine&lt;/a&gt;&lt;/h4&gt;&lt;ul class=&quot;list&quot;&gt;&lt;li&gt;Open the &lt;em&gt;Local Group Policy Editor&lt;/em&gt; (use the windows search bar and type &lt;code&gt;group&lt;/code&gt; )&lt;/li&gt;&lt;li&gt;Navigate to &lt;em&gt;Administrative Templates&lt;/em&gt; &amp;gt; &lt;em&gt;Windows Components&lt;/em&gt; &amp;gt; &lt;em&gt;Remote Desktop Services&lt;/em&gt; &amp;gt; &lt;em&gt;Remote Desktop Connection Client&lt;/em&gt; &amp;gt; &lt;em&gt;RemoteFX USB Device Redirection&lt;/em&gt;&lt;/li&gt;&lt;li&gt;Set &lt;em&gt;Allow RDP redirection of other supported RemoteFX USB devices from this computer&lt;/em&gt; to &lt;code&gt;Enabled&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;Select &lt;code&gt;Administrators &amp;amp; Users&lt;/code&gt; for the &lt;em&gt;RemoteFX USB Redirection Access Rights&lt;/em&gt; options.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/39.5.rdp_client-440w.webp 440w, http://localhost:8080/assets/images/39.5.rdp_client-650w.webp 650w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/39.5.rdp_client-650w.webp&quot; width=&quot;650&quot; height=&quot;601&quot; alt=&quot;Group policy settings for enabling RemoteFX on the local client side&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;In a command prompt run: &lt;code&gt;gpupdate /force&lt;/code&gt; to enfore the updated policy (a restart might be required as well).&lt;/p&gt;&lt;h4 id=&quot;group-policy-setting-for-the-remote-vm&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/streaming-for-serverlessdays/#group-policy-setting-for-the-remote-vm&quot; class=&quot;heading-anchor&quot;&gt;Group Policy Setting for the remote VM&lt;/a&gt;&lt;/h4&gt;&lt;ul class=&quot;list&quot;&gt;&lt;li&gt;Open the &lt;em&gt;Local Group Policy Editor&lt;/em&gt; and navigate to &lt;em&gt;Administrative Templates&lt;/em&gt; &amp;gt; &lt;em&gt;Windows Components&lt;/em&gt; &amp;gt; &lt;em&gt;Remote Desktop Services&lt;/em&gt; &amp;gt; &lt;em&gt;Remote Desktop Session Host&lt;/em&gt; &amp;gt; &lt;em&gt;Device and Resource Redirection&lt;/em&gt;&lt;/li&gt;&lt;li&gt;Set the &lt;em&gt;Do not allow suported Plug and Play device redirection&lt;/em&gt; to &lt;code&gt;Disabled&lt;/code&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/39.1.cover-440w.webp 440w, http://localhost:8080/assets/images/39.1.cover-591w.webp 591w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/39.1.cover-591w.webp&quot; width=&quot;591&quot; height=&quot;442&quot; alt=&quot;39.6.rdp_host.png&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;In a command prompt run: &lt;code&gt;gpupdate /force&lt;/code&gt; to enfore the updated policy (a restart might be required as well).&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;I might be stating the obvious, but the Stream Deck software/drivers also need to be installed on the VM.&lt;/p&gt;&lt;/blockquote&gt;&lt;h4 id=&quot;starting-the-remote-desktop-connection&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/streaming-for-serverlessdays/#starting-the-remote-desktop-connection&quot; class=&quot;heading-anchor&quot;&gt;Starting the Remote Desktop Connection&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Now a remote desktop connection can be started from the local machine, and the USB connections can be selected, which are redirected to the VM.&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/39.7.rdp_settings-440w.webp 440w, http://localhost:8080/assets/images/39.7.rdp_settings-650w.webp 650w, http://localhost:8080/assets/images/39.7.rdp_settings-872w.webp 872w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/39.7.rdp_settings-872w.webp&quot; width=&quot;872&quot; height=&quot;520&quot; alt=&quot;Edit the RDP session settings to allow USB connectivity&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;Now both hard and software are set up to use the Stream Deck on the remote VM.&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/39.8.stream_deck_vm-440w.webp 440w, http://localhost:8080/assets/images/39.8.stream_deck_vm-572w.webp 572w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/39.8.stream_deck_vm-572w.webp&quot; width=&quot;572&quot; height=&quot;443&quot; alt=&quot;Stream Deck software on the VM&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/39.9.stream_deck_hardware-440w.webp 440w, http://localhost:8080/assets/images/39.9.stream_deck_hardware-572w.webp 572w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/39.9.stream_deck_hardware-572w.webp&quot; width=&quot;572&quot; height=&quot;405&quot; alt=&quot;Stream Deck hardware&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;In the next part I‚Äôll show more details about the OBS setup we‚Äôre using for ServerlessDays Amsterdam.&lt;/p&gt;
 			</content>
    </entry><entry>
      <title>Discovering the Durable Functions API - Human Interaction (DurableOrchestrationClient part 4)</title>
      <link href="http://localhost:8080/articles/durable-functions-api-durableorchestrationclient-4/" />
      <updated>2020-03-15T00:00:00Z</updated>
      <id>http://localhost:8080/articles/durable-functions-api-durableorchestrationclient-4/</id>
      <content type="html">
				&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/38.cover-440w.webp 440w, http://localhost:8080/assets/images/38.cover-650w.webp 650w, http://localhost:8080/assets/images/38.cover-960w.webp 960w, http://localhost:8080/assets/images/38.cover-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/38.cover-1200w.webp&quot; width=&quot;1200&quot; height=&quot;683&quot; alt=&quot;Human Interaction Pattern&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;h2 id=&quot;human-interaction-pattern&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/durable-functions-api-durableorchestrationclient-4/#human-interaction-pattern&quot; class=&quot;heading-anchor&quot;&gt;Human Interaction Pattern&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;This is the fourth part of the Durable Functions series where I look into the &lt;code&gt;DurableOrchestrationClient&lt;/code&gt;. In the video I‚Äôll talk about the Human Interaction pattern, which deals with raising events from the client and waiting for events in the orchestrator.&lt;/p&gt;&lt;p&gt;Here‚Äôs the video, please give it a thumbs up if you like it and subscribe to my channel so you‚Äôll be notified of new videos.&lt;/p&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/bJLuyzcTT78&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;h3 id=&quot;resources&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/durable-functions-api-durableorchestrationclient-4/#resources&quot; class=&quot;heading-anchor&quot;&gt;Resources&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;The source code that is used for this demo can be found on &lt;a href=&quot;https://github.com/marcduiker/demos-azure-durable-functions&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;&lt;h3 id=&quot;links-to-other-posts-in-this-series&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/durable-functions-api-durableorchestrationclient-4/#links-to-other-posts-in-this-series&quot; class=&quot;heading-anchor&quot;&gt;Links to other posts in this series&lt;/a&gt;&lt;/h3&gt;&lt;ul class=&quot;list&quot;&gt;&lt;li&gt;&lt;a href=&quot;http://localhost:8080/articles/durable-functions-api-durableorchestrationclient-1&quot;&gt;Starting Orchestrations (DurableOrchestrationClient Part 1)&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://localhost:8080/articles/durable-functions-api-durableorchestrationclient-2&quot;&gt;Retrieving the Orchestration Status (DurableOrchestrationClient Part 2)&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://localhost:8080/articles/durable-functions-api-purge-terminate&quot;&gt;Purge &amp;amp; Terminate Orchestrations (DurableOrchestrationClient Part 3)&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
 			</content>
    </entry><entry>
      <title>My learnings from running the Azure Functions Updates Twitterbot for half a year</title>
      <link href="http://localhost:8080/articles/my-learnings-from-running-the-azure-functions-updates-twitterbot-for-half-a-year/" />
      <updated>2019-09-05T00:00:00Z</updated>
      <id>http://localhost:8080/articles/my-learnings-from-running-the-azure-functions-updates-twitterbot-for-half-a-year/</id>
      <content type="html">
				&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/37.1.azfunctionupdates_diagram_cover-440w.webp 440w, http://localhost:8080/assets/images/37.1.azfunctionupdates_diagram_cover-650w.webp 650w, http://localhost:8080/assets/images/37.1.azfunctionupdates_diagram_cover-960w.webp 960w, http://localhost:8080/assets/images/37.1.azfunctionupdates_diagram_cover-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/37.1.azfunctionupdates_diagram_cover-1200w.webp&quot; width=&quot;1200&quot; height=&quot;550&quot; alt=&quot;AzureFunctionsUpdate TwitterBot architecture&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;h2 id=&quot;some-quick-facts-about-the-twitterbot&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/my-learnings-from-running-the-azure-functions-updates-twitterbot-for-half-a-year/#some-quick-facts-about-the-twitterbot&quot; class=&quot;heading-anchor&quot;&gt;Some quick facts about the Twitterbot&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;In my &lt;a href=&quot;http://localhost:8080/articles/creating-azure-functions-updates-twitterbot&quot;&gt;previous post&lt;/a&gt;, I wrote about why and how I created the Azure Functions Updates Twitterbot. This bot has been posting updates about Azure Functions related GitHub repositories (and Azure Service announcements) since February 2019, so that‚Äôs well over 6 months. It monitors 24 repositories, including itself, and the Azure Service Updates RSS feed, filtered for Azure Functions related updates. The full list of sources is listed &lt;a href=&quot;https://github.com/marcduiker/az-func-updates/blob/master/docs/monitored-sources.md&quot; rel=&quot;noopener&quot;&gt;on GitHub&lt;/a&gt;. The function app that runs the bot has captured 128 GitHub releases, 8 Azure Service Update posts and posted 154 messages to Twitter (the introductory tweets were posted manually).&lt;/p&gt;&lt;p&gt;In this post, I want to highlight some of the actions I took and the insights I‚Äôve got after I put the Twitterbot live. I‚Äôm going to cover: failure &amp;amp; resiliency, monitoring &amp;amp; alerts, performance, and costs.&lt;/p&gt;&lt;h2 id=&quot;1-failure-and-resiliency&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/my-learnings-from-running-the-azure-functions-updates-twitterbot-for-half-a-year/#1-failure-and-resiliency&quot; class=&quot;heading-anchor&quot;&gt;1. Failure &amp;amp; resiliency&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/37.2.azfunctionupdates_diagram-440w.webp 440w, http://localhost:8080/assets/images/37.2.azfunctionupdates_diagram-650w.webp 650w, http://localhost:8080/assets/images/37.2.azfunctionupdates_diagram-960w.webp 960w, http://localhost:8080/assets/images/37.2.azfunctionupdates_diagram-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/37.2.azfunctionupdates_diagram-1200w.webp&quot; width=&quot;1200&quot; height=&quot;395&quot; alt=&quot;Azure Functions Updates component diagram&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;Looking at the component diagram above, three external dependencies are shown; GitHub, Twitter and Azure Table Storage. &lt;em&gt;(Note that this is the initial design of the application, it has been extended later to include the Azure Service Updates RSS feed.)&lt;/em&gt;&lt;/p&gt;&lt;p&gt;Every service has some planned or unplanned downtime, so the function app has to cope with short service interruptions for its dependencies. Luckily the Durable Functions API provides a built-in mechanism to deal with this; it can perform retries on activity functions. Activity functions are called from the orchestrator function with the &lt;em&gt;CallActivityWithRetryAsync&lt;/em&gt; method. Here‚Äôs an example where the &lt;em&gt;GetLatestReleaseFromGitHub&lt;/em&gt; activity function is called:&lt;/p&gt;&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Get most recent release from GitHub&lt;/span&gt;
getLatestReleaseFromGitHubTasks&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;context&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token generic-method&quot;&gt;&lt;span class=&quot;token function&quot;&gt;CallActivityWithRetryAsync&lt;/span&gt;&lt;span class=&quot;token generic class-name&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;RepositoryRelease&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;nameof&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;GetLatestReleaseFromGitHub&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;GetDefaultRetryOptions&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    repositoryConfiguration&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The second argument in this method specifies the &lt;em&gt;RetryOptions&lt;/em&gt;. With that, you can control how many times and with what frequency the activity function is retried when it fails. Since I reuse the same retry options at different places in the orchestrator, I have put it in a separate method:&lt;/p&gt;&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;RetryOptions&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;GetDefaultRetryOptions&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;RetryOptions&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;TimeSpan&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;FromMinutes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Using the above &lt;em&gt;RetryOptions&lt;/em&gt;, when an activity function fails, the Durable Functions framework retries the execution of the activity for a maximum of 3 times with an interval of 1 minute. You can even specify a &lt;em&gt;BackoffCoefficient&lt;/em&gt; to do exponential backoff which slows down the retries after each execution.&lt;/p&gt;&lt;p&gt;There were several occasions where the GitHub API returned a gateway time-out (504), and by having this retry policy in place, the activity function execution always succeeded eventually.&lt;/p&gt;&lt;h2 id=&quot;2-monitoring-and-alerts&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/my-learnings-from-running-the-azure-functions-updates-twitterbot-for-half-a-year/#2-monitoring-and-alerts&quot; class=&quot;heading-anchor&quot;&gt;2. Monitoring &amp;amp; Alerts&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;In case something goes wrong with the function app which is not recoverable with retries I want to receive a notification so I can look into the issue. The function app only delivers value when it‚Äôs posting updates to Twitter. Therefore I‚Äôve configured &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/azure-monitor/platform/alerts-overview&quot; rel=&quot;noopener&quot;&gt;an alert&lt;/a&gt; which sends me an email when the &lt;em&gt;PostUpdate&lt;/em&gt; activity function fails 3 times within one hour (equal to the maximum amount of retries). The image below shows the alert configuration:&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/37.3.alert-configuration-440w.webp 440w, http://localhost:8080/assets/images/37.3.alert-configuration-650w.webp 650w, http://localhost:8080/assets/images/37.3.alert-configuration-960w.webp 960w, http://localhost:8080/assets/images/37.3.alert-configuration-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/37.3.alert-configuration-1200w.webp&quot; width=&quot;1200&quot; height=&quot;683&quot; alt=&quot;Alert configuration&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;Notice that the top right shows a chart with the selected signal events in a time window. In this case, it shows 6 occasions of &lt;em&gt;PostUpdate&lt;/em&gt; activity failures within one week. I found this graph quite helpful to look for meaningful signals.&lt;/p&gt;&lt;p&gt;When &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/azure-monitor/app/app-insights-overview&quot; rel=&quot;noopener&quot;&gt;Application Insights&lt;/a&gt; is enabled for the function app, there are many options for signal selection when configuring the condition of the alert. As can be seen in the image below, the success rate, failure rate, and min/max/avg durations of the functions can be chosen as the signal source:&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/37.4.configure-signal-logic-440w.webp 440w, http://localhost:8080/assets/images/37.4.configure-signal-logic-650w.webp 650w, http://localhost:8080/assets/images/37.4.configure-signal-logic-832w.webp 832w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/37.4.configure-signal-logic-832w.webp&quot; width=&quot;832&quot; height=&quot;898&quot; alt=&quot;Signal selection&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;h2 id=&quot;3-performance&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/my-learnings-from-running-the-azure-functions-updates-twitterbot-for-half-a-year/#3-performance&quot; class=&quot;heading-anchor&quot;&gt;3. Performance&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;This function app is a very low volume application. It is triggered once every hour, which results in about 51k function executions per month. Even though a high volume or performance is not of my concern in this situation, it is interesting to see how the function app and its dependencies perform. The &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/azure-monitor/app/app-map&quot; rel=&quot;noopener&quot;&gt;Application Map&lt;/a&gt; below shows the connections from the function app in the center to its dependent resources. The data shown is aggregated for 24 hours:&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/37.5.application-map-440w.webp 440w, http://localhost:8080/assets/images/37.5.application-map-650w.webp 650w, http://localhost:8080/assets/images/37.5.application-map-960w.webp 960w, http://localhost:8080/assets/images/37.5.application-map-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/37.5.application-map-1200w.webp&quot; width=&quot;1200&quot; height=&quot;913&quot; alt=&quot;Application map&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;The first time I looked at the Application Map it struck me that there were only 22 instances of the function app. I expected 24 instances since the function app runs every hour. However, it appears that instances are sometimes reused. In this case, two instances had been reused, which explains the 22 individual instances over 24 hours.&lt;/p&gt;&lt;p&gt;The calls to the &lt;a href=&quot;http://localhost:8080/articles/my-learnings-from-running-the-azure-functions-updates-twitterbot-for-half-a-year/azurecomcdn.azureedge.net/en-us/updates/feed/&quot;&gt;Azure Service Updates RSS feed&lt;/a&gt; take the longest, 1 sec on average. The calls to Azure Table storage and Queue storage are the fastest, 148.6ms and 109.7ms on average.&lt;/p&gt;&lt;p&gt;Let‚Äôs look deeper into the performance of the GitHub and Twitter HTTP APIs. Here‚Äôs a chart that shows the average duration of the HTTP calls in August:&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/37.6.dependency-reponse-time-440w.webp 440w, http://localhost:8080/assets/images/37.6.dependency-reponse-time-650w.webp 650w, http://localhost:8080/assets/images/37.6.dependency-reponse-time-960w.webp 960w, http://localhost:8080/assets/images/37.6.dependency-reponse-time-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/37.6.dependency-reponse-time-1200w.webp&quot; width=&quot;1200&quot; height=&quot;1122&quot; alt=&quot;Average duration HTTP APIs&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;I recommend looking at these dependency response time charts because they can reveal trends about the performance of the dependencies over time. In this case, there is an apparent increase in duration around 11 to 13 Aug (GitHub was slower in its response then) and after that, the average duration stabilizes around 0.8s.&lt;/p&gt;&lt;p&gt;Looking at the duration distribution of all calls, we see a large spread ranging from 120ms to 2.9s:&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/37.7.durationdistribution-httpapis-440w.webp 440w, http://localhost:8080/assets/images/37.7.durationdistribution-httpapis-650w.webp 650w, http://localhost:8080/assets/images/37.7.durationdistribution-httpapis-960w.webp 960w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/37.7.durationdistribution-httpapis-960w.webp&quot; width=&quot;960&quot; height=&quot;546&quot; alt=&quot;Duration distribution for HTTP calls to GitHub and Twitter&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;There‚Äôs nothing I can do about the performance of the external dependencies, but it is important to realize that calls to other systems are never constant. The network is not 100% reliable and latency is never 0. I recommend reading about the &lt;a href=&quot;http://www.rgoarchitects.com/Files/fallacies.pdf&quot; rel=&quot;noopener&quot;&gt;&lt;em&gt;fallacies of distributed computing&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Something which is under my control are the functions I wrote myself. Here‚Äôs the distribution chart for the ReleaseUpdateOrchestration function:&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/37.8.durationdistribution-orchestration-440w.webp 440w, http://localhost:8080/assets/images/37.8.durationdistribution-orchestration-650w.webp 650w, http://localhost:8080/assets/images/37.8.durationdistribution-orchestration-960w.webp 960w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/37.8.durationdistribution-orchestration-960w.webp&quot; width=&quot;960&quot; height=&quot;546&quot; alt=&quot;Duration distribution for ReleaseUpdateOrchestration&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;Again there is a wide distribution of durations. Part of this variance is due to performance differences across function app instances, but another factor is that orchestrator functions are replayed several times and each time they proceed further in the orchestrator code and take longer to complete. I plan to do a more thorough investigation of how significant this effect is.&lt;/p&gt;&lt;h2 id=&quot;4-costs&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/my-learnings-from-running-the-azure-functions-updates-twitterbot-for-half-a-year/#4-costs&quot; class=&quot;heading-anchor&quot;&gt;4. Costs&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I wanted a cheap solution for this bot. I‚Äôm running this application as a personal side project and no-one else is paying for it. I made a rough calculation up front and realized that the cost would be minimal since the first 1 million executions for the Azure Functions consumption plan &lt;a href=&quot;https://azure.microsoft.com/en-us/pricing/details/functions/&quot; rel=&quot;noopener&quot;&gt;are free&lt;/a&gt;. In addition, I‚Äôm using a tiny set of data (repository, release, and announcement information) which is stored in Azure Table Storage, which is &lt;a href=&quot;https://azure.microsoft.com/en-us/pricing/details/storage/tables/&quot; rel=&quot;noopener&quot;&gt;very cheap to use&lt;/a&gt;.&lt;/p&gt;&lt;h3 id=&quot;cost-breakdown&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/my-learnings-from-running-the-azure-functions-updates-twitterbot-for-half-a-year/#cost-breakdown&quot; class=&quot;heading-anchor&quot;&gt;Cost breakdown&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;When we look at the accumulated costs of the resource group since its inception, it‚Äôs clear the costs are extremely low, only 1.22 Euro from Feb-Aug 2019.&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/37.9.cost-analysis-440w.webp 440w, http://localhost:8080/assets/images/37.9.cost-analysis-650w.webp 650w, http://localhost:8080/assets/images/37.9.cost-analysis-960w.webp 960w, http://localhost:8080/assets/images/37.9.cost-analysis-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/37.9.cost-analysis-1200w.webp&quot; width=&quot;1200&quot; height=&quot;681&quot; alt=&quot;Cost analysis&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;The bright-green part of the chart is the actual costs until the 1st of September. The lighter green is the forecast costs. I think the forecast is a bit on the high side, there aren‚Äôt any new GitHub repositories to monitor (although I‚Äôm looking to include other sources) and the number of releases is unlikely to change drastically. Nevertheless, it‚Äôs a nice feature to have this forecast.&lt;/p&gt;&lt;p&gt;The three donut charts below are different cost breakdowns. The one on the left is per &lt;em&gt;Meter category&lt;/em&gt; which is comparable with the different service types. The service which is most costly (1.21 EUR) is the storage account.&lt;/p&gt;&lt;p&gt;The middle donut chart breaks the cost down per &lt;em&gt;Meter subcategory&lt;/em&gt;; this is already more insightful because it shows that storage queues are the highest cost. It is important to realize that Durable Functions relies heavily on queues to schedule the orchestrator and activity functions. So this cost is explainable but might be unexpected if one is not aware of the inner workings of Durable Functions.&lt;/p&gt;&lt;p&gt;Finally, on the right, the cost is broken down per &lt;em&gt;Meter&lt;/em&gt;. Some of this information is clear such as &lt;em&gt;lrs data stored&lt;/em&gt; (LRS=locally redundant storage), but others are a bit more cryptic, like &lt;em&gt;class 1&lt;/em&gt; and &lt;em&gt;class 2&lt;/em&gt; operations. Microsoft made this classification to group certain operations together which have equal cost. &lt;em&gt;Class 1&lt;/em&gt; is related to create, put, update, and delete operations on queue messages. &lt;em&gt;Class 2&lt;/em&gt; is related to get and peek operations on messages.&lt;/p&gt;&lt;h2 id=&quot;learnings&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/my-learnings-from-running-the-azure-functions-updates-twitterbot-for-half-a-year/#learnings&quot; class=&quot;heading-anchor&quot;&gt;Learnings&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I had the opportunity to attend the &lt;em&gt;Advanced Distributed Systems Design course&lt;/em&gt; by &lt;a href=&quot;https://twitter.com/udidahan&quot; rel=&quot;noopener&quot;&gt;Udi Dahan&lt;/a&gt; earlier this year and that was really an eye-opener. It really helped me to understand the fallacies of distributed computing better and how to act on them. The Twitterbot I made is a very small application and has little impact in case it does not work, but it proved to be a nice playground to put some learnings into practice.&lt;/p&gt;&lt;ol class=&quot;list&quot;&gt;&lt;li&gt;&lt;p&gt;Failures are inevitable, so you better be prepared to have the system cope with it where possible and have a good process &amp;amp; tooling in place to respond to issues. In my case, I had build &amp;amp; release pipelines configured in Azure DevOps from the start, which enabled automated unit testing and pushing fixes to production quickly.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;You need monitoring and alerts setup when you‚Äôre running in production; otherwise, you‚Äôre blind to anything that happens. Try to identify a small set of most important metrics and only put alerts on those.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;To really understand how your solution is performing you need to see how it‚Äôs running in production. Enable Application Insights and spend a good amount of time navigating through the various blades in the Azure Portal. The Application Map, Failures and Performance blades are easy to get started with and provide a wealth of information.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;The Azure Functions Consumption plan combined with table/blob storage is cheap for low to medium volume workloads. Make an effort in calculating the function executions up-front, so you have an educated guess if a Consumption plan or App Service plan is best for your situation. Note that by using Durable Functions, you‚Äôll pay a bit more due to queue and table storage usage and more function executions. However, don‚Äôt let this hold you back. The Durable Functions framework provides many great features out of the box, which you don‚Äôt need to write and maintain yourself. So I‚Äôm pretty confident the benefits outweigh the costs.&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 id=&quot;open-source&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/my-learnings-from-running-the-azure-functions-updates-twitterbot-for-half-a-year/#open-source&quot; class=&quot;heading-anchor&quot;&gt;Open source&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The code for the Twitterbot is on &lt;a href=&quot;https://github.com/marcduiker/az-func-updates&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt; so if you want to look at the details feel free to clone or fork it. I have plans to extend the bot with &lt;a href=&quot;https://github.com/marcduiker/az-func-updates/issues&quot; rel=&quot;noopener&quot;&gt;more features&lt;/a&gt; if you have additional ideas, feel free to add those as issues or submit a PR üòÉ.&lt;/p&gt;
 			</content>
    </entry><entry>
      <title>Discovering the Durable Functions API - Purge &amp; Terminate Orchestrations (DurableOrchestrationClient part 3)</title>
      <link href="http://localhost:8080/articles/durable-functions-api-purge-terminate/" />
      <updated>2019-08-12T00:00:00Z</updated>
      <id>http://localhost:8080/articles/durable-functions-api-purge-terminate/</id>
      <content type="html">
				&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/36.purge-terminate-cover-440w.webp 440w, http://localhost:8080/assets/images/36.purge-terminate-cover-650w.webp 650w, http://localhost:8080/assets/images/36.purge-terminate-cover-900w.webp 900w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/36.purge-terminate-cover-900w.webp&quot; width=&quot;900&quot; height=&quot;381&quot; alt=&quot;Methods in DurableOrchestrationClientBase&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;h2 id=&quot;durableorchestrationclientbase-class-purge-and-terminate&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/durable-functions-api-purge-terminate/#durableorchestrationclientbase-class-purge-and-terminate&quot; class=&quot;heading-anchor&quot;&gt;DurableOrchestrationClient(Base) class - Purge &amp;amp; Terminate&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;This post is the third part of a series of blogs/vlogs to discover the Durable Functions API.&lt;/p&gt;&lt;p&gt;In the video linked below, I‚Äôm looking into the functionality from the &lt;a href=&quot;https://github.com/Azure/azure-functions-durable-extension/blob/master/src/WebJobs.Extensions.DurableTask/DurableOrchestrationClientBase.cs&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;DurableOrchestrationClient&lt;/code&gt;(&lt;code&gt;Base&lt;/code&gt;)&lt;/a&gt; class which is used to:&lt;/p&gt;&lt;ul class=&quot;list&quot;&gt;&lt;li&gt;Purge the history of orchestration instances&lt;/li&gt;&lt;li&gt;Terminate a running orchestration&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&quot;purging&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/durable-functions-api-purge-terminate/#purging&quot; class=&quot;heading-anchor&quot;&gt;Purging&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Purging the history of orchestration instances means deleting the records from table storage. I recommend doing this regularly, for instance using timer triggered function, so you won‚Äôt clutter up your storage account with gigabytes of data you likely don‚Äôt need. I usually remove all completed instances older than a week but keep the failed, canceled and terminated ones a bit longer. Make sure you don‚Äôt inadvertently purge the running and pending instances!&lt;/p&gt;&lt;p&gt;There are two methods to purge the history of orchestration instances. The first method listed below deletes the history for multiple orchestration instances. The method requires a DateTime range and a collection of &lt;code&gt;OrchestrationStatus&lt;/code&gt; enum values. These arguments act as a filter, so only the instance history within the DateTime range and selected statuses are purged:&lt;/p&gt;&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token return-type class-name&quot;&gt;Task&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;PurgeHistoryResult&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;PurgeInstanceHistoryAsync&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;DateTime&lt;/span&gt; createdTimeFrom&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 
    &lt;span class=&quot;token class-name&quot;&gt;DateTime&lt;span class=&quot;token punctuation&quot;&gt;?&lt;/span&gt;&lt;/span&gt; createdTimeTo&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 
    &lt;span class=&quot;token class-name&quot;&gt;IEnumerable&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;OrchestrationStatus&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; runtimeStatus&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The second method deletes the history of a single orchestration instance:&lt;/p&gt;&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token return-type class-name&quot;&gt;Task&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;PurgeHistoryResult&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;PurgeInstanceHistoryAsync&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt; instanceId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;termination&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/durable-functions-api-purge-terminate/#termination&quot; class=&quot;heading-anchor&quot;&gt;Termination&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Terminating an orchestration instance means you stop a running orchestration. You only change the state of the instance. The instance history is still available in table storage. Using this method should only be used in exceptional cases. Perhaps you have an orchestration with a bug, so it keeps running forever, and you want it to stop.&lt;/p&gt;&lt;p&gt;The method requires an orchestration instance ID and a reason why you are stopping the instance:&lt;/p&gt;&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token return-type class-name&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;TerminateAsync&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt; instanceId&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt; reason&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;video&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/durable-functions-api-purge-terminate/#video&quot; class=&quot;heading-anchor&quot;&gt;Video&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Here‚Äôs the video, please give it a thumbs up if you like it and subscribe to my channel if you haven‚Äôt done so already:&lt;/p&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/ePPEcNOzlnk&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;h3 id=&quot;resources&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/durable-functions-api-purge-terminate/#resources&quot; class=&quot;heading-anchor&quot;&gt;Resources&lt;/a&gt;&lt;/h3&gt;&lt;ul class=&quot;list&quot;&gt;&lt;li&gt;GitHub repo: &lt;a href=&quot;https://github.com/marcduiker/demos-azure-durable-functions&quot; rel=&quot;noopener&quot;&gt;github.com/marcduiker/demos-azure-durable-functions&lt;/a&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&quot;links-to-other-posts-in-this-series&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/durable-functions-api-purge-terminate/#links-to-other-posts-in-this-series&quot; class=&quot;heading-anchor&quot;&gt;Links to other posts in this series&lt;/a&gt;&lt;/h3&gt;&lt;ul class=&quot;list&quot;&gt;&lt;li&gt;&lt;a href=&quot;http://localhost:8080/articles/durable-functions-api-durableorchestrationclient-1&quot;&gt;Starting Orchestrations (DurableOrchestrationClient Part 1)&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://localhost:8080/articles/durable-functions-api-durableorchestrationclient-2&quot;&gt;Retrieving the Orchestration Status (DurableOrchestrationClient Part 2)&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Purge &amp;amp; Terminate Orchestrations (DurableOrchestrationClient Part 3)&lt;/li&gt;&lt;/ul&gt;
 			</content>
    </entry><entry>
      <title>Creating the Azure Functions Updates Twitterbot</title>
      <link href="http://localhost:8080/articles/creating-azure-functions-updates-twitterbot/" />
      <updated>2019-03-03T00:00:00Z</updated>
      <id>http://localhost:8080/articles/creating-azure-functions-updates-twitterbot/</id>
      <content type="html">
				&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/35.1.azfuncupdates_twitter-440w.webp 440w, http://localhost:8080/assets/images/35.1.azfuncupdates_twitter-650w.webp 650w, http://localhost:8080/assets/images/35.1.azfuncupdates_twitter-960w.webp 960w, http://localhost:8080/assets/images/35.1.azfuncupdates_twitter-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/35.1.azfuncupdates_twitter-1200w.webp&quot; width=&quot;1200&quot; height=&quot;699&quot; alt=&quot;Azure Functions Updates component diagram&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;h2 id=&quot;tl;dr&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/creating-azure-functions-updates-twitterbot/#tl;dr&quot; class=&quot;heading-anchor&quot;&gt;TL;DR&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Go to &lt;a href=&quot;https://twitter.com/az_func_updates&quot; rel=&quot;noopener&quot;&gt;https://twitter.com/az_func_updates&lt;/a&gt; and follow that account to stay up to date with new Azure Functions releases!&lt;/p&gt;&lt;h2 id=&quot;what-im-trying-to-solve&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/creating-azure-functions-updates-twitterbot/#what-im-trying-to-solve&quot; class=&quot;heading-anchor&quot;&gt;What I‚Äôm trying to solve&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/azure-functions/&quot; rel=&quot;noopener&quot;&gt;Azure Functions&lt;/a&gt; ecosystem consists of a lot of moving parts. There‚Äôs the runtime, core tools, VS templates, Webjobs SDK and its dozen or so extensions, definitions for writing functions using TypeScript and much more.&lt;/p&gt;&lt;p&gt;As a developer, it‚Äôs important you are aware of the latest releases and what is compatible with one another. I‚Äôve spent quite some time troubleshooting incompatible runtimes and packages in the past, and it would be great if this experience can be improved.&lt;/p&gt;&lt;h2 id=&quot;the-idea&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/creating-azure-functions-updates-twitterbot/#the-idea&quot; class=&quot;heading-anchor&quot;&gt;The idea&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I was thinking about a way to notify developers about new releases related to Azure Functions. Almost all of the Azure Functions components are on GitHub so I can use the &lt;a href=&quot;https://developer.github.com/&quot; rel=&quot;noopener&quot;&gt;GitHub API&lt;/a&gt; to check for latest releases.&lt;/p&gt;&lt;p&gt;Since the IT community is very active on Twitter that can be the communication channel, so the idea of an &lt;a href=&quot;https://twitter.com/az_func_updates&quot; rel=&quot;noopener&quot;&gt;Azure Functions Updates Twitterbot&lt;/a&gt; was born.&lt;/p&gt;&lt;p&gt;Surely this does not solve the issue of dealing with incompatible components, but it does help a bit in spreading the information about new releases and knowing when to update which exact piece of the puzzle.&lt;/p&gt;&lt;h2 id=&quot;the-implementation&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/creating-azure-functions-updates-twitterbot/#the-implementation&quot; class=&quot;heading-anchor&quot;&gt;The implementation&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Since I‚Äôm a big fan of Azure Functions myself, I wanted to use this service as the backend for the Twitterbot. Logic Apps could also have been a valid option for a part of it, but I prefer to have local debugging and testing which is easily done with Azure Functions.&lt;/p&gt;&lt;p&gt;The design of the application is as follows:&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/35.2.azfunctionupdates_diagram-440w.webp 440w, http://localhost:8080/assets/images/35.2.azfunctionupdates_diagram-650w.webp 650w, http://localhost:8080/assets/images/35.2.azfunctionupdates_diagram-960w.webp 960w, http://localhost:8080/assets/images/35.2.azfunctionupdates_diagram-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/35.2.azfunctionupdates_diagram-1200w.webp&quot; width=&quot;1200&quot; height=&quot;395&quot; alt=&quot;Azure Functions Updates component diagram&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;h3 id=&quot;storage-azure-table-storage&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/creating-azure-functions-updates-twitterbot/#storage-azure-table-storage&quot; class=&quot;heading-anchor&quot;&gt;Storage: Azure Table Storage&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;The application needs to store two things:&lt;/p&gt;&lt;ol class=&quot;list&quot;&gt;&lt;li&gt;The GitHub repositories to check for new releases.&lt;/li&gt;&lt;li&gt;The latest release for each of the repositories to compare against.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Both require very little storage. I decided on using Azure Table Storage since that is easy to setup &amp;amp; use and it is also very performant.&lt;/p&gt;&lt;p&gt;The repositories to check are stored in the &lt;code&gt;RepositoryConfigurations&lt;/code&gt; table:&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/35.3.repository_configurations-440w.webp 440w, http://localhost:8080/assets/images/35.3.repository_configurations-650w.webp 650w, http://localhost:8080/assets/images/35.3.repository_configurations-960w.webp 960w, http://localhost:8080/assets/images/35.3.repository_configurations-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/35.3.repository_configurations-1200w.webp&quot; width=&quot;1200&quot; height=&quot;249&quot; alt=&quot;Azure Storage Table with repository configurations&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;The release information retrieved from GitHub is stored in the &lt;code&gt;Releases&lt;/code&gt; table:&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/35.4.releases-440w.webp 440w, http://localhost:8080/assets/images/35.4.releases-650w.webp 650w, http://localhost:8080/assets/images/35.4.releases-960w.webp 960w, http://localhost:8080/assets/images/35.4.releases-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/35.4.releases-1200w.webp&quot; width=&quot;1200&quot; height=&quot;250&quot; alt=&quot;Azure Storage Table with release info from GitHub&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;I‚Äôm not storing the entire GitHub Release object, only the properties I need (or plan to use soon).&lt;/p&gt;&lt;h3 id=&quot;compute-azure-functions&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/creating-azure-functions-updates-twitterbot/#compute-azure-functions&quot; class=&quot;heading-anchor&quot;&gt;Compute: Azure Functions&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;As mentioned before I‚Äôm using Azure Functions for the compute part of this application. In specific I‚Äôm using the &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/azure-functions/durable/durable-functions-overview&quot; rel=&quot;noopener&quot;&gt;Durable Functions&lt;/a&gt; extension to control the flow of the application. A timer trigger starts the &lt;a href=&quot;https://github.com/marcduiker/az-func-updates/blob/master/src/AzureFunctionsUpdates/Orchestrations/ReleaseUpdateOrchestration.cs&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;ReleaseUpdateOrchestration&lt;/code&gt;&lt;/a&gt; function each hour.&lt;/p&gt;&lt;p&gt;The flow (in pseudo code) is as follows:&lt;/p&gt;&lt;pre class=&quot;language-plaintext&quot;&gt;&lt;code class=&quot;language-plaintext&quot;&gt;- GetRepositoryConfigurations
- for each of the repositories:
    - GetLatestReleaseFromGitHub
    - GetLatestReleaseFromHistory
- for each of the repositories:
    - if release from GitHub is not equal to release from History
        - SaveLatestRelease
        - PostUpdate&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The orchestrator function uses the fan-out/fan-in pattern since it can call the same activity functions for each of the configured repositories in parallel.&lt;/p&gt;&lt;h3 id=&quot;github-api&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/creating-azure-functions-updates-twitterbot/#github-api&quot; class=&quot;heading-anchor&quot;&gt;GitHub API&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;For the GitHub integration, I‚Äôm using &lt;a href=&quot;https://github.com/octokit/octokit.net&quot; rel=&quot;noopener&quot;&gt;Octokit&lt;/a&gt;, an excellent GitHub API client library for .NET.&lt;/p&gt;&lt;p&gt;The usage is the following:&lt;/p&gt;&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; client &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;GitHubClient&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;ProductHeaderValue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;SomeApplicationIdentifier&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; latestRelease &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; client&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Repository&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Release&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;GetLatest&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    repoConfiguration&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;RepositoryOwner&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    repoConfiguration&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;RepositoryName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I‚Äôm doing unauthenticated requests which means the application is &lt;a href=&quot;https://developer.github.com/v3/#rate-limiting&quot; rel=&quot;noopener&quot;&gt;rate limited at 60 requests per hour&lt;/a&gt;. I‚Äôm far from that number of repositories to check, but it‚Äôs good to be aware this doesn‚Äôt scale very well. For authenticated requests, the rate limiting is set much higher, at 5000 requests per hour.&lt;/p&gt;&lt;h3 id=&quot;twitter-api&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/creating-azure-functions-updates-twitterbot/#twitter-api&quot; class=&quot;heading-anchor&quot;&gt;Twitter API&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;To have an application post tweets, you need a Twitter developer account and set up a Twitter application. There is quite some documentation about this (almost too much), but it‚Äôs quite easy to follow when you go through the &lt;a href=&quot;https://developer.twitter.com/en/docs/basics/getting-started&quot; rel=&quot;noopener&quot;&gt;getting started docs&lt;/a&gt;. You basically need to fill in a couple of online forms and promise you won‚Äôt do any evil with you Twitterbot.&lt;/p&gt;&lt;p&gt;To post the updates to Twitter from my function app I‚Äôm using &lt;a href=&quot;https://github.com/linvi/tweetinvi&quot; rel=&quot;noopener&quot;&gt;Tweetinvi&lt;/a&gt;. I found this Twitter client library for .NET Core very easy to use:&lt;/p&gt;&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; creds &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;TwitterCredentials&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
     consumerApiKey&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 
     consumerApiSecret&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 
     accessToken&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 
     accessTokenSecret&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; tweetMessage &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;CreateMessage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;newRelease&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; tweet &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Auth&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ExecuteOperationWithCredentials&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;creds&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; Tweet&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;PublishTweet&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;tweetMessage&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;overall-development-experience&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/creating-azure-functions-updates-twitterbot/#overall-development-experience&quot; class=&quot;heading-anchor&quot;&gt;Overall development experience&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I built this application in about 6 evenings over the last month. I find it quite amazing that thanks to the work of others, who have built these cloud services and client libraries, I can make something like this in such little time.&lt;/p&gt;&lt;p&gt;Development was mostly done in Visual Studio 2019 Preview and a bit of VS Code. I‚Äôve set up a CI/CD pipeline in Azure DevOps so as soon as I merge to master a new release is built and deployed to Azure.&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/35.5.azuredevops-440w.webp 440w, http://localhost:8080/assets/images/35.5.azuredevops-650w.webp 650w, http://localhost:8080/assets/images/35.5.azuredevops-960w.webp 960w, http://localhost:8080/assets/images/35.5.azuredevops-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/35.5.azuredevops-1200w.webp&quot; width=&quot;1200&quot; height=&quot;733&quot; alt=&quot;Azure Devops CD pipeline&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;It was certainly an enjoyable experience to make this, and I hope you will benefit from it.&lt;/p&gt;&lt;p&gt;I already have plans to extend the application beyond GitHub release updates. So in time, there will be some significant upgrades.&lt;/p&gt;&lt;h2 id=&quot;resources-and-feedback&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/creating-azure-functions-updates-twitterbot/#resources-and-feedback&quot; class=&quot;heading-anchor&quot;&gt;Resources &amp;amp; feedback&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The full source code of the Azure Functions Updates Twitterbot is found in the &lt;a href=&quot;https://github.com/marcduiker/az-func-updates&quot; rel=&quot;noopener&quot;&gt;az-func-updates&lt;/a&gt; repo on GitHub.&lt;/p&gt;&lt;p&gt;If you have feature requests or suggestions, feel free to add those as an &lt;a href=&quot;https://github.com/marcduiker/az-func-updates/issues&quot; rel=&quot;noopener&quot;&gt;issue&lt;/a&gt;, so we can discuss it.&lt;/p&gt;
 			</content>
    </entry><entry>
      <title>Discovering the Durable Functions API - Retrieving the orchestration status (DurableOrchestrationClient part 2)</title>
      <link href="http://localhost:8080/articles/durable-functions-api-durableorchestrationclient-2/" />
      <updated>2019-02-10T00:00:00Z</updated>
      <id>http://localhost:8080/articles/durable-functions-api-durableorchestrationclient-2/</id>
      <content type="html">
				&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/34.durable-orchestration-clientbase2_900-440w.webp 440w, http://localhost:8080/assets/images/34.durable-orchestration-clientbase2_900-650w.webp 650w, http://localhost:8080/assets/images/34.durable-orchestration-clientbase2_900-900w.webp 900w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/34.durable-orchestration-clientbase2_900-900w.webp&quot; width=&quot;900&quot; height=&quot;380&quot; alt=&quot;Durable Orchestration ClientBase&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;h2 id=&quot;durableorchestrationclientbase-class-retrieving-status&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/durable-functions-api-durableorchestrationclient-2/#durableorchestrationclientbase-class-retrieving-status&quot; class=&quot;heading-anchor&quot;&gt;DurableOrchestrationClient(Base) class - Retrieving status&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;This post is the second part of a series of blogs/vlogs to discover the Durable Functions API.&lt;/p&gt;&lt;p&gt;In the video linked below, I‚Äôm looking into the functionality from the &lt;a href=&quot;https://github.com/Azure/azure-functions-durable-extension/blob/master/src/WebJobs.Extensions.DurableTask/DurableOrchestrationClientBase.cs&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;DurableOrchestrationClient&lt;/code&gt;(&lt;code&gt;Base&lt;/code&gt;)&lt;/a&gt; class, which can be used to retrieve the status of orchestration instances.&lt;/p&gt;&lt;p&gt;These are the methods to retrieve the status of &lt;strong&gt;one&lt;/strong&gt; orchestration and return a &lt;a href=&quot;https://github.com/Azure/azure-functions-durable-extension/blob/master/src/WebJobs.Extensions.DurableTask/DurableOrchestrationStatus.cs&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;DurableOrchestrationStatus&lt;/code&gt;&lt;/a&gt; object:&lt;/p&gt;&lt;ul class=&quot;list&quot;&gt;&lt;li&gt;&lt;code&gt;GetStatusAsync(string instanceId)&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;GetStatusAsync(string instanceId, bool showHistory);&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;GetStatusAsync(string instanceId, bool showHistory, bool showHistoryOutput, bool showInput = true);&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;These are the methods to retrieve the status for &lt;strong&gt;multiple&lt;/strong&gt; orchestrations and they return an &lt;code&gt;IList&amp;lt;DurableOrchestrationStatus&amp;gt;&lt;/code&gt;:&lt;/p&gt;&lt;ul class=&quot;list&quot;&gt;&lt;li&gt;&lt;code&gt;GetStatusAsync(CancellationToken cancellationToken = default(CancellationToken));&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;GetStatusAsync(DateTime createdTimeFrom, DateTime? createdTimeTo, IEnumerable&amp;lt;OrchestrationRuntimeStatus&amp;gt; runtimeStatus, CancellationToken cancellationToken = default(CancellationToken));&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Here‚Äôs the video, please give it a thumbs up if you like it and subscribe to my channel if you haven‚Äôt done so already:&lt;/p&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/d5fsidj_EDs&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;h3 id=&quot;resources&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/durable-functions-api-durableorchestrationclient-2/#resources&quot; class=&quot;heading-anchor&quot;&gt;Resources&lt;/a&gt;&lt;/h3&gt;&lt;ul class=&quot;list&quot;&gt;&lt;li&gt;GitHub repo: &lt;a href=&quot;https://github.com/marcduiker/demos-azure-durable-functions&quot; rel=&quot;noopener&quot;&gt;github.com/marcduiker/demos-azure-durable-functions&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;Microsoft docs: &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/azure-functions/durable/durable-functions-http-api&quot; rel=&quot;noopener&quot;&gt;Durable Functions HTTP API&lt;/a&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&quot;links-to-other-posts-in-this-series&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/durable-functions-api-durableorchestrationclient-2/#links-to-other-posts-in-this-series&quot; class=&quot;heading-anchor&quot;&gt;Links to other posts in this series&lt;/a&gt;&lt;/h3&gt;&lt;ul class=&quot;list&quot;&gt;&lt;li&gt;&lt;a href=&quot;http://localhost:8080/articles/durable-functions-api-durableorchestrationclient-1&quot;&gt;Starting Orchestrations (DurableOrchestrationClient Part 1)&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Retrieving the Orchestration Status (DurableOrchestrationClient Part 2)&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://localhost:8080/articles/durable-functions-api-purge-terminate&quot;&gt;Purge &amp;amp; Terminate Orchestrations (DurableOrchestrationClient Part 3)&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
 			</content>
    </entry><entry>
      <title>Discovering the Durable Functions API - Starting orchestrations (DurableOrchestrationClient part 1)</title>
      <link href="http://localhost:8080/articles/durable-functions-api-durableorchestrationclient-1/" />
      <updated>2019-01-07T00:00:00Z</updated>
      <id>http://localhost:8080/articles/durable-functions-api-durableorchestrationclient-1/</id>
      <content type="html">
				&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/33.durable-orchestration-clientbase1_900-440w.webp 440w, http://localhost:8080/assets/images/33.durable-orchestration-clientbase1_900-650w.webp 650w, http://localhost:8080/assets/images/33.durable-orchestration-clientbase1_900-900w.webp 900w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/33.durable-orchestration-clientbase1_900-900w.webp&quot; width=&quot;900&quot; height=&quot;380&quot; alt=&quot;Durable Orchestration ClientBase&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;h2 id=&quot;durableorchestrationclientbase-class-starting-and-waiting-for-completion&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/durable-functions-api-durableorchestrationclient-1/#durableorchestrationclientbase-class-starting-and-waiting-for-completion&quot; class=&quot;heading-anchor&quot;&gt;DurableOrchestrationClient(Base) class - Starting &amp;amp; waiting for completion&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;This post is the first part of a series of blogs/vlogs to discover the Durable Functions API.&lt;/p&gt;&lt;p&gt;In the video linked below, I‚Äôm looking into methods from the &lt;a href=&quot;https://github.com/Azure/azure-functions-durable-extension/blob/master/src/WebJobs.Extensions.DurableTask/DurableOrchestrationClientBase.cs&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;DurableOrchestrationClient&lt;/code&gt;(&lt;code&gt;Base&lt;/code&gt;)&lt;/a&gt; class on how to start a new orchestration instance and how to retrieve the status and the result of the instance:&lt;/p&gt;&lt;ul class=&quot;list&quot;&gt;&lt;li&gt;&lt;code&gt;StartNewAsync(string orchestratorFunctionName, object input)&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;StartNewAsync(string orchestratorFunctionName, string instanceId, object input)&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;CreateCheckStatusResponse(HttpRequestMessage request, string instanceId)&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;WaitForCompletionOrCreateCheckStatusResponseAsync(HttpRequestMessage request, string instanceId)&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;WaitForCompletionOrCreateCheckStatusResponseAsync(HttpRequestMessage request, string instanceId, TimeSpan timeout)&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;WaitForCompletionOrCreateCheckStatusResponseAsync(HttpRequestMessage request, string instanceId, TimeSpan timeout, TimeSpan retryInterval)&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Here‚Äôs the video, please give it a thumbs up if you like it and subscribe to my channel so you‚Äôll be notified of new videos:&lt;/p&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/mRDesdK3W8Q&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;h3 id=&quot;resources&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/durable-functions-api-durableorchestrationclient-1/#resources&quot; class=&quot;heading-anchor&quot;&gt;Resources&lt;/a&gt;&lt;/h3&gt;&lt;ul class=&quot;list&quot;&gt;&lt;li&gt;GitHub repo: &lt;a href=&quot;https://github.com/marcduiker/demos-azure-durable-functions&quot; rel=&quot;noopener&quot;&gt;github.com/marcduiker/demos-azure-durable-functions&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;Microsoft docs: &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/azure-functions/durable/durable-functions-http-api&quot; rel=&quot;noopener&quot;&gt;Durable Functions HTTP API&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;Microsoft docs: &lt;a href=&quot;https://docs.microsoft.com/en-us/aspnet/web-api/overview/web-api-routing-and-actions/attribute-routing-in-web-api-2#optional-uri-parameters-and-default-values&quot; rel=&quot;noopener&quot;&gt;Optional uri parameters and default values&lt;/a&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&quot;links-to-other-posts-in-this-series&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/durable-functions-api-durableorchestrationclient-1/#links-to-other-posts-in-this-series&quot; class=&quot;heading-anchor&quot;&gt;Links to other posts in this series&lt;/a&gt;&lt;/h3&gt;&lt;ul class=&quot;list&quot;&gt;&lt;li&gt;Starting orchestrations (DurableOrchestrationClient Part 1)&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://localhost:8080/articles/durable-functions-api-durableorchestrationclient-2&quot;&gt;Retrieving the orchestration status (DurableOrchestrationClient Part 2)&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://localhost:8080/articles/durable-functions-api-purge-terminate&quot;&gt;Purge &amp;amp; Terminate Orchestrations (DurableOrchestrationClient Part 3)&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
 			</content>
    </entry><entry>
      <title>Durable Functions - The Anatomy of Function Naming</title>
      <link href="http://localhost:8080/articles/the-anatomy-of-function-naming/" />
      <updated>2018-06-21T00:00:00Z</updated>
      <id>http://localhost:8080/articles/the-anatomy-of-function-naming/</id>
      <content type="html">
				&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/32.function-naming-440w.webp 440w, http://localhost:8080/assets/images/32.function-naming-650w.webp 650w, http://localhost:8080/assets/images/32.function-naming-859w.webp 859w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/32.function-naming-859w.webp&quot; width=&quot;859&quot; height=&quot;306&quot; alt=&quot;Anatomy of Functions Naming&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;h2 id=&quot;function-names-in-the-wild&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/the-anatomy-of-function-naming/#function-names-in-the-wild&quot; class=&quot;heading-anchor&quot;&gt;Function Names in the Wild&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Whenever I see examples or implementations of Azure Functions I always see this:&lt;/p&gt;&lt;p&gt;&lt;code&gt;[FunctionName(&quot;myfunction&quot;)]&lt;/code&gt;&lt;/p&gt;&lt;p&gt;Where the function name is present as a direct string literal. I‚Äôm not questioning that it &lt;em&gt;is&lt;/em&gt; a string because that‚Äôs simply the way the &lt;code&gt;FunctionName&lt;/code&gt; attribute works currently. I‚Äôm more concerned how the string got there.&lt;/p&gt;&lt;p&gt;I‚Äôd like to show two ways to refer to function names in a safe and consistent way. This is especially useful when you‚Äôre using &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/azure-functions/durable-functions-overview&quot; rel=&quot;noopener&quot;&gt;Durable Functions&lt;/a&gt; and need to refer to activity function names in your orchestration function.&lt;/p&gt;&lt;h2 id=&quot;literal-strings-and-meaning&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/the-anatomy-of-function-naming/#literal-strings-and-meaning&quot; class=&quot;heading-anchor&quot;&gt;Literal Strings and Meaning&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I admit that I‚Äôve probably been reading too much &lt;em&gt;Code Complete&lt;/em&gt; and &lt;em&gt;Clean Code&lt;/em&gt; in my life because whenever I see literal strings in code I usually get the chills. So I‚Äôm probably overreacting a bit‚Ä¶&lt;/p&gt;&lt;p&gt;What I find most annoying about the direct usage of literal strings in general is that the intent or meaning is usually unclear or ambiguous (aka &lt;a href=&quot;https://en.wikipedia.org/wiki/Magic_string&quot; rel=&quot;noopener&quot;&gt;magic string&lt;/a&gt;).&lt;/p&gt;&lt;p&gt;Although the meaning of the string in the &lt;code&gt;[FunctionName]&lt;/code&gt; attribute is clear, what valid input is for the name is not clear. You need to dig into the &lt;a href=&quot;https://github.com/Azure/azure-webjobs-sdk/blob/9f96d3f1e63ae1241431990f256f1b2e6880167f/src/Microsoft.Azure.WebJobs/FunctionNameAttribute.cs#L34&quot; rel=&quot;noopener&quot;&gt;FunctionNameAttribute.cs&lt;/a&gt; class to find the regex that validates the &lt;code&gt;[FunctionName]&lt;/code&gt; attribute string:&lt;/p&gt;&lt;p&gt;&lt;code&gt;^[a-z][a-z0-9_&#92;-]{0,127}$(?&amp;lt;!^host$)&lt;/code&gt;&lt;/p&gt;&lt;p&gt;‚Ä¶ and then you need to understand the regex as well üòâ.&lt;/p&gt;&lt;p&gt;In addition, you will only be notified of an invalid &lt;code&gt;[FunctionName]&lt;/code&gt; attribute during runtime:&lt;/p&gt;&lt;p&gt;&lt;code&gt;&quot;Orchestrator function &#39;HelloName&#39; failed:&lt;/code&gt;&lt;br&gt;&lt;code&gt;The function &#39;Hello.Activity&#39; doesn&#39;t exist, is disabled, or is not an activity function.&lt;/code&gt;&lt;br&gt;&lt;code&gt;The following are the active activity functions: &#39;...&#39;&quot;&lt;/code&gt;&lt;/p&gt;&lt;p&gt;If we could use a type-safe way of naming functions, invalid names could be detected much earlier.&lt;/p&gt;&lt;h2 id=&quot;naming-is-hard&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/the-anatomy-of-function-naming/#naming-is-hard&quot; class=&quot;heading-anchor&quot;&gt;Naming is Hard&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I definitely agree with &lt;a href=&quot;https://skeptics.stackexchange.com/questions/19836/has-phil-karlton-ever-said-there-are-only-two-hard-things-in-computer-science&quot; rel=&quot;noopener&quot;&gt;Phil Karlton&lt;/a&gt; on that one. It often occurs that I rename a class or method just minutes after I created it.&lt;/p&gt;&lt;p&gt;When it comes to naming functions I always start with a verb followed by a noun related to the domain language. I don‚Äôt mind verbose class or method names as long as they clearly communicate their intent.&lt;/p&gt;&lt;p&gt;For example, I recently updated my Durable Functions demo code where I wrap some calls to &lt;a href=&quot;http://swapi.co&quot; rel=&quot;noopener&quot;&gt;swapi.co&lt;/a&gt; (Star Wars API) in activity functions. Those function names are named &lt;code&gt;GetCharacter&lt;/code&gt;, &lt;code&gt;SearchCharacter&lt;/code&gt;, &lt;code&gt;GetPlanet&lt;/code&gt; and &lt;code&gt;SearchPlanet&lt;/code&gt;. I hope you will agree the intent is clear.&lt;/p&gt;&lt;h2 id=&quot;structuring-orchestration-and-activity-functions&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/the-anatomy-of-function-naming/#structuring-orchestration-and-activity-functions&quot; class=&quot;heading-anchor&quot;&gt;Structuring Orchestration and Activity Functions&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I prefer my orchestration and activity functions to be in separate classes. In addition, I prefer to have each activity function in its own class (and file). For me this brings the following benefits:&lt;/p&gt;&lt;ul class=&quot;list&quot;&gt;&lt;li&gt;Files and classes are kept very small and therefore very readable.&lt;/li&gt;&lt;li&gt;When I add a new activity function I don‚Äôt risk ‚Äòtouching‚Äô other functions (except to call it from the orchestration function of course).&lt;/li&gt;&lt;li&gt;It‚Äôs very easy to locate the individual functions in Visual Studio.&lt;/li&gt;&lt;li&gt;I can use the class name as the &lt;code&gt;FunctionName&lt;/code&gt; identifier! (keep reading‚Ä¶)&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;safe-and-consistent-naming&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/the-anatomy-of-function-naming/#safe-and-consistent-naming&quot; class=&quot;heading-anchor&quot;&gt;Safe and Consistent Naming&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;An orchestration function depends on the implemented activity functions and both types of functions are located in the same Function App. This means we don‚Äôt need to provide string literals separately for the &lt;code&gt;[FunctionName]&lt;/code&gt; in the activity and in the &lt;code&gt;CallActivityAsync()&lt;/code&gt; methods in the orchestration but we can do something better.&lt;/p&gt;&lt;h3 id=&quot;option-1-static-class-with-constants&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/the-anatomy-of-function-naming/#option-1-static-class-with-constants&quot; class=&quot;heading-anchor&quot;&gt;Option 1: Static Class with Constants&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;The most basic option to have consistent naming of functions is to use a static class with string constants. Now both orchestration and activity functions can use that naming class:&lt;/p&gt;&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;DurableFunctions&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Demo&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;DotNetCore&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Basics&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;FunctionName&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt; HelloNameActivity &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;HelloNameActivity&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt; HelloNameOrchestration &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;HelloNameOrchestration&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;DurableFunctions&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Demo&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;DotNetCore&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Basics&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Activities&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;HelloNameActivity&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token attribute&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;FunctionName&lt;/span&gt;&lt;span class=&quot;token attribute-arguments&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;FunctionName&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;HelloNameActivity&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token attribute&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;ActivityTrigger&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;token class-name&quot;&gt;ILogger&lt;/span&gt; logger&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            logger&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;LogInformation&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token interpolation-string&quot;&gt;&lt;span class=&quot;token string&quot;&gt;$&quot;Name: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token expression language-csharp&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token interpolation-string&quot;&gt;&lt;span class=&quot;token string&quot;&gt;$&quot;Hello &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token expression language-csharp&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;!&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I suggest using this option only if you require a function naming convention that is not compatible with your C# class naming convention (e.g. you require hyphens or underscores in the function name).&lt;/p&gt;&lt;p&gt;You could add comments what valid function names are and, even more important, you should add unit tests that fail when invalid names are used. Then at least you know during your CI/CD process that something is wrong.&lt;/p&gt;&lt;h3 id=&quot;option-2-the-power-of-nameof&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/the-anatomy-of-function-naming/#option-2-the-power-of-nameof&quot; class=&quot;heading-anchor&quot;&gt;Option 2: The Power of nameof()&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Since I write only one function per class I do the following when specifying the &lt;code&gt;FunctionName&lt;/code&gt; attribute value:&lt;/p&gt;&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;DurableFunctions&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Demo&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;DotNetCore&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Basics&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Activities&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;HelloNameActivity&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token attribute&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;FunctionName&lt;/span&gt;&lt;span class=&quot;token attribute-arguments&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;nameof&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;HelloNameActivity&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token attribute&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;ActivityTrigger&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;token class-name&quot;&gt;ILogger&lt;/span&gt; logger&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            logger&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;LogInformation&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token interpolation-string&quot;&gt;&lt;span class=&quot;token string&quot;&gt;$&quot;Name: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token expression language-csharp&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token interpolation-string&quot;&gt;&lt;span class=&quot;token string&quot;&gt;$&quot;Hello &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token expression language-csharp&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;!&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;nameof()&lt;/code&gt; expression is available since &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/nameof&quot; rel=&quot;noopener&quot;&gt;C# 6.0&lt;/a&gt; and provides a very clean way to use strings based on class names.&lt;/p&gt;&lt;p&gt;The benefits are that:&lt;/p&gt;&lt;ul class=&quot;list&quot;&gt;&lt;li&gt;I can now refer to an activity function in a strongly typed fashion so renaming/refactoring is less fragile.&lt;/li&gt;&lt;li&gt;I always use names that are valid function names.&lt;/li&gt;&lt;li&gt;I don‚Äôt have to think about creating &lt;strong&gt;two&lt;/strong&gt; names (class and function), just &lt;strong&gt;one&lt;/strong&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The downsides are that:&lt;/p&gt;&lt;ul class=&quot;list&quot;&gt;&lt;li&gt;Function names are limited to valid C# class names.&lt;/li&gt;&lt;li&gt;There can only be one function method per class.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The benefits definitely outweigh the downsides for me.&lt;/p&gt;&lt;h2 id=&quot;which-one-do-you-prefer&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/the-anatomy-of-function-naming/#which-one-do-you-prefer&quot; class=&quot;heading-anchor&quot;&gt;Which one do you prefer?&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;So there you go, two options to refer to your function names in a safe and consistent manner when using Durable Functions.&lt;/p&gt;&lt;p&gt;I‚Äôd like to know which one do you prefer (or maybe you have an alternative), so feel free to reach out to me on &lt;a href=&quot;https://twitter.com/marcduiker&quot; rel=&quot;noopener&quot;&gt;Twitter&lt;/a&gt; or &lt;a href=&quot;https://github.com/marcduiker/demos-azure-durable-functions/issues&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Related to this subject is this issue on Github: &lt;a href=&quot;https://github.com/Azure/azure-functions-core-tools/issues/257&quot; rel=&quot;noopener&quot;&gt;Convention-based FunctionName &amp;amp; HttpTrigger Routes&lt;/a&gt;.&lt;/p&gt;&lt;h2 id=&quot;resources&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/the-anatomy-of-function-naming/#resources&quot; class=&quot;heading-anchor&quot;&gt;Resources&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The full souce code with various demos about Durable Functions can be found in my &lt;a href=&quot;https://github.com/marcduiker/demos-azure-durable-functions&quot; rel=&quot;noopener&quot;&gt;demos-azure-durable-functions repo on GitHub&lt;/a&gt;.&lt;/p&gt;
 			</content>
    </entry><entry>
      <title>Durable Functions on YouTube (part 3) - The Function Chaining Pattern</title>
      <link href="http://localhost:8080/articles/durable-functions-youtube-part3/" />
      <updated>2018-03-06T00:00:00Z</updated>
      <id>http://localhost:8080/articles/durable-functions-youtube-part3/</id>
      <content type="html">
				&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/31.durable-functions-youtube3-440w.webp 440w, http://localhost:8080/assets/images/31.durable-functions-youtube3-650w.webp 650w, http://localhost:8080/assets/images/31.durable-functions-youtube3-960w.webp 960w, http://localhost:8080/assets/images/31.durable-functions-youtube3-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/31.durable-functions-youtube3-1200w.webp&quot; width=&quot;1200&quot; height=&quot;750&quot; alt=&quot;Durable Functions Youtube&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;h2 id=&quot;the-function-chaining-pattern&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/durable-functions-youtube-part3/#the-function-chaining-pattern&quot; class=&quot;heading-anchor&quot;&gt;The Function Chaining Pattern&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;This is the third part of the Durable Functions series. In this video I‚Äôll talk about the function chaining pattern which can be used to create function workflows.&lt;/p&gt;&lt;p&gt;Here‚Äôs the video, please give it a thumbs up if you like it and subscribe to my channel so you‚Äôll be notified of new videos.&lt;/p&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/ARhgG7OeoX0&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;h3 id=&quot;resources&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/durable-functions-youtube-part3/#resources&quot; class=&quot;heading-anchor&quot;&gt;Resources&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;The source code that is used for this demo can be found on &lt;a href=&quot;https://github.com/marcduiker/demos-azure-durable-functions&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
 			</content>
    </entry><entry>
      <title>Durable Functions on YouTube (part 2) - Eternal orchestrations &amp; external events</title>
      <link href="http://localhost:8080/articles/durable-functions-youtube-part2/" />
      <updated>2017-12-01T00:00:00Z</updated>
      <id>http://localhost:8080/articles/durable-functions-youtube-part2/</id>
      <content type="html">
				&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/30.durable-functions-youtube2-440w.webp 440w, http://localhost:8080/assets/images/30.durable-functions-youtube2-650w.webp 650w, http://localhost:8080/assets/images/30.durable-functions-youtube2-960w.webp 960w, http://localhost:8080/assets/images/30.durable-functions-youtube2-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/30.durable-functions-youtube2-1200w.webp&quot; width=&quot;1200&quot; height=&quot;750&quot; alt=&quot;Durable Functions Youtube&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;h2 id=&quot;eternal-orchestrations-and-external-events&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/durable-functions-youtube-part2/#eternal-orchestrations-and-external-events&quot; class=&quot;heading-anchor&quot;&gt;Eternal orchestrations &amp;amp; external events&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;This is the second part of the Durable Functions series. In this video I‚Äôll talk about eternal function orchestrations and external events.&lt;/p&gt;&lt;p&gt;Here‚Äôs the video, please give it a thumbs up if you like it and subscribe to my channel so you‚Äôll be notified of new videos.&lt;/p&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/d73Vl_OHIG4&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;h3 id=&quot;resources&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/durable-functions-youtube-part2/#resources&quot; class=&quot;heading-anchor&quot;&gt;Resources&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;The source code that is used for this demo can be found on &lt;a href=&quot;https://github.com/marcduiker/demos-azure-durable-functions&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
 			</content>
    </entry><entry>
      <title>Azure Functions Tips: Grouping Functions into Function Apps</title>
      <link href="http://localhost:8080/articles/azure-functions-grouping-functions-in-function-apps/" />
      <updated>2017-11-21T00:00:00Z</updated>
      <id>http://localhost:8080/articles/azure-functions-grouping-functions-in-function-apps/</id>
      <content type="html">
				&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/29.serverless-architecture-440w.webp 440w, http://localhost:8080/assets/images/29.serverless-architecture-650w.webp 650w, http://localhost:8080/assets/images/29.serverless-architecture-960w.webp 960w, http://localhost:8080/assets/images/29.serverless-architecture-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/29.serverless-architecture-1200w.webp&quot; width=&quot;1200&quot; height=&quot;632&quot; alt=&quot;Serverless Architecture&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;h2 id=&quot;guidelines-for-function-apps&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/azure-functions-grouping-functions-in-function-apps/#guidelines-for-function-apps&quot; class=&quot;heading-anchor&quot;&gt;Guidelines for Function Apps&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Earlier today I read a tweet where a developer wasn‚Äôt sure when to group several Azure Functions in one Function App. The Azure Function engineers responded swiftly and they‚Äôll extend the official docs with some guidelines in this area soon. I think this is a really interesting topic so let‚Äôs start with a few ideas of my own.&lt;/p&gt;&lt;p&gt;Azure Functions are hosted in a Function App. The following is written in the &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/azure-functions/functions-reference#function-app&quot; rel=&quot;noopener&quot;&gt;Azure documentation&lt;/a&gt;{:target=‚Äú_blank‚Äù} about a Function App:&lt;/p&gt;&lt;p&gt;&lt;em&gt;‚ÄúA function app is comprised of one or more individual functions that are managed together by Azure App Service. All of the functions in a function app share the same pricing plan, continuous deployment and runtime version. Functions written in multiple languages can all share the same function app. Think of a function app as a way to organize and collectively manage your functions.‚Äù&lt;/em&gt;&lt;/p&gt;&lt;p&gt;Sofar so good but should you put all your functions inside one Function App? Or should you put each function inside its own Function App?&lt;/p&gt;&lt;p&gt;You‚Äôre now dealing with a serverless architecture challenge. Let‚Äôs look at some of the aspects involved in order to make an informed decision how to group your functions.&lt;/p&gt;&lt;h3 id=&quot;serverless-architecture-aspects&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/azure-functions-grouping-functions-in-function-apps/#serverless-architecture-aspects&quot; class=&quot;heading-anchor&quot;&gt;Serverless Architecture Aspects&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Here are a couple of aspects which play a big role in deciding a serverless architecture:&lt;/p&gt;&lt;ul class=&quot;list&quot;&gt;&lt;li&gt;Single responsibility principle&lt;/li&gt;&lt;li&gt;Workload distribution&lt;/li&gt;&lt;li&gt;DevOps practices&lt;/li&gt;&lt;li&gt;Resilience&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&quot;single-responsibility-principle&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/azure-functions-grouping-functions-in-function-apps/#single-responsibility-principle&quot; class=&quot;heading-anchor&quot;&gt;Single Responsibility Principle&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;I hope this principle is nothing new, the ‚ÄòS‚Äô in SOLID. As quoted from &lt;a href=&quot;http://localhost:8080/articles/azure-functions-grouping-functions-in-function-apps/(https:/en.wikipedia.org/wiki/Single_responsibility_principle)%7B:target=%22_blank%22%7D&quot;&gt;Wikipedia&lt;/a&gt;:&lt;/p&gt;&lt;p&gt;&lt;em&gt;‚ÄúThe single responsibility principle is a computer programming principle that states that every module or class should have responsibility over a single part of the functionality provided by the software, and that responsibility should be entirely encapsulated by the class.‚Äù&lt;/em&gt;&lt;/p&gt;&lt;p&gt;In my opinion in this serverless era, a grouping of functions (the Function App) is the equivalent of a module or class as described in the quote.&lt;/p&gt;&lt;p&gt;I somewhere heard or read the following related to this principle &lt;em&gt;‚ÄúWhat changes together should live together‚Äù&lt;/em&gt;. I adjusted this a bit and prefer &lt;strong&gt;‚ÄúWhat changes together should be deployed together‚Äù&lt;/strong&gt;. So if a new business functionality requires a change of two functions it means those two functions should exist in the same Function App.&lt;/p&gt;&lt;h3 id=&quot;workload-distribution&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/azure-functions-grouping-functions-in-function-apps/#workload-distribution&quot; class=&quot;heading-anchor&quot;&gt;Workload distribution&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;The workload of your functions also determine how they should be grouped. Let‚Äôs consider a scenario where you have three functions: A, B, and C. The workload across all of them is evenly distributed and the memory consumption across all of them is below the maximum available memory of the Function App (currently 1.5 GB on the consumption plan). In this case you could run all your functions in the same Function App.&lt;/p&gt;&lt;p&gt;Now let‚Äôs consider another scenario: function A receives a much higher workload than B and C and requires a great deal of the available memory. In this case you should consider moving function A to a separate Function App so it can scale independently when the workload is very high. The low workload functions, B and C, can remain in another Function App and won‚Äôt be impacted now by function A.&lt;/p&gt;&lt;h3 id=&quot;devops&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/azure-functions-grouping-functions-in-function-apps/#devops&quot; class=&quot;heading-anchor&quot;&gt;DevOps&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;If you have multiple teams developing, deploying &amp;amp; testing functions then it makes sense to have each team take responsibility of a set of functions in one or more Function Apps. Each team can work independently on their own Function Apps and deployments across teams do not even need to be synced if functions are loosely coupled (e.g. using message queues and agreed interfaces).&lt;/p&gt;&lt;p&gt;Side note: I also suggest having a code repository per Function App so you can get up and running quickly using the built in &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/azure-functions/functions-continuous-deployment&quot; rel=&quot;noopener&quot;&gt;continuous deployment&lt;/a&gt;{:target=‚Äú_blank‚Äù} options. It‚Äôs not as complete as a full CI/CD pipeline in VSTS but it‚Äôs definitely better than nothing.&lt;/p&gt;&lt;h3 id=&quot;resilience&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/azure-functions-grouping-functions-in-function-apps/#resilience&quot; class=&quot;heading-anchor&quot;&gt;Resilience&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Downtime is never a good thing right? So when you design your serverless architecture you need to take into account that some components will eventually fail. The App Service can have a hick-up or some ‚Äòbad code‚Äô has somehow got through your CI/CD pipeline and now runs in production. To minimize the impact of the issue you should consider splitting up your functions in several Function Apps to make them &lt;strong&gt;independently deployable&lt;/strong&gt; and therefore &lt;strong&gt;independently failable&lt;/strong&gt;.&lt;/p&gt;&lt;p&gt;Again I suggest to use messages queues between functions (either in a separate storage account or using Azure Service Bus) so the state is not lost when a Function App goes down (either through failure or regular deployment). As an alternative &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/azure-functions/durable-functions-overview&quot; rel=&quot;noopener&quot;&gt;Durable Functions&lt;/a&gt;{:target=‚Äú_blank‚Äù} offers a built-in mechanism for storing state and looks really promising.&lt;/p&gt;&lt;h3 id=&quot;conclusion-it-depends&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/azure-functions-grouping-functions-in-function-apps/#conclusion-it-depends&quot; class=&quot;heading-anchor&quot;&gt;Conclusion: It depends&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;There is no single answer how to group your functions into Function Apps. But as can be concluded from the described aspects (which are far from exhaustive) it is usually a good idea to keep your Function App lean with only a few closely related functions.&lt;/p&gt;
 			</content>
    </entry><entry>
      <title>Durable Functions on YouTube (part 1)</title>
      <link href="http://localhost:8080/articles/durable-functions-youtube-part1/" />
      <updated>2017-11-15T00:00:00Z</updated>
      <id>http://localhost:8080/articles/durable-functions-youtube-part1/</id>
      <content type="html">
				&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/28.durable-functions-youtube1-440w.webp 440w, http://localhost:8080/assets/images/28.durable-functions-youtube1-650w.webp 650w, http://localhost:8080/assets/images/28.durable-functions-youtube1-960w.webp 960w, http://localhost:8080/assets/images/28.durable-functions-youtube1-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/28.durable-functions-youtube1-1200w.webp&quot; width=&quot;1200&quot; height=&quot;750&quot; alt=&quot;Durable Functions Youtube&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;h2 id=&quot;durable-functions-videos&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/durable-functions-youtube-part1/#durable-functions-videos&quot; class=&quot;heading-anchor&quot;&gt;Durable Functions Videos&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I‚Äôve decided to create some video‚Äôs to explain and demonstrate the &lt;a href=&quot;https://docs.microsoft.com/azure/azure-functions/durable-functions-overview&quot; rel=&quot;noopener&quot;&gt;Durable Functions&lt;/a&gt; framework.&lt;/p&gt;&lt;p&gt;The first video covers a very basic ‚ÄòHello World‚Äô example and shows how to use the &lt;code&gt;OrchestrationClient&lt;/code&gt; and &lt;code&gt;DurableOrchestrationContext&lt;/code&gt; objects.&lt;/p&gt;&lt;p&gt;Here‚Äôs the video, please give it a thumbs up if you like it and subscribe to my channel so you‚Äôll be notified of new videos.&lt;/p&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/29hX9jZvejE&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;h3 id=&quot;resources&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/durable-functions-youtube-part1/#resources&quot; class=&quot;heading-anchor&quot;&gt;Resources&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;The source code that is used for this demo can be found on &lt;a href=&quot;https://github.com/marcduiker/demos-azure-durable-functions&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
 			</content>
    </entry><entry>
      <title>Azure Durable Functions - Stateful function orchestrations (part 2)</title>
      <link href="http://localhost:8080/articles/durable-azure-functions-stateful-orchestrations-part2/" />
      <updated>2017-11-07T00:00:00Z</updated>
      <id>http://localhost:8080/articles/durable-azure-functions-stateful-orchestrations-part2/</id>
      <content type="html">
				&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/27.1.durable-functions-demo-440w.webp 440w, http://localhost:8080/assets/images/27.1.durable-functions-demo-650w.webp 650w, http://localhost:8080/assets/images/27.1.durable-functions-demo-960w.webp 960w, http://localhost:8080/assets/images/27.1.durable-functions-demo-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/27.1.durable-functions-demo-1200w.webp&quot; width=&quot;1200&quot; height=&quot;493&quot; alt=&quot;HttpStart Durable Functions&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;h2 id=&quot;durable-function-walkthrough&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/durable-azure-functions-stateful-orchestrations-part2/#durable-function-walkthrough&quot; class=&quot;heading-anchor&quot;&gt;Durable Function Walkthrough&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;In my &lt;a href=&quot;http://localhost:8080/articles/durable-azure-functions-stateful-orchestrations&quot;&gt;previous post&lt;/a&gt; I gave an introduction on Durable Functions, an extension on Azure Functions which can be used to write stateful and long-running orchestration functions.&lt;/p&gt;&lt;p&gt;In this post we‚Äôll look into more detail at the &lt;code&gt;HttpStart&lt;/code&gt; and &lt;code&gt;HelloWorld&lt;/code&gt; functions from the previous post. We‚Äôll run them locally by triggering them using &lt;a href=&quot;https://www.getpostman.com/&quot; rel=&quot;noopener&quot;&gt;Postman&lt;/a&gt;and looking at the responses.&lt;/p&gt;&lt;h3 id=&quot;setup&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/durable-azure-functions-stateful-orchestrations-part2/#setup&quot; class=&quot;heading-anchor&quot;&gt;Setup&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;You can start by cloning my &lt;a href=&quot;https://github.com/marcduiker/demos-azure-durable-functions.git&quot; rel=&quot;noopener&quot;&gt;demos-azure-durable-functions&lt;/a&gt;GitHub repository. This repo holds the &lt;code&gt;DurableFunctionsDemo&lt;/code&gt; Function App which contains the following functions:&lt;/p&gt;&lt;ul class=&quot;list&quot;&gt;&lt;li&gt;&lt;code&gt;HttpStart&lt;/code&gt;, the HttpTrigger function which starts an orchestration function.&lt;/li&gt;&lt;li&gt;&lt;code&gt;HelloWorld&lt;/code&gt;, the most basic orchestration function ever.&lt;/li&gt;&lt;li&gt;&lt;code&gt;CollectNames&lt;/code&gt;, an ‚Äòeternal‚Äô orchestration function which waits for external events (I‚Äôll cover this one in the next blog post).&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Have a look at the &lt;a href=&quot;http://localhost:8080/articles/durable-azure-functions-stateful-orchestrations#developing-durable-functions&quot;&gt;Developing Durable Function&lt;/a&gt; section from my previous post in order to make sure you have all the required components to run the functions locally.&lt;/p&gt;&lt;h3 id=&quot;running-durable-functions-locally&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/durable-azure-functions-stateful-orchestrations-part2/#running-durable-functions-locally&quot; class=&quot;heading-anchor&quot;&gt;Running Durable Functions Locally&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;I usually type &lt;em&gt;azure&lt;/em&gt; in the Windows desktop search box to find the Microsoft Azure Storage Emulator and start it from there:&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/27.2.azurestorageemulator-started-440w.webp 440w, http://localhost:8080/assets/images/27.2.azurestorageemulator-started-650w.webp 650w, http://localhost:8080/assets/images/27.2.azurestorageemulator-started-960w.webp 960w, http://localhost:8080/assets/images/27.2.azurestorageemulator-started-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/27.2.azurestorageemulator-started-1200w.webp&quot; width=&quot;1200&quot; height=&quot;479&quot; alt=&quot;Azure Storage Emulator is started&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;Open the &lt;code&gt;DurableFunctionsDemo.sln&lt;/code&gt; solution and press &lt;em&gt;F5&lt;/em&gt; to run it locally:&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/27.3.functionsruntime1-440w.webp 440w, http://localhost:8080/assets/images/27.3.functionsruntime1-650w.webp 650w, http://localhost:8080/assets/images/27.3.functionsruntime1-960w.webp 960w, http://localhost:8080/assets/images/27.3.functionsruntime1-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/27.3.functionsruntime1-1200w.webp&quot; width=&quot;1200&quot; height=&quot;515&quot; alt=&quot;Local Functions Runtime starting&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;After a few seconds you‚Äôll see the local endpoint of the &lt;code&gt;HttpStart&lt;/code&gt; function in green:&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/27.4.functionsruntime2-440w.webp 440w, http://localhost:8080/assets/images/27.4.functionsruntime2-650w.webp 650w, http://localhost:8080/assets/images/27.4.functionsruntime2-960w.webp 960w, http://localhost:8080/assets/images/27.4.functionsruntime2-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/27.4.functionsruntime2-1200w.webp&quot; width=&quot;1200&quot; height=&quot;515&quot; alt=&quot;Local Functions Runtime is up and running with local endpoint&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;You can copy &amp;amp; paste this url into Postman (or any other HTTP API test client) and change the following:&lt;/p&gt;&lt;ul class=&quot;list&quot;&gt;&lt;li&gt;Make this a &lt;strong&gt;POST&lt;/strong&gt; request&lt;/li&gt;&lt;li&gt;Change &lt;strong&gt;{functionName}&lt;/strong&gt; to &lt;strong&gt;HelloWorld&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;In the Body tab, select &lt;strong&gt;raw&lt;/strong&gt; and &lt;strong&gt;JSON (application/json)&lt;/strong&gt; as the content-type.&lt;/li&gt;&lt;li&gt;Type a string in the body of the request, such as &lt;strong&gt;‚ÄúDurable Functions!‚Äù&lt;/strong&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/27.5.postman-helloworld-request-440w.webp 440w, http://localhost:8080/assets/images/27.5.postman-helloworld-request-650w.webp 650w, http://localhost:8080/assets/images/27.5.postman-helloworld-request-960w.webp 960w, http://localhost:8080/assets/images/27.5.postman-helloworld-request-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/27.5.postman-helloworld-request-1200w.webp&quot; width=&quot;1200&quot; height=&quot;315&quot; alt=&quot;Request to orchestration/HelloWorld&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;Click &lt;em&gt;Send&lt;/em&gt; to do the request.&lt;/p&gt;&lt;p&gt;You might expect to see &lt;strong&gt;‚ÄúHello Durable Functions!‚Äù&lt;/strong&gt; in the response body but that is not the case. You‚Äôll see this instead:&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/27.6.postman-helloworld-response-440w.webp 440w, http://localhost:8080/assets/images/27.6.postman-helloworld-response-650w.webp 650w, http://localhost:8080/assets/images/27.6.postman-helloworld-response-960w.webp 960w, http://localhost:8080/assets/images/27.6.postman-helloworld-response-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/27.6.postman-helloworld-response-1200w.webp&quot; width=&quot;1200&quot; height=&quot;860&quot; alt=&quot;Reponse from orchestration/HelloWorld&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;This is because you receive the response from the &lt;code&gt;HttpStart&lt;/code&gt; function (the &lt;code&gt;DurableOrchestrationClient&lt;/code&gt;) and not the &lt;code&gt;HelloWorld&lt;/code&gt; function directly.&lt;/p&gt;&lt;p&gt;The &lt;code&gt;DurableOrchestrationClient&lt;/code&gt; class exposes the &lt;code&gt;CreateCheckStatusResponse&lt;/code&gt; API which generates an HTTP response containing the HTTP API methods that the client supports. In this response we see the following API methods:&lt;/p&gt;&lt;ul class=&quot;list&quot;&gt;&lt;li&gt;&lt;code&gt;statusQueryGetUri&lt;/code&gt;; when a GET request is made to this endpoint the status of the orchestration function is returned (a serialized &lt;code&gt;Durable‚ÄãOrchestration‚ÄãStatus&lt;/code&gt;).&lt;/li&gt;&lt;li&gt;&lt;code&gt;sendEventPostUri&lt;/code&gt;; when a POST request is made to this endpoint (including a valid event name and event data) an event is triggered which can be picked up by an orchestration function. I‚Äôll come back to this in the next blog post.&lt;/li&gt;&lt;li&gt;&lt;code&gt;terminatePostUri&lt;/code&gt;; when a POST request is made to this endpoint the orchestration function is stopped without waiting for normal completion.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The &lt;code&gt;id&lt;/code&gt; in the response is the &lt;code&gt;InstanceId&lt;/code&gt; of the orchestration function.&lt;/p&gt;&lt;p&gt;When you click the &lt;code&gt;statusQueryGetUri&lt;/code&gt; endpoint and send it as a GET request you‚Äôll get the following response:&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/27.7.postman-helloworld-getstatusqueryuri-440w.webp 440w, http://localhost:8080/assets/images/27.7.postman-helloworld-getstatusqueryuri-650w.webp 650w, http://localhost:8080/assets/images/27.7.postman-helloworld-getstatusqueryuri-960w.webp 960w, http://localhost:8080/assets/images/27.7.postman-helloworld-getstatusqueryuri-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/27.7.postman-helloworld-getstatusqueryuri-1200w.webp&quot; width=&quot;1200&quot; height=&quot;650&quot; alt=&quot;Request and response to the statusQueryGetUri endpoint&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;Now you have the input &amp;amp; output of the &lt;code&gt;HelloWorld&lt;/code&gt; orchestration function and the status of the function.&lt;/p&gt;&lt;p&gt;Sending requests to the &lt;code&gt;sendEventPostUri&lt;/code&gt; and &lt;code&gt;terminatePostUri&lt;/code&gt; endpoints don‚Äôt make sense in this orchestration function since it‚Äôs not listening to external events and it is completed quite fast so terminating it before it reaches completed state is difficult. I‚Äôll get into these two methods in later posts.&lt;/p&gt;&lt;h4 id=&quot;looking-under-the-hood&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/durable-azure-functions-stateful-orchestrations-part2/#looking-under-the-hood&quot; class=&quot;heading-anchor&quot;&gt;Looking under the hood&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Finally, if you want to see where the local orchestration function history is kept, (which is used by the Event Sourcing pattern) you can have a look using the &lt;a href=&quot;https://azure.microsoft.com/en-us/features/storage-explorer/&quot; rel=&quot;noopener&quot;&gt;Microsoft Azure Storage Explorer&lt;/a&gt;tool. This is a great tool when you‚Äôre working with any type of Azure Storage, including local emulations.&lt;/p&gt;&lt;p&gt;When you navigate to (Local and Attached) &amp;gt; Storage Accounts &amp;gt; Development you‚Äôll see several blob containers, queues and tables which start with &lt;strong&gt;durablefunctionshub&lt;/strong&gt;. If you look at the &lt;code&gt;DurableFunctionsHubHistory&lt;/code&gt; table you can see all executions of the orchestration functions including the their input and output:&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/27.8.storageexplorer-table-440w.webp 440w, http://localhost:8080/assets/images/27.8.storageexplorer-table-650w.webp 650w, http://localhost:8080/assets/images/27.8.storageexplorer-table-960w.webp 960w, http://localhost:8080/assets/images/27.8.storageexplorer-table-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/27.8.storageexplorer-table-1200w.webp&quot; width=&quot;1200&quot; height=&quot;212&quot; alt=&quot;DurableFunctionsHubHistory table&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;h3 id=&quot;next-steps&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/durable-azure-functions-stateful-orchestrations-part2/#next-steps&quot; class=&quot;heading-anchor&quot;&gt;Next steps&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;At this moment you should have gained some insights how to run &amp;amp; debug Durable Functions locally. In the next post I‚Äôll demonstrate an ‚Äòeternal‚Äô orchestration function which waits for external events and is stateful.&lt;/p&gt;
 			</content>
    </entry><entry>
      <title>Azure Durable Functions - Stateful function orchestrations (part 1)</title>
      <link href="http://localhost:8080/articles/durable-azure-functions-stateful-orchestrations/" />
      <updated>2017-11-05T00:00:00Z</updated>
      <id>http://localhost:8080/articles/durable-azure-functions-stateful-orchestrations/</id>
      <content type="html">
				&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/26.durable-functions-demo-440w.webp 440w, http://localhost:8080/assets/images/26.durable-functions-demo-650w.webp 650w, http://localhost:8080/assets/images/26.durable-functions-demo-960w.webp 960w, http://localhost:8080/assets/images/26.durable-functions-demo-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/26.durable-functions-demo-1200w.webp&quot; width=&quot;1200&quot; height=&quot;493&quot; alt=&quot;HttpStart DurableFunction&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;h2 id=&quot;durable-functions&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/durable-azure-functions-stateful-orchestrations/#durable-functions&quot; class=&quot;heading-anchor&quot;&gt;Durable Functions&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Since my &lt;a href=&quot;http://localhost:8080/articles/serverless-architectures-using-azure-functions&quot;&gt;Getting started with Serverless Architectures using Azure Functions&lt;/a&gt; session at Techdays I‚Äôve been closely monitoring the latest news about Azure Functions. The most recent addition is called &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/azure-functions/durable-functions-overview&quot; rel=&quot;noopener&quot;&gt;Durable Functions&lt;/a&gt;{:target=‚Äú_blank‚Äù}. With this extension long running and stateful function orchestrations can be developed. This is a welcome addition to the Azure serverless product suite since it is now much easier to implement function chaining and fan-in/fan-out messaging scenarios.&lt;/p&gt;&lt;h3 id=&quot;how-does-it-work&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/durable-azure-functions-stateful-orchestrations/#how-does-it-work&quot; class=&quot;heading-anchor&quot;&gt;How does it work?&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Durable Functions are built on top of the &lt;a href=&quot;https://github.com/Azure/durabletask&quot; rel=&quot;noopener&quot;&gt;Durable Task Framework&lt;/a&gt;{:target=‚Äú_blank‚Äù} which enables development of long running persistent workflows by using a pattern called &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/azure-functions/durable-functions-overview#the-technology&quot; rel=&quot;noopener&quot;&gt;Event Sourcing&lt;/a&gt;{:target=‚Äú_blank‚Äù}. This pattern ensures that all actions in the orchestration function are stored and can be replayed. One of the benefits of this approach is that when the orchestration function instance has triggered another function to perform a task, the orchestration function itself can hibernate (and will not cost anything when the consumption plan is used) until the other function returns its result.&lt;/p&gt;&lt;p&gt;Durable Functions use Azure Storage queues, tables and blobs to manage state and messages. It uses the storage account which is created when you create a new Function App through the Azure portal.&lt;/p&gt;&lt;p&gt;Lets look at the two most important classes in the Durable Functions family; &lt;code&gt;Durable‚ÄãOrchestration‚ÄãClient&lt;/code&gt; &amp;amp; &lt;code&gt;Durable‚ÄãOrchestration‚ÄãContext&lt;/code&gt;.&lt;/p&gt;&lt;h4 id=&quot;durable‚Äãorchestration‚Äãclient&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/durable-azure-functions-stateful-orchestrations/#durable%E2%80%8Borchestration%E2%80%8Bclient&quot; class=&quot;heading-anchor&quot;&gt;Durable‚ÄãOrchestration‚ÄãClient&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;The &lt;code&gt;Durable‚ÄãOrchestration‚ÄãClient&lt;/code&gt; class manages orchestration function instances.&lt;br&gt;In order to use this client the following input binding needs to be added:&lt;/p&gt;&lt;p&gt;&lt;code&gt;[OrchestrationClient]DurableOrchestrationClient orchestrationClient&lt;/code&gt;&lt;/p&gt;&lt;p&gt;The client exposes the following functionalities:&lt;/p&gt;&lt;h5 id=&quot;starting-an-instance&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/durable-azure-functions-stateful-orchestrations/#starting-an-instance&quot; class=&quot;heading-anchor&quot;&gt;Starting an instance&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;This will start a new instance of an orchestration function.&lt;/p&gt;&lt;p&gt;&lt;code&gt;string instanceId = await orchestrationClient.StartNewAsync(functionName, eventData);&lt;/code&gt;&lt;/p&gt;&lt;p&gt;This &lt;a href=&quot;https://gist.github.com/marcduiker/e0e7cb5c7eb81614ab5a4470de95d74a&quot; rel=&quot;noopener&quot;&gt;Gist&lt;/a&gt;{:target=‚Äú_blank‚Äù} shows an HttpTrigger function which can start orchestration functions using the &lt;code&gt;orchestration/{functionName}&lt;/code&gt; route of the Function App:&lt;/p&gt;&lt;p&gt;&lt;strong&gt;HttpStart.cs&lt;/strong&gt;&lt;/p&gt;&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;System&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Net&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Http&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;System&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Threading&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Tasks&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;Microsoft&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Azure&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;WebJobs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;Microsoft&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Azure&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;WebJobs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Extensions&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Http&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;Microsoft&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Azure&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;WebJobs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Host&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;DurableFunctionsDemo&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;HttpStart&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token attribute&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;FunctionName&lt;/span&gt;&lt;span class=&quot;token attribute-arguments&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;HttpStart&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;Task&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;HttpResponseMessage&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token attribute&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;HttpTrigger&lt;/span&gt;&lt;span class=&quot;token attribute-arguments&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;AuthorizationLevel&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Function&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;post&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Route &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;orchestration/{functionName}&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;HttpRequestMessage&lt;/span&gt; req&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 
            &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token attribute&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;OrchestrationClient&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;DurableOrchestrationClient&lt;/span&gt; orchestrationClient&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt; functionName&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;token class-name&quot;&gt;TraceWriter&lt;/span&gt; log&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            log&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Info&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;HttpStart triggered.&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;dynamic&lt;/span&gt;&lt;/span&gt; eventData &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; req&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Content&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token generic-method&quot;&gt;&lt;span class=&quot;token function&quot;&gt;ReadAsAsync&lt;/span&gt;&lt;span class=&quot;token generic class-name&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt; instanceId &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; orchestrationClient&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;StartNewAsync&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;functionName&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; eventData&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

            log&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Info&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token interpolation-string&quot;&gt;&lt;span class=&quot;token string&quot;&gt;$&quot;Started orchestration with ID = &#39;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token expression language-csharp&quot;&gt;instanceId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;.&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; orchestrationClient&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;CreateCheckStatusResponse&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;req&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; instanceId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h5 id=&quot;stopping-an-instance&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/durable-azure-functions-stateful-orchestrations/#stopping-an-instance&quot; class=&quot;heading-anchor&quot;&gt;Stopping an instance&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;The orchestration function instance can be terminated without waiting for the results from other functions triggered by the orchestration function instance.&lt;/p&gt;&lt;p&gt;&lt;code&gt;await orchestrationClient.TerminateAsync(instanceId, terminationReason);&lt;/code&gt;&lt;/p&gt;&lt;h5 id=&quot;retrieving-the-status-of-an-instance&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/durable-azure-functions-stateful-orchestrations/#retrieving-the-status-of-an-instance&quot; class=&quot;heading-anchor&quot;&gt;Retrieving the status of an instance&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;Since Durable Functions are meant to be long running it is useful to query the status of the orchestration:&lt;/p&gt;&lt;p&gt;&lt;code&gt;var status = await orchestrationClient.GetStatusAsync(instanceId);&lt;/code&gt;&lt;/p&gt;&lt;p&gt;The returning type is &lt;code&gt;DurableOrchestrationStatus&lt;/code&gt; which contains a &lt;code&gt;RuntimeStatus&lt;/code&gt; property indicating if the orchestration function instance is still running, completed or terminated.&lt;/p&gt;&lt;h5 id=&quot;raising-events&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/durable-azure-functions-stateful-orchestrations/#raising-events&quot; class=&quot;heading-anchor&quot;&gt;Raising events&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;The orchestration client is also capable of raising events:&lt;/p&gt;&lt;p&gt;&lt;code&gt;await orchestrationClient.RaiseEventAsync(instanceId, eventName, eventData);&lt;/code&gt;&lt;/p&gt;&lt;p&gt;These events can be picked up by other functions referenced in the orchestration function by using the &lt;code&gt;Durable‚ÄãOrchestration‚ÄãContext&lt;/code&gt;.&lt;/p&gt;&lt;h4 id=&quot;durable‚Äãorchestration‚Äãcontext&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/durable-azure-functions-stateful-orchestrations/#durable%E2%80%8Borchestration%E2%80%8Bcontext&quot; class=&quot;heading-anchor&quot;&gt;Durable‚ÄãOrchestration‚ÄãContext&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;The &lt;code&gt;DurableOrchestrationContext&lt;/code&gt; class is used to call &amp;amp; schedule other functions, sub-orchestrations or wait for events.&lt;br&gt;The orchestration function requires the following input binding:&lt;/p&gt;&lt;p&gt;&lt;code&gt;[OrchestrationTrigger]DurableOrchestrationContext orchestrationContext&lt;/code&gt;&lt;/p&gt;&lt;p&gt;This &lt;a href=&quot;https://gist.github.com/marcduiker/e127deda371260f71ca93b1182e35a85&quot; rel=&quot;noopener&quot;&gt;Gist&lt;/a&gt; shows the most basic orchestration function, which actually doesn‚Äôt do any orchestration, it only retrieves input from the context:&lt;/p&gt;&lt;p&gt;&lt;strong&gt;HelloWorld.cs&lt;/strong&gt;&lt;/p&gt;&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;Microsoft&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Azure&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;WebJobs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;Microsoft&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Azure&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;WebJobs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Host&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;DurableFunctionsDemo&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Functions&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;HelloWorld&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token attribute&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;FunctionName&lt;/span&gt;&lt;span class=&quot;token attribute-arguments&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;HelloWorld&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token attribute&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;OrchestrationTrigger&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;DurableOrchestrationContext&lt;/span&gt; context&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;token class-name&quot;&gt;TraceWriter&lt;/span&gt; log&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt; name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; context&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token generic-method&quot;&gt;&lt;span class=&quot;token function&quot;&gt;GetInput&lt;/span&gt;&lt;span class=&quot;token generic class-name&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            log&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Info&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token interpolation-string&quot;&gt;&lt;span class=&quot;token string&quot;&gt;$&quot;HelloWorld function triggered with: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token expression language-csharp&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;.&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token interpolation-string&quot;&gt;&lt;span class=&quot;token string&quot;&gt;$&quot;Hello &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token expression language-csharp&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Although the &lt;code&gt;DurableOrchestrationContext&lt;/code&gt; class contains about 15 methods I‚Äôll only describe a few of them in this initial post.&lt;/p&gt;&lt;h5 id=&quot;get-function-input&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/durable-azure-functions-stateful-orchestrations/#get-function-input&quot; class=&quot;heading-anchor&quot;&gt;Get function input&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;When input is passed to the orchestration function (as JSON) this can be retrieved &amp;amp; deserialized by the &lt;code&gt;GetInput&amp;lt;T&amp;gt;&lt;/code&gt; method.&lt;/p&gt;&lt;p&gt;To retrieve a list of names the following can be used:&lt;/p&gt;&lt;p&gt;&lt;code&gt;var names = orchestrationContext.GetInput&amp;lt;List&amp;lt;string&amp;gt;&amp;gt;()&lt;/code&gt;&lt;/p&gt;&lt;h5 id=&quot;call-another-function&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/durable-azure-functions-stateful-orchestrations/#call-another-function&quot; class=&quot;heading-anchor&quot;&gt;Call another function&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;The orchestration function can call other functions using the &lt;code&gt;CallActivityAsync&amp;lt;T&amp;gt;&lt;/code&gt; method.&lt;/p&gt;&lt;p&gt;The following example calls the &lt;em&gt;CollectNames&lt;/em&gt; function. Passes an initial list of names (&lt;em&gt;names&lt;/em&gt;) and returns a Task of type &lt;code&gt;List&amp;lt;string&amp;gt;&lt;/code&gt;:&lt;/p&gt;&lt;p&gt;&lt;code&gt;var collectNamesResult = await context.CallActivityAsync&amp;lt;List&amp;lt;string&amp;gt;&amp;gt;(&quot;CollectNames&quot;, names);&lt;/code&gt;&lt;/p&gt;&lt;h5 id=&quot;wait-for-an-event&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/durable-azure-functions-stateful-orchestrations/#wait-for-an-event&quot; class=&quot;heading-anchor&quot;&gt;Wait for an event&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;As mentioned earlier, the &lt;code&gt;OrchestrationClient&lt;/code&gt; can raise events and other functions can react on these by using the &lt;code&gt;WaitForExternalEvent&amp;lt;T&amp;gt;&lt;/code&gt; method.&lt;/p&gt;&lt;p&gt;The following example describes the method to wait on the &lt;em&gt;addname&lt;/em&gt; event which has a return type of &lt;code&gt;string&lt;/code&gt;:&lt;/p&gt;&lt;p&gt;&lt;code&gt;var addNameResult = await orchestrationContext.WaitForExternalEvent&amp;lt;string&amp;gt;(&quot;addname&quot;);&lt;/code&gt;&lt;/p&gt;&lt;p&gt;When it‚Äôs required to await several events use the &lt;code&gt;await Task.WhenAll(...)&lt;/code&gt; or &lt;code&gt;Task.WhenAny(...)&lt;/code&gt; methods.&lt;/p&gt;&lt;h5 id=&quot;restart-the-orchestration&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/durable-azure-functions-stateful-orchestrations/#restart-the-orchestration&quot; class=&quot;heading-anchor&quot;&gt;Restart the orchestration&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;When an orchestration is required to be running forever and its full history is not of importance the &lt;code&gt;ContinueAsNew(object input)&lt;/code&gt; method can be used to restart the orchestration which resets its history. The current state of orchestration can still be kept because it can be passed to this method and used again at the start of the orchestration using &lt;code&gt;GetInput&amp;lt;T&amp;gt;&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;This example restarts the orchestration function and passing it a list of strings (names):&lt;/p&gt;&lt;p&gt;&lt;code&gt;orchestrationContext.ContinueAsNew(names);&lt;/code&gt;&lt;/p&gt;&lt;p&gt;The Durable Functions documentation shows how this can be used in &lt;a href=&quot;https://docs.microsoft.com/azure/azure-functions/durable-functions-eternal-orchestrations&quot; rel=&quot;noopener&quot;&gt;Eternal Orchestrations&lt;/a&gt;.&lt;/p&gt;&lt;h3 id=&quot;developing-durable-functions&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/durable-azure-functions-stateful-orchestrations/#developing-durable-functions&quot; class=&quot;heading-anchor&quot;&gt;Developing Durable Functions&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;I recommend creating compiled orchestration functions using Visual Studio 2017 because currently durable functions can only be developed in C# (support for other languages will follow).&lt;/p&gt;&lt;p&gt;The following tools/packages are required:&lt;/p&gt;&lt;ul class=&quot;list&quot;&gt;&lt;li&gt;The &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/storage/common/storage-use-emulator&quot; rel=&quot;noopener&quot;&gt;Microsoft Azure Storage Emulator&lt;/a&gt;{:target=‚Äú_blank‚Äù} is a standalone tool which uses SQL Server LocalDB and the local file storage instead of Azure Storage. The emulator needs to be started before you can run &amp;amp; debug Durable Functions locally.&lt;/li&gt;&lt;li&gt;The &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/azure-functions/functions-develop-vs&quot; rel=&quot;noopener&quot;&gt;Azure Functions and Web Jobs Tools&lt;/a&gt;{:target=‚Äú_blank‚Äù} Visual Studio extension. This extension adds a project template to Visual Studio to create Function Apps and run/debug them locally.&lt;/li&gt;&lt;li&gt;In your Function App you need a reference to this NuGet package: &lt;code&gt;Microsoft.Azure.WebJobs.Extensions.DurableTask&lt;/code&gt; (currently 1.0.0-beta).&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;I had some issues while adding this package since it has a dependency on &lt;code&gt;Microsoft.Azure.WebJobs&lt;/code&gt; &lt;strong&gt;2.1.0-beta4&lt;/strong&gt; while the Function App project template uses &lt;strong&gt;2.1.0-beta1&lt;/strong&gt;. Make sure when you create a new Function App using the project template you update &lt;code&gt;Microsoft.NET.Sdk.Functions&lt;/code&gt; NuGet package to the most recent one (now 1.0.6) so the &lt;code&gt;Microsoft.Azure.WebJobs&lt;/code&gt; versions match up.&lt;/p&gt;&lt;p&gt;Finally make sure you have the following local connection strings in your local.settings.json in your Function App:&lt;/p&gt;&lt;p&gt;&lt;strong&gt;local.settings.json&lt;/strong&gt;&lt;/p&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;IsEncrypted&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;Values&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;AzureWebJobsStorage&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;UseDevelopmentStorage=true;DevelopmentStorageProxyUri=http://127.0.0.1:10002/&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;AzureWebJobsDashboard&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;UseDevelopmentStorage=true;DevelopmentStorageProxyUri=http://127.0.0.1:10002/&quot;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;next-steps&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/durable-azure-functions-stateful-orchestrations/#next-steps&quot; class=&quot;heading-anchor&quot;&gt;Next steps&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;I‚Äôve now spent a couple of days tinkering with Durable Functions and I have to say that I enjoy this framework a lot. It‚Äôs more powerful than I imagined and although I was a bit skeptical about a more direct coupling of functions by using these orchestration functions I definitely see their value.&lt;/p&gt;&lt;p&gt;In next posts I‚Äôll share more examples about the &lt;code&gt;DurableOrchestrationContext&lt;/code&gt; and include a demo about the orchestration function I wrote.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://localhost:8080/articles/durable-azure-functions-stateful-orchestrations-part2&quot;&gt;Continue with Part 2&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
 			</content>
    </entry><entry>
      <title>Getting started with Serverless Architectures using Azure Functions</title>
      <link href="http://localhost:8080/articles/serverless-architectures-using-azure-functions/" />
      <updated>2017-10-19T00:00:00Z</updated>
      <id>http://localhost:8080/articles/serverless-architectures-using-azure-functions/</id>
      <content type="html">
				&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/25.1.marcduiker-on-stage-440w.webp 440w, http://localhost:8080/assets/images/25.1.marcduiker-on-stage-650w.webp 650w, http://localhost:8080/assets/images/25.1.marcduiker-on-stage-960w.webp 960w, http://localhost:8080/assets/images/25.1.marcduiker-on-stage-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/25.1.marcduiker-on-stage-1200w.webp&quot; width=&quot;1200&quot; height=&quot;674&quot; alt=&quot;Marc Duiker on stage at TechDays&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;h2 id=&quot;techdays-2017&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/serverless-architectures-using-azure-functions/#techdays-2017&quot; class=&quot;heading-anchor&quot;&gt;Techdays 2017&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;A few weeks ago I was presented with a fantastic opportunity, to speak at the biggest Microsoft conference in the Netherlands, TechDays 2017. The session was about my favorite subjects nowadays, serverless architectures and Azure Functions.&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/25.4.marcduiker-presenting-440w.webp 440w, http://localhost:8080/assets/images/25.4.marcduiker-presenting-650w.webp 650w, http://localhost:8080/assets/images/25.4.marcduiker-presenting-960w.webp 960w, http://localhost:8080/assets/images/25.4.marcduiker-presenting-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/25.4.marcduiker-presenting-1200w.webp&quot; width=&quot;1200&quot; height=&quot;675&quot; alt=&quot;Marc Duiker presenting at TechDays&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;Below you can find my slides of this session and a link to the demo I made.&lt;/p&gt;&lt;h3 id=&quot;slides&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/serverless-architectures-using-azure-functions/#slides&quot; class=&quot;heading-anchor&quot;&gt;Slides&lt;/a&gt;&lt;/h3&gt;&lt;iframe src=&quot;http://www.slideshare.net/slideshow/embed_code/key/EmrsTtxYb6Hwgw&quot; width=&quot;595&quot; height=&quot;485&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; allowfullscreen style=&quot;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%&quot;&gt;&lt;/iframe&gt;&lt;div style=&quot;margin-bottom:5px&quot;&gt;&lt;strong&gt;&lt;a href=&quot;http://www.slideshare.net/marcduiker/getting-started-with-serverless-architectures-using-azure-functions-80755768&quot; title=&quot;Getting Started with Serverless Architectures using Azure Functions&quot; target=&quot;_blank&quot;&gt;Getting Started with Serverless Architectures using Azure Functions&lt;/a&gt; &lt;/strong&gt;from &lt;strong&gt;&lt;a href=&quot;https://www.slideshare.net/marcduiker&quot; target=&quot;_blank&quot;&gt;Marc Duiker&lt;/a&gt;&lt;/strong&gt;&lt;/div&gt;&lt;h3 id=&quot;demo&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/serverless-architectures-using-azure-functions/#demo&quot; class=&quot;heading-anchor&quot;&gt;Demo&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;The demo solution with two Azure Functions triggered by queues is available on GitHub: &lt;a href=&quot;https://github.com/marcduiker/demos-serverless-architectures-functions&quot; rel=&quot;noopener&quot;&gt;demo-serverless-architectures-functions&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Let me know if you have any questions or comments when you wan to get started with this.&lt;/p&gt;&lt;h2 id=&quot;so-long-and-thanks-for-all-the-fish&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/serverless-architectures-using-azure-functions/#so-long-and-thanks-for-all-the-fish&quot; class=&quot;heading-anchor&quot;&gt;So long, and thanks for all the fish!&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I had a great time at TechDays, I enjoyed speaking as well as attending numerous great sessions. It was a lot of fun being there with all my colleagues.&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/25.2.xpirit-team-440w.webp 440w, http://localhost:8080/assets/images/25.2.xpirit-team-650w.webp 650w, http://localhost:8080/assets/images/25.2.xpirit-team-960w.webp 960w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/25.2.xpirit-team-960w.webp&quot; width=&quot;960&quot; height=&quot;539&quot; alt=&quot;Xpirit team at TechDays&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;At the end of the conference the two fish which were present at our Xpirit stand did not have a place to go, so I decided to adopt them üòÉ.&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/25.3.marcduiker-with-fish-440w.webp 440w, http://localhost:8080/assets/images/25.3.marcduiker-with-fish-650w.webp 650w, http://localhost:8080/assets/images/25.3.marcduiker-with-fish-960w.webp 960w, http://localhost:8080/assets/images/25.3.marcduiker-with-fish-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/25.3.marcduiker-with-fish-1200w.webp&quot; width=&quot;1200&quot; height=&quot;1200&quot; alt=&quot;Marc Duiker holding a fish bowl&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;h2 id=&quot;want-to-know-more&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/serverless-architectures-using-azure-functions/#want-to-know-more&quot; class=&quot;heading-anchor&quot;&gt;Want to know more?&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;If you would like to know more about serverless architectures and Azure Functions, please &lt;a href=&quot;mailto:mduiker@xpirit.com&quot;&gt;drop me line&lt;/a&gt;. I‚Äôll be happy to do a session on this topic at your organization or meetup.&lt;/p&gt;
 			</content>
    </entry><entry>
      <title>Installing the Python Azure SDK on a Raspberry Pi Zero</title>
      <link href="http://localhost:8080/articles/installing-python-azure-sdk-raspberrypi/" />
      <updated>2017-07-16T00:00:00Z</updated>
      <id>http://localhost:8080/articles/installing-python-azure-sdk-raspberrypi/</id>
      <content type="html">
				&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/24.pi-zero-with-camera-440w.webp 440w, http://localhost:8080/assets/images/24.pi-zero-with-camera-650w.webp 650w, http://localhost:8080/assets/images/24.pi-zero-with-camera-960w.webp 960w, http://localhost:8080/assets/images/24.pi-zero-with-camera-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/24.pi-zero-with-camera-1200w.webp&quot; width=&quot;1200&quot; height=&quot;675&quot; alt=&quot;Pi Zero with camera module&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;h2 id=&quot;holiday-project&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/installing-python-azure-sdk-raspberrypi/#holiday-project&quot; class=&quot;heading-anchor&quot;&gt;Holiday Project&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;This summer holiday I‚Äôm working on a hobby project which involves a Raspberry Pi Zero and a Pi camera module. Part of the solution is uploading the pictures the Pi takes to the cloud, Microsoft Azure to be more specific. I plan to write a couple of blog posts about this project. This first post is about installing the Azure SDK on the Pi Zero.&lt;/p&gt;&lt;h3 id=&quot;python-and-azure&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/installing-python-azure-sdk-raspberrypi/#python-and-azure&quot; class=&quot;heading-anchor&quot;&gt;Python and Azure&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://www.raspberrypi.org/downloads/raspbian/&quot; rel=&quot;noopener&quot;&gt;Raspbian Jessie&lt;/a&gt;, the Linux distribution for Raspberry Pi already has Python pre-installed and since Microsoft provides an Azure SDK for Python I decided to write an application in Python which will capture and upload the images to Azure.&lt;/p&gt;&lt;h3 id=&quot;errors-when-installing-the-azure-sdk&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/installing-python-azure-sdk-raspberrypi/#errors-when-installing-the-azure-sdk&quot; class=&quot;heading-anchor&quot;&gt;Errors when installing the Azure SDK&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;When I tried installing the &lt;a href=&quot;https://pypi.python.org/pypi/azure&quot; rel=&quot;noopener&quot;&gt;Azure SDK&lt;/a&gt; (v2.0.0) using:&lt;/p&gt;&lt;p&gt;&lt;code&gt;sudo pip install azure&lt;/code&gt;&lt;/p&gt;&lt;p&gt;I got some error messages such as:&lt;/p&gt;&lt;ul class=&quot;list&quot;&gt;&lt;li&gt;&lt;code&gt;Expected version spec in&#39;, &#39;azure-batch ~=3.0.0&#39;&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;fatal error: ffi.h: No such file or directory&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;fatal error: openssl/opensslv.h: No such file or directory&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Apparently the Python environment on my Pi Zero was out of date and missing some libraries. These were the steps I took to get to a successful installation of the Azure SDK:&lt;/p&gt;&lt;ul class=&quot;list&quot;&gt;&lt;li&gt;Update pip: &lt;code&gt;sudo pip install --upgrade pip&lt;/code&gt;&lt;/li&gt;&lt;li&gt;Install libffi: &lt;code&gt;sudo apt-get install libffi-dev&lt;/code&gt;&lt;/li&gt;&lt;li&gt;Install libssl: &lt;code&gt;sudo apt-get install libssl-dev&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&quot;clean-up&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/installing-python-azure-sdk-raspberrypi/#clean-up&quot; class=&quot;heading-anchor&quot;&gt;Clean up&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Since I want to keep my SD card as clean as possible I cleared the cached Python packages located in &lt;code&gt;/var/cache/apt/archives&lt;/code&gt; by running this command:&lt;/p&gt;&lt;p&gt;&lt;code&gt;sudo apt-get clean&lt;/code&gt;&lt;/p&gt;&lt;p&gt;In the next blog post I‚Äôll show which Azure services I‚Äôm using and how I configured them.&lt;/p&gt;
 			</content>
    </entry><entry>
      <title>Hands-on with Sitecore Helix: Continuous Delivery with Octopus Deploy</title>
      <link href="http://localhost:8080/articles/hands-on-with-sitecore-helix-continuous-delivery-with-octopusdeploy/" />
      <updated>2017-01-24T00:00:00Z</updated>
      <id>http://localhost:8080/articles/hands-on-with-sitecore-helix-continuous-delivery-with-octopusdeploy/</id>
      <content type="html">
				&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/23.1.Octopus_diagram-440w.webp 440w, http://localhost:8080/assets/images/23.1.Octopus_diagram-650w.webp 650w, http://localhost:8080/assets/images/23.1.Octopus_diagram-960w.webp 960w, http://localhost:8080/assets/images/23.1.Octopus_diagram-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/23.1.Octopus_diagram-1200w.webp&quot; width=&quot;1200&quot; height=&quot;625&quot; alt=&quot;Octopus Deploy process&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;In my &lt;a href=&quot;http://localhost:8080/articles/hands-on-with-sitecore-helix-setting-up-automated-build-packaging-continuous-delivery&quot;&gt;previous post&lt;/a&gt; I described how to setup an automated build for a Sitecore Helix project.&lt;br&gt;In this post I‚Äôll be covering the configuration of the automated deployment environment using &lt;a href=&quot;https://octopus.com/&quot; rel=&quot;noopener&quot;&gt;Octopus Deploy&lt;/a&gt;.&lt;/p&gt;&lt;h2 id=&quot;octopus-deploy&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/hands-on-with-sitecore-helix-continuous-delivery-with-octopusdeploy/#octopus-deploy&quot; class=&quot;heading-anchor&quot;&gt;Octopus Deploy&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Octopus Deploy uses the following terminology:&lt;/p&gt;&lt;ul class=&quot;list&quot;&gt;&lt;li&gt;&lt;em&gt;Environment&lt;/em&gt; ; a collection of one or more machines where a release can be deployed to (e.g. &lt;em&gt;Acceptance&lt;/em&gt;, which contain two machines, &lt;em&gt;ACC-CM&lt;/em&gt; and &lt;em&gt;ACC-CD&lt;/em&gt;).&lt;/li&gt;&lt;li&gt;&lt;em&gt;Machine role&lt;/em&gt; ; describes the role of a machine (e.g. &lt;em&gt;ContentManagement&lt;/em&gt; or &lt;em&gt;ContentDelivery&lt;/em&gt;).&lt;/li&gt;&lt;li&gt;&lt;em&gt;Tentacle&lt;/em&gt; ; an Octopus service agent running on a deployment target under a specific machine role. The agent communicates with the Octopus server and executes certain deployment steps (e.g. install packages/run scripts).&lt;/li&gt;&lt;li&gt;&lt;em&gt;Lifecycle&lt;/em&gt; ; determines the order of promoting a release from one environment to the next. (Also contains the retention policies for the releases.)&lt;/li&gt;&lt;li&gt;&lt;em&gt;Project&lt;/em&gt; ; contains the deployment process, the releases and variables.&lt;/li&gt;&lt;li&gt;&lt;em&gt;Deployment Process&lt;/em&gt; ; a sequence of steps which controls the deployment of your application.&lt;/li&gt;&lt;li&gt;&lt;em&gt;Variables&lt;/em&gt; ; allows the use of variables in deployment steps. This is useful for values which differ between environments or machine roles.&lt;/li&gt;&lt;li&gt;&lt;em&gt;Release&lt;/em&gt; ; a version of the deployment process and associated variables.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Octopus Deploy has &lt;a href=&quot;http://docs.octopusdeploy.com/display/OD/Getting+started&quot; rel=&quot;noopener&quot;&gt;great documentation&lt;/a&gt;&lt;br&gt;so I won‚Äôt be covering all the details.&lt;br&gt;I will discuss the Octopus &lt;em&gt;Deployment Process&lt;/em&gt; and &lt;em&gt;Release&lt;/em&gt; since these have Sitecore (Helix) specific configurations.&lt;/p&gt;&lt;h2 id=&quot;deployment-process&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/hands-on-with-sitecore-helix-continuous-delivery-with-octopusdeploy/#deployment-process&quot; class=&quot;heading-anchor&quot;&gt;Deployment Process&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;A deployment process consists of deployment steps. A step is based on a step template and Octopus provides an&lt;br&gt;&lt;a href=&quot;https://library.octopusdeploy.com/listing&quot; rel=&quot;noopener&quot;&gt;extensive library&lt;/a&gt; of those.&lt;/p&gt;&lt;p&gt;The step templates which I use most frequently are &lt;em&gt;Deploy a NuGet package&lt;/em&gt; and &lt;em&gt;Add a Script&lt;/em&gt;:&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/23.2.octopus-most-used-step-templates-440w.webp 440w, http://localhost:8080/assets/images/23.2.octopus-most-used-step-templates-643w.webp 643w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/23.2.octopus-most-used-step-templates-643w.webp&quot; width=&quot;643&quot; height=&quot;144&quot; alt=&quot;Octopus Deploy most used step templates&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;The deployment process for our Sitecore Helix project is constructed as follows (&lt;em&gt;PS&lt;/em&gt; for &lt;em&gt;Add a Script&lt;/em&gt; step, &lt;em&gt;NuGet&lt;/em&gt; for &lt;em&gt;Deploy a NuGet package&lt;/em&gt; step):&lt;/p&gt;&lt;ol class=&quot;list&quot;&gt;&lt;li&gt;IIS AppPool - Stop (&lt;em&gt;PS&lt;/em&gt;)&lt;/li&gt;&lt;li&gt;Remove Unicorn yml files, module configs and module binaries (&lt;em&gt;PS&lt;/em&gt;)&lt;/li&gt;&lt;li&gt;Deploy &lt;code&gt;&amp;lt;Project&amp;gt;.Foundation.&amp;lt;FoundationName&amp;gt;&lt;/code&gt; (&lt;em&gt;NuGet&lt;/em&gt;, separate step for each Foundation module!)&lt;/li&gt;&lt;li&gt;Deploy &lt;code&gt;&amp;lt;Project&amp;gt;.Feature.&amp;lt;FeatureName&amp;gt;&lt;/code&gt; (&lt;em&gt;NuGet&lt;/em&gt;, separate step for each Feature module!)&lt;/li&gt;&lt;li&gt;Deploy &lt;code&gt;&amp;lt;Project&amp;gt;.Website&lt;/code&gt; (&lt;em&gt;NuGet&lt;/em&gt;)&lt;/li&gt;&lt;li&gt;Copy Unicorn yml files to Data folder (&lt;em&gt;PS&lt;/em&gt;)&lt;/li&gt;&lt;li&gt;Remove Unicorn yml files from Website folder (&lt;em&gt;PS&lt;/em&gt;)&lt;/li&gt;&lt;li&gt;Disable/enable config files (&lt;em&gt;PS&lt;/em&gt;)&lt;/li&gt;&lt;li&gt;Update config values (&lt;em&gt;PS&lt;/em&gt;)&lt;/li&gt;&lt;li&gt;IIS AppPool - Start (&lt;em&gt;PS&lt;/em&gt;)&lt;/li&gt;&lt;li&gt;Sync Unicorn items (&lt;em&gt;PS&lt;/em&gt;)&lt;/li&gt;&lt;li&gt;Send notification to Slack (&lt;em&gt;PS&lt;/em&gt;)&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;The &lt;em&gt;Remove&lt;/em&gt; step (2) is recommended because each deployment will only add new files to the website.&lt;br&gt;We‚Äôre not installing a vanilla Sitecore from scratch each time.&lt;br&gt;By removing module specific files such as yml, config files and assemblies we can ensure we won‚Äôt get unexpected behaviors when files (or complete modules) are removed from the build.&lt;/p&gt;&lt;h3 id=&quot;powershell&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/hands-on-with-sitecore-helix-continuous-delivery-with-octopusdeploy/#powershell&quot; class=&quot;heading-anchor&quot;&gt;PowerShell&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;PowerShell steps can use (custom) script modules from the Octopus Library.&lt;br&gt;This allows re-use of script code and keeps the PowerShell steps succinct and easy to understand.&lt;/p&gt;&lt;p&gt;The following custom made modules are used:&lt;/p&gt;&lt;ul class=&quot;list&quot;&gt;&lt;li&gt;&lt;em&gt;Remove folder content&lt;/em&gt; ; used in step 2 and 7&lt;/li&gt;&lt;li&gt;&lt;em&gt;Copy folder content&lt;/em&gt; ; used in step 6&lt;/li&gt;&lt;li&gt;&lt;em&gt;Disable and Enable Config files&lt;/em&gt; ; used to enable disable CM/CD specific configs in step 8&lt;/li&gt;&lt;li&gt;&lt;em&gt;Update file content&lt;/em&gt; ; used to replace environment and machine role specific tokens in config files in step 9&lt;/li&gt;&lt;li&gt;&lt;em&gt;Sync Unicorn&lt;/em&gt; ; used in step 11&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The &lt;em&gt;Disable and Enable Config Files&lt;/em&gt; module is useful when dealing with separate content management and delivery servers.&lt;br&gt;I plan to write a blog post about that one separately and to submit the script to the Octopus Library eventually.&lt;/p&gt;&lt;h2 id=&quot;release&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/hands-on-with-sitecore-helix-continuous-delivery-with-octopusdeploy/#release&quot; class=&quot;heading-anchor&quot;&gt;Release&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I‚Äôve setup the release versioning to use the latest available version from the NuGet packages:&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/23.3.release-versioning-440w.webp 440w, http://localhost:8080/assets/images/23.3.release-versioning-650w.webp 650w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/23.3.release-versioning-650w.webp&quot; width=&quot;650&quot; height=&quot;75&quot; alt=&quot;Release versioning&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;A release can be created automatically when Octopus detects a new package being pushed to its NuGet feed.&lt;br&gt;This is configured by selecting a NuGet Package deployment step from the process.&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/23.4.automatic-release-creation-440w.webp 440w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/23.4.automatic-release-creation-440w.webp&quot; width=&quot;440&quot; height=&quot;256&quot; alt=&quot;Automatic release creation&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;Although this functionality sounds great I would recommend &lt;strong&gt;not&lt;/strong&gt; to use this when dealing with multiple packages!&lt;/p&gt;&lt;p&gt;When I tried this automatic release creation I experienced that releases often would contain old versions for some packages.&lt;br&gt;This discrepancy was caused by new packages not being available yet on the Octopus NuGet feed when the release was created.&lt;/p&gt;&lt;p&gt;Octopus triggers the release creation based on &lt;strong&gt;one&lt;/strong&gt; NuGet package while a Helix solution will produce many packages (in this setup).&lt;br&gt;So if the package referred to in the &lt;em&gt;Release Creation package step&lt;/em&gt; is &lt;strong&gt;not&lt;/strong&gt; the last package to be pushed by the build server a release will be created in&lt;br&gt;Octopus which still refers to some old packages. Yikes‚Ä¶&lt;/p&gt;&lt;p&gt;Since the build order of the projects (and thus the push of the packages to Octopus) might change it is too risky to have the release created automatically&lt;br&gt;based on the presence of one package of which you assume is the latest in the build process.&lt;/p&gt;&lt;h3 id=&quot;octoexe&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/hands-on-with-sitecore-helix-continuous-delivery-with-octopusdeploy/#octoexe&quot; class=&quot;heading-anchor&quot;&gt;Octo.exe&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;It is much better to trigger the build by running a command line tool called &lt;code&gt;Octo.exe&lt;/code&gt;.&lt;br&gt;This tool needs to be &lt;a href=&quot;http://docs.octopusdeploy.com/display/OD/Bamboo#Bamboo-Creatingarelease&quot; rel=&quot;noopener&quot;&gt;installed on the build server&lt;/a&gt; and a post build step needs to be added which calls &lt;code&gt;Octo.exe&lt;/code&gt; with the following arguments:&lt;/p&gt;&lt;p&gt;&lt;code&gt;create-release --project &amp;lt;PROJECT_NAME&amp;gt; --version &amp;lt;RELEASE_VERSION&amp;gt; --packageversion &amp;lt;PACKAGE_VERSION&amp;gt; --server &amp;lt;URL_OCTOPUS_SERVER&amp;gt; --apiKey &amp;lt;OCTOPUS_API_KEY&amp;gt; --releaseNotes &quot;Some notes here about the release&quot;&lt;/code&gt;&lt;/p&gt;&lt;p&gt;Let‚Äôs have a look at the available argument switches:&lt;/p&gt;&lt;ul class=&quot;list&quot;&gt;&lt;li&gt;&lt;code&gt;--project &amp;lt;PROJECT_NAME&amp;gt;&lt;/code&gt; specifies the project name in Octopus Deploy to create a new release for.&lt;/li&gt;&lt;li&gt;&lt;code&gt;--version &amp;lt;RELEASE_VERSION&amp;gt;&lt;/code&gt; sets the version of the Octopus release (optional).&lt;/li&gt;&lt;li&gt;&lt;code&gt;--packageversion &amp;lt;PACKAGE_VERSION&amp;gt;&lt;/code&gt; defines which version of the NuGet packages will be used in the release (optional).&lt;/li&gt;&lt;li&gt;&lt;code&gt;--server &amp;lt;URL_OCTOPUS_SERVER&amp;gt;&lt;/code&gt; specifies the Octopus Deploy server URL.&lt;/li&gt;&lt;li&gt;&lt;code&gt;--apiKey &amp;lt;OCTOPUS_API_KEY&amp;gt;&lt;/code&gt; specifies the API key which is required to execute the create release command.&lt;/li&gt;&lt;li&gt;&lt;code&gt;--releaseNotes &quot;Some notes here about the release&quot;&lt;/code&gt; Optional switch for the release notes.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;I‚Äôve omitted the &lt;code&gt;--version&lt;/code&gt;and &lt;code&gt;--packageversion&lt;/code&gt; switches in the post build job since I let Octopus determine the release number based on the latest NuGet package version available.&lt;br&gt;And since all the NuGet packages are built with the same version number this is safe to use.&lt;/p&gt;&lt;p&gt;An alternative of using the command line tool would be to use the &lt;a href=&quot;http://docs.octopusdeploy.com/display/OD/Octopus+REST+API&quot; rel=&quot;noopener&quot;&gt;Octopus REST API&lt;/a&gt;.&lt;br&gt;The &lt;a href=&quot;https://github.com/OctopusDeploy/OctopusDeploy-Api/tree/master/REST/PowerShell&quot; rel=&quot;noopener&quot;&gt;OctopusDeploy-API GitHub repo&lt;/a&gt; contains loads of PowerShell scripts on how to use the REST API.&lt;/p&gt;&lt;h2 id=&quot;multiple-nuget-packages-the-good-the-bad-and-the-ugly&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/hands-on-with-sitecore-helix-continuous-delivery-with-octopusdeploy/#multiple-nuget-packages-the-good-the-bad-and-the-ugly&quot; class=&quot;heading-anchor&quot;&gt;Multiple NuGet packages: The good, the bad and the ugly&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;As described in my &lt;a href=&quot;http://localhost:8080/articles/hands-on-with-sitecore-helix-continuous-delivery-with-octopusdeploy&quot;&gt;previous post&lt;/a&gt; I took the approach of having NuGet packages built for each module (&lt;code&gt;csproj&lt;/code&gt;) in our solution.&lt;/p&gt;&lt;p&gt;The reasons behind this were the following:&lt;/p&gt;&lt;ol class=&quot;list&quot;&gt;&lt;li&gt;It is transparent which modules get deployed since that is explicitly configured in the deployment process.&lt;/li&gt;&lt;li&gt;You have control over which modules will be deployed. There is the option to skip modules but this does introduce a &lt;strong&gt;big&lt;/strong&gt; risk when there are dependencies between modules, so be very careful!&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;The multiple package approach also has some drawbacks:&lt;/p&gt;&lt;ol class=&quot;list&quot;&gt;&lt;li&gt;Many of the created NuGet packages use the same dependencies (e.g. &lt;code&gt;Sitecore.*.dll&lt;/code&gt;) which means that there is a lot of duplication of referenced assemblies in these packages. Therefore the total size of the multiple NuGet packages (one for each &lt;code&gt;csproj&lt;/code&gt;) is much larger than the size of just one NuGet package for the whole solution. You need to be alert of setting up retention policies on OctopusDeploy and the Tentacles to prevent disk space filling up rapidly (you need to do this anyway but it becomes a problem earlier with many packages).&lt;/li&gt;&lt;li&gt;When a new module is added to the Visual Studio solution, the deployment process also needs to be updated with an additional NuGet package deployment step. So you actually have a dynamic deployment process which you need to actively maintain. There are ways around this by using a custom Powershell script (see the final section of this post).&lt;/li&gt;&lt;li&gt;Because there are more packages to deploy the process also takes longer to complete. So if you don‚Äôt use a &lt;a href=&quot;https://martinfowler.com/bliki/BlueGreenDeployment.html&quot; rel=&quot;noopener&quot;&gt;blue-green deployment&lt;/a&gt;&lt;br&gt;strategy you have a longer downtime. The deployment process we have in place now takes about 20 minutes to deploy 48 NuGet packages.&lt;/li&gt;&lt;/ol&gt;&lt;h2 id=&quot;moving-forward&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/hands-on-with-sitecore-helix-continuous-delivery-with-octopusdeploy/#moving-forward&quot; class=&quot;heading-anchor&quot;&gt;Moving forward&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Will I use the exact same packaging &amp;amp; deployment strategy for the next Sitecore Helix project?&lt;/p&gt;&lt;p&gt;Probably not. Although I do have (almost) everything in place now I‚Äôm not 100% satisfied with the current deployment process.&lt;/p&gt;&lt;p&gt;I don‚Äôt like the fact that whenever a new module has been built a deployment step needs to be added to the Octopus process.&lt;br&gt;Since adding a deployment step is still a manual procedure it might be forgotten and a module will not be deployed. This is quite big risk.&lt;/p&gt;&lt;p&gt;I‚Äôm planning to write a PowerShell script that will locate NuGet packages within Octopus based on a naming convention and deploys these to a configurable target.&lt;br&gt;Then all the current deployment steps for the Feature modules can be replaced with &lt;strong&gt;one&lt;/strong&gt; PowerShell script step that will search &amp;amp; deploy packages matching &lt;code&gt;&amp;lt;Project&amp;gt;.Feature.*.nupkg&lt;/code&gt;.&lt;br&gt;The Foundation modules can be handled in the same way.&lt;/p&gt;&lt;p&gt;By just using one NuGet package for the entire solution I wouldn‚Äôt have this problem to begin with (but I‚Äôm sure I would have had other problems then üòâ.&lt;/p&gt;&lt;p&gt;But which ever route you take for you next Sitecore project, make sure you use a deployment environment such as Octopus because it enables very controlled and reliable deployments.&lt;/p&gt;&lt;h3 id=&quot;feedback&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/hands-on-with-sitecore-helix-continuous-delivery-with-octopusdeploy/#feedback&quot; class=&quot;heading-anchor&quot;&gt;Feedback&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;I always appreciate good feedback, so feel free to leave a comment here or discuss this in the &lt;em&gt;helix-habitat&lt;/em&gt; channel on &lt;a href=&quot;https://sitecorechat.slack.com/&quot; rel=&quot;noopener&quot;&gt;sitecorechat.slack.com&lt;/a&gt;.&lt;/p&gt;
 			</content>
    </entry><entry>
      <title>Hands-on with Sitecore Helix: Setting up automated build and packaging for continuous delivery</title>
      <link href="http://localhost:8080/articles/hands-on-with-sitecore-helix-setting-up-automated-build-packaging-continuous-delivery/" />
      <updated>2017-01-03T00:00:00Z</updated>
      <id>http://localhost:8080/articles/hands-on-with-sitecore-helix-setting-up-automated-build-packaging-continuous-delivery/</id>
      <content type="html">
				&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/22.1.helix-logical-architecture-440w.webp 440w, http://localhost:8080/assets/images/22.1.helix-logical-architecture-650w.webp 650w, http://localhost:8080/assets/images/22.1.helix-logical-architecture-960w.webp 960w, http://localhost:8080/assets/images/22.1.helix-logical-architecture-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/22.1.helix-logical-architecture-1200w.webp&quot; width=&quot;1200&quot; height=&quot;430&quot; alt=&quot;Modular architecture&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;In my &lt;a href=&quot;http://localhost:8080/articles/hands-on-with-sitecore-helix-using-powershell-add-module&quot;&gt;previous&lt;/a&gt; &lt;a href=&quot;http://localhost:8080/articles/hands-on-with-sitecore-helix-anatomy-add-helix-powershell-script&quot;&gt;posts&lt;/a&gt; I‚Äôve shown how our team is able to add new feature or foundation modules easily.&lt;br&gt;Now let‚Äôs take a look at the effect of the modular architecture on the build and packaging of a Sitecore Helix style solution.&lt;br&gt;This is a topic which is receiving loads of attention lately and has been blogged about before by other Sitecore &lt;a href=&quot;https://www.akshaysura.com/2016/12/27/finally-with-one-great-big-gulp-i-conquered-sitecore-helix/&quot; rel=&quot;noopener&quot;&gt;community&lt;/a&gt; &lt;a href=&quot;https://www.akshaysura.com/2016/12/28/helix-and-the-re-tooling-of-your-continuous-integration-and-deployments/&quot; rel=&quot;noopener&quot;&gt;fanboys&lt;/a&gt; üòâ.&lt;/p&gt;&lt;p&gt;First I need to make clear that the solution I will describe is just one of many approaches that can be taken.&lt;br&gt;It is meant to provide insights in the possibilities of building and packaging your Sitecore Helix solution.&lt;br&gt;I will share my concerns of this solution in my next post.&lt;/p&gt;&lt;h2 id=&quot;modules-modules-everywhere&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/hands-on-with-sitecore-helix-setting-up-automated-build-packaging-continuous-delivery/#modules-modules-everywhere&quot; class=&quot;heading-anchor&quot;&gt;Modules, Modules Everywhere!&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Carefully read the following paragraph from the &lt;a href=&quot;http://helix.sitecore.net/principles/architecture-principles/modules.html&quot; rel=&quot;noopener&quot;&gt;Helix Architecure Principles&lt;/a&gt;:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;‚ÄúKeep in mind that in Helix, modules are business-centric. This means that they should relate to business objectives and group together multiple technology entities that refer to this objective.&lt;br&gt;This principle goes against many traditional software conventions - such as the ones dictated by MVC (models, controllers and views) or even Sitecore (templates, layouts, settings) - that define grouping based on their type, rather than their business objective.‚Äù&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;The Sitecore Habitat solution currently consists of:&lt;/p&gt;&lt;ul class=&quot;list&quot;&gt;&lt;li&gt;16 feature modules&lt;/li&gt;&lt;li&gt;14 foundation modules&lt;/li&gt;&lt;li&gt;2 project modules&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The Visual Studio solution has 54 projects (incl test projects) in total.&lt;br&gt;The real world Sitecore project I‚Äôm working on at the moment has even more.&lt;br&gt;It is definitely a mind shift to work with large numbers of projects.&lt;br&gt;Be cautious not create a module for each user story on your backlog though.&lt;br&gt;You can of course group or consolidate components which are very similar into one feature.&lt;/p&gt;&lt;h3 id=&quot;performance-vs-clarity&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/hands-on-with-sitecore-helix-setting-up-automated-build-packaging-continuous-delivery/#performance-vs-clarity&quot; class=&quot;heading-anchor&quot;&gt;Performance vs Clarity&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://sitecore.stackexchange.com/questions/3623/sitecore-helix-habitat-and-visual-studio-structure&quot; rel=&quot;noopener&quot;&gt;Some people&lt;/a&gt; are against this high number of projects in one Visual Studio solution.&lt;br&gt;Although a large number of projects does have a negative impact on Visual Studio performance I encourage the usage of this pattern.&lt;br&gt;This is because the clarity of this modular architecture outweighs the performance issue.&lt;br&gt;Identifying modules is so straightforward now and this greatly helps the communication about these feature and foundation modules.&lt;/p&gt;&lt;p&gt;As a developer you really need some decent hardware to make this work efficiently in Visual Studio.&lt;br&gt;If your development machine is slow, do &lt;a href=&quot;https://docs.google.com/spreadsheets/d/16tzObRLEdgszbxU-un4lG6K-shiE5c39K95aSfrlXvI/edit?usp=sharing&quot; rel=&quot;noopener&quot;&gt;some calculations&lt;/a&gt; so you can make a business case which supports your request to get a new machine.&lt;/p&gt;&lt;p&gt;So what do you need to do when you have a whole team producing loads of modules? Well, build &amp;amp; package those modules in order to deploy to other&lt;br&gt;environments of course so testers and end-users can marvel at your work.&lt;/p&gt;&lt;h2 id=&quot;continuous-integration-and-delivery&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/hands-on-with-sitecore-helix-setting-up-automated-build-packaging-continuous-delivery/#continuous-integration-and-delivery&quot; class=&quot;heading-anchor&quot;&gt;Continuous Integration &amp;amp; Delivery&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;You are all using source control and a centralized build environment, right?&lt;/p&gt;&lt;p&gt;Currently I‚Äôm using &lt;a href=&quot;https://about.gitlab.com/&quot; rel=&quot;noopener&quot;&gt;GitLab&lt;/a&gt; for source control and &lt;a href=&quot;https://www.atlassian.com/software/bamboo&quot; rel=&quot;noopener&quot;&gt;Bamboo&lt;/a&gt; as the build environment.&lt;br&gt;Although Bamboo is not one of my preferred build platforms it does the job well enough.&lt;br&gt;In addition &lt;a href=&quot;https://octopus.com/&quot; rel=&quot;noopener&quot;&gt;Octopus Deploy&lt;/a&gt; is used as the automated deployment environment (more of that in the next post).&lt;/p&gt;&lt;p&gt;Let‚Äôs have a closer look at how Visual Studio projects are configured.&lt;/p&gt;&lt;h3 id=&quot;visual-studio-project-configuration&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/hands-on-with-sitecore-helix-setting-up-automated-build-packaging-continuous-delivery/#visual-studio-project-configuration&quot; class=&quot;heading-anchor&quot;&gt;Visual Studio Project Configuration&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;By default Visual Studio gives you two solution configurations: &lt;code&gt;Debug&lt;/code&gt; and &lt;code&gt;Release&lt;/code&gt;.&lt;br&gt;Depending on how you have your environment specific configuration setup you might have more configurations but our team only using these two now.&lt;/p&gt;&lt;p&gt;The &lt;code&gt;Debug&lt;/code&gt; configuration is the default on during local development. The &lt;code&gt;Release&lt;/code&gt; configuration is used for the centralized build (more on that later).&lt;/p&gt;&lt;p&gt;I noticed that even in &lt;code&gt;Release&lt;/code&gt; mode *.pdb (symbol) files are created during a build.&lt;br&gt;If you want your release build to have a small footprint (and without debugging capabilities) you can disable to creation of these files by setting the &lt;em&gt;DebugInfo&lt;/em&gt; to &lt;code&gt;none&lt;/code&gt; under &lt;em&gt;Build&lt;/em&gt; &amp;gt; &lt;em&gt;Adanced‚Ä¶&lt;/em&gt;:&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/22.2.advanced-build-settings-440w.webp 440w, http://localhost:8080/assets/images/22.2.advanced-build-settings-650w.webp 650w, http://localhost:8080/assets/images/22.2.advanced-build-settings-960w.webp 960w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/22.2.advanced-build-settings-960w.webp&quot; width=&quot;960&quot; height=&quot;449&quot; alt=&quot;Set DebugInfo to None&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;h4 id=&quot;packaging-with-octopack&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/hands-on-with-sitecore-helix-setting-up-automated-build-packaging-continuous-delivery/#packaging-with-octopack&quot; class=&quot;heading-anchor&quot;&gt;Packaging with Octopack&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Octopus provides a &lt;strong&gt;very&lt;/strong&gt; easy way of packaging a solution or projects as NuGet packages through the use of &lt;a href=&quot;http://docs.octopusdeploy.com/display/OD/Using+OctoPack&quot; rel=&quot;noopener&quot;&gt;Octopack&lt;/a&gt;.&lt;br&gt;In our solution each Visual Studio project has a reference to Octopack.&lt;br&gt;This means that instead of one solution package there are be many packages (one per module).&lt;br&gt;This approach does has some drawbacks in the deployment process which I‚Äôm not too happy about as I will explain in the next post.&lt;/p&gt;&lt;h4 id=&quot;nuspec&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/hands-on-with-sitecore-helix-setting-up-automated-build-packaging-continuous-delivery/#nuspec&quot; class=&quot;heading-anchor&quot;&gt;Nuspec&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;A nuspec file contains package metadata and specifies the folders &amp;amp; files will be included in a NuGet package. Octopack can use these nuspec files when NuGet packages are created.&lt;/p&gt;&lt;p&gt;However you don‚Äôt &lt;strong&gt;need&lt;/strong&gt; to provide a nuspec file if you‚Äôre happy with what Visual Studio includes during a build (check the &lt;em&gt;Build Action&lt;/em&gt; in the &lt;em&gt;Properties&lt;/em&gt; pane if a file is included or not).&lt;/p&gt;&lt;p&gt;But if you want files included which are &lt;strong&gt;not&lt;/strong&gt; included in Visual Studio projects, such as the serialized Sitecore &lt;code&gt;yml&lt;/code&gt; files in our case, you need to explicitly add that to the nuspec file.&lt;br&gt;See line 15 in this nuspec template gist:&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;NamespacePrefix&lt;/em&gt;.&lt;em&gt;ModuleType&lt;/em&gt;.&lt;em&gt;Name&lt;/em&gt;.nuspec&lt;/strong&gt;&lt;/p&gt;&lt;pre class=&quot;language-xml&quot;&gt;&lt;code class=&quot;language-xml&quot;&gt;&lt;span class=&quot;token prolog&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot;?&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;package&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;xmlns&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;metadata&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;id&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;_NamespacePrefix_._ModuleType_._Name_&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;id&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;title&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;_NamespacePrefix_._ModuleType_._Name_&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;title&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;version&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;$version$&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;version&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;authors&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;_Company_&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;authors&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;owners&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;_Company_&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;owners&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;requireLicenseAcceptance&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;false&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;requireLicenseAcceptance&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;description&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;_NamespacePrefix_._ModuleType_._Name_&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;description&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;releaseNotes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;Automatic build&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;releaseNotes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;copyright&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;Copyright 2016 _Company_&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;copyright&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;metadata&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;files&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;file&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;..&#92;serialization&#92;**&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;Unicorn&#92;_ModuleType_&#92;_Name_&#92;serialization&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- Only include roles when they are required per component.
        &amp;lt;file src=&quot;..&#92;roles&#92;**&quot; target=&quot;Unicorn&#92;_ModuleType_&#92;_Name_&#92;roles&quot; /&amp;gt;
        --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;files&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;package&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Three things might not be too obvious in this nuspec and are worth highlighting:&lt;/p&gt;&lt;ol class=&quot;list&quot;&gt;&lt;li&gt;You can move out of the project/solution directory by using the relative path notation &lt;code&gt;..&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;You need to type &lt;code&gt;**&lt;/code&gt; in order to include subfolder content.&lt;/li&gt;&lt;li&gt;I only added &lt;strong&gt;one&lt;/strong&gt; &lt;code&gt;&amp;lt;file&amp;gt;&lt;/code&gt; line for the yml files. The standard build output from Visual Studio will also be packaged up but that is configured through a Octopack specific build parameter (&lt;code&gt;OctoPackEnforceAddingFiles=true&lt;/code&gt;) which I‚Äôll describe in the Build section in a moment.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Everything is setup now in Visual Studio. Let‚Äôs move on to the build server.&lt;/p&gt;&lt;h3 id=&quot;bamboo&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/hands-on-with-sitecore-helix-setting-up-automated-build-packaging-continuous-delivery/#bamboo&quot; class=&quot;heading-anchor&quot;&gt;Bamboo&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;The build plans in are Bamboo are quite straightforward. A plan consists of one stage having one job which has the following three tasks:&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/22.3.bamboo-tasks-432w.webp 432w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/22.3.bamboo-tasks-432w.webp&quot; width=&quot;432&quot; height=&quot;194&quot; alt=&quot;Bamboo tasks&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;Currently there are two build plans:&lt;/p&gt;&lt;ol class=&quot;list&quot;&gt;&lt;li&gt;One which checks out the &lt;code&gt;develop&lt;/code&gt; branch and does a build in &lt;code&gt;Debug&lt;/code&gt; configuration. This plan runs every 15 mins and when does a build when changes are detected in the repository.&lt;/li&gt;&lt;li&gt;One which checks out the &lt;code&gt;master&lt;/code&gt; branch and performs a build in &lt;code&gt;Release&lt;/code&gt; configuration. This plan is triggered manually. During the build it will create NuGet packages and pushes them to an internal Octopus Deploy NuGet feed.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;I just want to focus on building the solution in &lt;code&gt;Release&lt;/code&gt; configuration since that part is different since we use the Helix approach nowadays.&lt;/p&gt;&lt;h4 id=&quot;build-package-and-publish&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/hands-on-with-sitecore-helix-setting-up-automated-build-packaging-continuous-delivery/#build-package-and-publish&quot; class=&quot;heading-anchor&quot;&gt;Build, Package &amp;amp; Publish&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;The MSBuild task looks as follows:&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/22.4.msbuild-task-440w.webp 440w, http://localhost:8080/assets/images/22.4.msbuild-task-650w.webp 650w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/22.4.msbuild-task-650w.webp&quot; width=&quot;650&quot; height=&quot;546&quot; alt=&quot;MSBuild task&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;The &lt;em&gt;Options&lt;/em&gt; field is the most interesting (I‚Äôve replaced some sensitive info):&lt;/p&gt;&lt;p&gt;&lt;code&gt;/p:Configuration=Release;RunOctoPack=true;OctoPackEnforceAddingFiles=true;OctoPackPackageVersion=1.0.${bamboo.buildNumber};OctoPackPublishPackageToHttp=&amp;lt;URL_TO_OCTOPUS_NUGET&amp;gt;;OctoPackPublishApiKey=&amp;lt;OCTOPUS_API_KEY&amp;gt;&lt;/code&gt;&lt;/p&gt;&lt;p&gt;Let‚Äôs have a detailed look at the build parameters:&lt;/p&gt;&lt;ul class=&quot;list&quot;&gt;&lt;li&gt;&lt;code&gt;Configuration=Release&lt;/code&gt; is obvious I hope.&lt;/li&gt;&lt;li&gt;&lt;code&gt;RunOctoPack=true&lt;/code&gt; means that Octopack will be run for each of the projects where it has been added as a NuGet reference.&lt;/li&gt;&lt;li&gt;&lt;code&gt;OctoPackEnforceAddingFiles=true&lt;/code&gt; ensures that the NuGet package contains both the build output files &lt;strong&gt;and&lt;/strong&gt; the files specified in the nuspec.&lt;/li&gt;&lt;li&gt;&lt;code&gt;OctoPackPackageVersion=1.0.${bamboo.buildNumber}&lt;/code&gt; sets the version number of the NuGet package based on the Bamboo build number.&lt;/li&gt;&lt;li&gt;&lt;code&gt;OctoPackPublishPackageToHttp=&amp;lt;URL_TO_OCTOPUS_NUGET&amp;gt;&lt;/code&gt; defines the URL of the Octopus NuGet feed where created packages will be published to.&lt;/li&gt;&lt;li&gt;&lt;code&gt;OctoPackPublishApiKey=&amp;lt;OCTOPUS_API_KEY&amp;gt;&lt;/code&gt; contains the API key which is required when publishing to the Octopus NuGet feed.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Now we‚Äôre all set to run a build which will publish the NuGet packages for all the modules to Octopus Deploy.&lt;br&gt;In the next blogpost I‚Äôll go into detail how the deployment process is setup in Octopus.&lt;/p&gt;&lt;p&gt;As already mentioned by my Sitecore community friend &lt;a href=&quot;https://twitter.com/akshaysura13&quot; rel=&quot;noopener&quot;&gt;Akshay&lt;/a&gt;:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;‚ÄúI encourage you to discuss Helix/Habitat based conversations in the &lt;a href=&quot;https://sitecorechat.slack.com&quot; rel=&quot;noopener&quot;&gt;Sitecore Slack Helix-Habitat channel&lt;/a&gt;.‚Äù&lt;/p&gt;&lt;/blockquote&gt;
 			</content>
    </entry><entry>
      <title>Hands-on with Sitecore Helix: Anatomy of the Add-HelixModule.ps1 PowerShell script</title>
      <link href="http://localhost:8080/articles/hands-on-with-sitecore-helix-anatomy-add-helix-powershell-script/" />
      <updated>2016-12-29T00:00:00Z</updated>
      <id>http://localhost:8080/articles/hands-on-with-sitecore-helix-anatomy-add-helix-powershell-script/</id>
      <content type="html">
				&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/21.add_feature_script-440w.webp 440w, http://localhost:8080/assets/images/21.add_feature_script-650w.webp 650w, http://localhost:8080/assets/images/21.add_feature_script-833w.webp 833w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/21.add_feature_script-833w.webp&quot; width=&quot;833&quot; height=&quot;493&quot; alt=&quot;Add-Feature PowerShell function&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;In my &lt;a href=&quot;http://localhost:8080/articles/hands-on-with-sitecore-helix-using-powershell-add-module&quot;&gt;previous post&lt;/a&gt; I&lt;br&gt;showed how I got to a solution which allows the developers in my team to create new Feature and Foundation modules with ease.&lt;/p&gt;&lt;p&gt;I showed the moving parts of the solution but I did not go into much detail of the most important part so that‚Äôs what I‚Äôll do in this post.&lt;br&gt;This would be particularly useful if you want to change the script yourself to match it to your needs.&lt;/p&gt;&lt;h2 id=&quot;a-detailed-look-at-add-helixmoduleps1&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/hands-on-with-sitecore-helix-anatomy-add-helix-powershell-script/#a-detailed-look-at-add-helixmoduleps1&quot; class=&quot;heading-anchor&quot;&gt;A detailed look at add-helixmodule.ps1&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The &lt;code&gt;add-helixmodule.ps1&lt;/code&gt; script is where all the action happens. The file is &lt;a href=&quot;https://github.com/marcduiker/Habitat/blob/master/scripts/add-helixmodule.ps1&quot; rel=&quot;noopener&quot;&gt;included in my Habitat fork&lt;/a&gt; and is also available as a gist which is shown inline below.&lt;/p&gt;&lt;p&gt;I‚Äôve added loads of comments to it today, so I think should give you enough to work with.&lt;br&gt;The function which handles the addition of projects to the solution through the &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/envdte.dte.aspx&quot; rel=&quot;noopener&quot;&gt;DTE interface&lt;/a&gt; is called &lt;code&gt;Add-Projects&lt;/code&gt; (how surprising!) and starts at line 283.&lt;/p&gt;&lt;p&gt;Please do let me know if you have comments or suggestions for improvements!&lt;/p&gt;&lt;p&gt;&lt;strong&gt;add-helixmodule.ps1&lt;/strong&gt;&lt;/p&gt;&lt;pre class=&quot;language-powershell&quot;&gt;&lt;code class=&quot;language-powershell&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;&amp;lt;#
    .SYNOPSIS
    This script contains the Add-Feature and Add-Foundation methods which can be used to add a new module to a Sitecore Helix based Visual Studio solution.
    
    The Visual Studio solution should contain a add-helix-module-configuration.json file containing variables which this script will use.
    
    The Add-Feature and Add-Foundation methods can be run from the Pacakge Console Manager as long as this script is loaded in the relevant PowerShell profile. 
    Run $profile in the Pacakge Manager Console to verify the which profile is used.
#&amp;gt;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# Some hardcoded values&lt;/span&gt;
&lt;span class=&quot;token variable&quot;&gt;$featureModuleType&lt;/span&gt; = &lt;span class=&quot;token string&quot;&gt;&quot;Feature&quot;&lt;/span&gt;                                      &lt;span class=&quot;token comment&quot;&gt;# Used in Add-Feature and Create-Config.&lt;/span&gt;
&lt;span class=&quot;token variable&quot;&gt;$foundationModuleType&lt;/span&gt; = &lt;span class=&quot;token string&quot;&gt;&quot;Foundation&quot;&lt;/span&gt;                                &lt;span class=&quot;token comment&quot;&gt;# Used in Add-Foundation and Create-Config.&lt;/span&gt;
&lt;span class=&quot;token variable&quot;&gt;$addHelixModuleConfigFile&lt;/span&gt; = &lt;span class=&quot;token string&quot;&gt;&quot;add-helix-module-configuration.json&quot;&lt;/span&gt;   &lt;span class=&quot;token comment&quot;&gt;# Used in Add-Module.&lt;/span&gt;
&lt;span class=&quot;token variable&quot;&gt;$csprojExtension&lt;/span&gt; = &lt;span class=&quot;token string&quot;&gt;&quot;.csproj&quot;&lt;/span&gt;                                        &lt;span class=&quot;token comment&quot;&gt;# Used in Add-Projects&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;&amp;lt;#
    .SYNOPSIS
    Creates a config object which is used in the other functions in this script file.

    .DESCRIPTION
    This function should be considered private and is called from the Add-Module function.

    .Parameter JsonConfigFilePath
    The path of the json based configuration file which contains the path to the module-template folder,
    namespaces and tokens to replace.

    .Parameter ModuleType
    The type of the new module, either &#39;Feature&#39; or &#39;Foundation&#39;.

    .Parameter ModuleName
    The name of the new module, excluding namespaces since these are retreived from the config object. 

    .Parameter SolutionRootFolder
    The path to the folder which contains the Visual Studio solution (sln) file.

#&amp;gt;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; Create-Config
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;Param&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;token namespace&quot;&gt;[Parameter(Position=0, Mandatory=$True)]&lt;/span&gt;
        &lt;span class=&quot;token namespace&quot;&gt;[string]&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$JsonConfigFilePath&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token namespace&quot;&gt;[Parameter(Position=1, Mandatory=$True)]&lt;/span&gt;
        &lt;span class=&quot;token namespace&quot;&gt;[string]&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$ModuleType&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token namespace&quot;&gt;[Parameter(Position=2, Mandatory=$True)]&lt;/span&gt;
        &lt;span class=&quot;token namespace&quot;&gt;[string]&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$ModuleName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token namespace&quot;&gt;[Parameter(Position=3, Mandatory=$True)]&lt;/span&gt;
        &lt;span class=&quot;token namespace&quot;&gt;[string]&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$SolutionRootFolder&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;token variable&quot;&gt;$jsonFile&lt;/span&gt; = &lt;span class=&quot;token function&quot;&gt;Get-Content&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Raw &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Path &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;$JsonConfigFilePath&lt;/span&gt;&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;ConvertFrom-Json&lt;/span&gt;
    
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$jsonFile&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token variable&quot;&gt;$config&lt;/span&gt; = &lt;span class=&quot;token function&quot;&gt;New-Object&lt;/span&gt; psobject
        &lt;span class=&quot;token function&quot;&gt;Add-Member&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;InputObject &lt;span class=&quot;token variable&quot;&gt;$config&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Name ModuleTemplatePath &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Value &lt;span class=&quot;token variable&quot;&gt;$jsonFile&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;config&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;moduleTemplatePath &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;MemberType NoteProperty
        &lt;span class=&quot;token function&quot;&gt;Add-Member&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;InputObject &lt;span class=&quot;token variable&quot;&gt;$config&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Name SourceFolderName &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Value &lt;span class=&quot;token variable&quot;&gt;$jsonFile&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;config&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;sourceFolderName &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;MemberType NoteProperty
        &lt;span class=&quot;token function&quot;&gt;Add-Member&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;InputObject &lt;span class=&quot;token variable&quot;&gt;$config&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Name TemplateNamespacePrefix &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Value &lt;span class=&quot;token variable&quot;&gt;$jsonFile&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;config&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;templateNamespacePrefix &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;MemberType NoteProperty
        &lt;span class=&quot;token function&quot;&gt;Add-Member&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;InputObject &lt;span class=&quot;token variable&quot;&gt;$config&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Name TemplateModuleType &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Value &lt;span class=&quot;token variable&quot;&gt;$jsonFile&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;config&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;templateModuleType &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;MemberType NoteProperty
        &lt;span class=&quot;token function&quot;&gt;Add-Member&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;InputObject &lt;span class=&quot;token variable&quot;&gt;$config&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Name TemplateModuleName &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Value &lt;span class=&quot;token variable&quot;&gt;$jsonFile&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;config&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;templateModuleName &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;MemberType NoteProperty
        &lt;span class=&quot;token function&quot;&gt;Add-Member&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;InputObject &lt;span class=&quot;token variable&quot;&gt;$config&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Name TemplateProjectGuid &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Value &lt;span class=&quot;token variable&quot;&gt;$jsonFile&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;config&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;templateProjectGuid &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;MemberType NoteProperty
        &lt;span class=&quot;token function&quot;&gt;Add-Member&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;InputObject &lt;span class=&quot;token variable&quot;&gt;$config&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Name TemplateTestProjectGuid &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Value &lt;span class=&quot;token variable&quot;&gt;$jsonFile&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;config&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;templateTestProjectGuid &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;MemberType NoteProperty
        &lt;span class=&quot;token function&quot;&gt;Add-Member&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;InputObject &lt;span class=&quot;token variable&quot;&gt;$config&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Name FileExtensionsToUpdateContentRegex &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Value &lt;span class=&quot;token variable&quot;&gt;$jsonFile&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;config&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;fileExtensionsToUpdateContentRegex &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;MemberType NoteProperty
        &lt;span class=&quot;token function&quot;&gt;Add-Member&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;InputObject &lt;span class=&quot;token variable&quot;&gt;$config&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Name FileExtensionsToUpdateProjectGuidsRegex &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Value &lt;span class=&quot;token variable&quot;&gt;$jsonFile&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;config&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;fileExtensionsToUpdateProjectGuidsRegex &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;MemberType NoteProperty
        &lt;span class=&quot;token function&quot;&gt;Add-Member&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;InputObject &lt;span class=&quot;token variable&quot;&gt;$config&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Name ModuleType &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Value &lt;span class=&quot;token variable&quot;&gt;$ModuleType&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;MemberType NoteProperty
        &lt;span class=&quot;token function&quot;&gt;Add-Member&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;InputObject &lt;span class=&quot;token variable&quot;&gt;$config&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Name ModuleName &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Value &lt;span class=&quot;token variable&quot;&gt;$ModuleName&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;MemberType NoteProperty
        
        &lt;span class=&quot;token comment&quot;&gt;# GUIDs are needed for the VS projects&lt;/span&gt;
        &lt;span class=&quot;token variable&quot;&gt;$projectGuid&lt;/span&gt; = &lt;span class=&quot;token namespace&quot;&gt;[guid]&lt;/span&gt;::NewGuid&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;toString&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;toUpper&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;Add-Member&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;InputObject &lt;span class=&quot;token variable&quot;&gt;$config&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Name ProjectGuid &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Value &lt;span class=&quot;token variable&quot;&gt;$projectGuid&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;MemberType NoteProperty
        &lt;span class=&quot;token variable&quot;&gt;$testProjectGuid&lt;/span&gt; = &lt;span class=&quot;token namespace&quot;&gt;[guid]&lt;/span&gt;::NewGuid&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;toString&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;toUpper&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;Add-Member&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;InputObject &lt;span class=&quot;token variable&quot;&gt;$config&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Name TestProjectGuid &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Value &lt;span class=&quot;token variable&quot;&gt;$testProjectGuid&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;MemberType NoteProperty
        
        &lt;span class=&quot;token comment&quot;&gt;# The json config file contains two namespace prefixes. One for Foundation modules and one for Feature modules.&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;# This seperation is done to allow namespace differentiation between those module types. &lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;# Foundation modules could be reusable across development projects while Feature module most likely will not. &lt;/span&gt;
        &lt;span class=&quot;token variable&quot;&gt;$newNamespacePrefix&lt;/span&gt; = &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$ModuleType&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-eq&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$featureModuleType&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token variable&quot;&gt;$newNamespacePrefix&lt;/span&gt; = &lt;span class=&quot;token variable&quot;&gt;$jsonFile&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;config&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;featureNamespacePrefix
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$ModuleType&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-eq&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$foundationModuleType&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token variable&quot;&gt;$newNamespacePrefix&lt;/span&gt; = &lt;span class=&quot;token variable&quot;&gt;$jsonFile&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;config&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;foundationNamespacePrefix
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;Add-Member&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;InputObject &lt;span class=&quot;token variable&quot;&gt;$config&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Name NamespacePrefix &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Value &lt;span class=&quot;token variable&quot;&gt;$newNamespacePrefix&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;MemberType NoteProperty
        &lt;span class=&quot;token function&quot;&gt;Add-Member&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;InputObject &lt;span class=&quot;token variable&quot;&gt;$config&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Name SolutionRootFolder &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Value &lt;span class=&quot;token variable&quot;&gt;$SolutionRootFolder&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;MemberType NoteProperty

        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$config&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;&amp;lt;#
    .SYNOPSIS
    The main function that calls the other rename* functions.

    .DESCRIPTION
    This function should be considered private and is called from the Add-Module function.

    .PARAMETER StartPath
    The full path of the new module folder. This is used as a path to start folder and file searches.

#&amp;gt;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Rename-Module&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;Param&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;token namespace&quot;&gt;[Parameter(Position=0, Mandatory=$True)]&lt;/span&gt;
        &lt;span class=&quot;token namespace&quot;&gt;[string]&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$StartPath&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;# Rename all the folders from the copied module-template.&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;Rename-Folders&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;StartPath &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;$StartPath&lt;/span&gt;&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;OldValue &lt;span class=&quot;token variable&quot;&gt;$config&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;TemplateModuleType &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;NewValue &lt;span class=&quot;token variable&quot;&gt;$config&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ModuleType
    &lt;span class=&quot;token function&quot;&gt;Rename-Folders&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;StartPath &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;$StartPath&lt;/span&gt;&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;OldValue &lt;span class=&quot;token variable&quot;&gt;$config&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;TemplateModuleName &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;NewValue &lt;span class=&quot;token variable&quot;&gt;$config&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ModuleName

    &lt;span class=&quot;token comment&quot;&gt;# Rename all the files from the copied module-template.&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;Rename-Files&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;StartPath &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;$StartPath&lt;/span&gt;&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;OldValue &lt;span class=&quot;token variable&quot;&gt;$config&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;TemplateNamespacePrefix &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;NewValue &lt;span class=&quot;token variable&quot;&gt;$config&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;NamespacePrefix
    &lt;span class=&quot;token function&quot;&gt;Rename-Files&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;StartPath &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;$StartPath&lt;/span&gt;&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;OldValue &lt;span class=&quot;token variable&quot;&gt;$config&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;TemplateModuleType &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;NewValue &lt;span class=&quot;token variable&quot;&gt;$config&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ModuleType
    &lt;span class=&quot;token function&quot;&gt;Rename-Files&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;StartPath &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;$StartPath&lt;/span&gt;&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;OldValue &lt;span class=&quot;token variable&quot;&gt;$config&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;TemplateModuleName &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;NewValue &lt;span class=&quot;token variable&quot;&gt;$config&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ModuleName

    &lt;span class=&quot;token comment&quot;&gt;# Update file content for GUIDs.&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;Update-FileContent&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;StartPath &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;$StartPath&lt;/span&gt;&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;OldValue &lt;span class=&quot;token variable&quot;&gt;$config&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;TemplateProjectGuid &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;NewValue &lt;span class=&quot;token variable&quot;&gt;$config&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ProjectGuid &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;FileExtensionsRegex &lt;span class=&quot;token variable&quot;&gt;$config&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;fileExtensionsToUpdateProjectGuidsRegex
    &lt;span class=&quot;token function&quot;&gt;Update-FileContent&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;StartPath &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;$StartPath&lt;/span&gt;&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;OldValue &lt;span class=&quot;token variable&quot;&gt;$config&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;TemplateTestProjectGuid &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;NewValue &lt;span class=&quot;token variable&quot;&gt;$config&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;TestProjectGuid &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;FileExtensionsRegex &lt;span class=&quot;token variable&quot;&gt;$config&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;fileExtensionsToUpdateProjectGuidsRegex
    
    &lt;span class=&quot;token comment&quot;&gt;# Update file content for namespaces, module tpyes and module name.&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;Update-FileContent&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;StartPath &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;$StartPath&lt;/span&gt;&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;OldValue &lt;span class=&quot;token variable&quot;&gt;$config&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;TemplateNamespacePrefix &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;NewValue &lt;span class=&quot;token variable&quot;&gt;$config&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;NamespacePrefix &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;FileExtensionsRegex &lt;span class=&quot;token variable&quot;&gt;$config&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;FileExtensionsToUpdateContentRegex
    &lt;span class=&quot;token function&quot;&gt;Update-FileContent&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;StartPath &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;$StartPath&lt;/span&gt;&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;OldValue &lt;span class=&quot;token variable&quot;&gt;$config&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;TemplateModuleType &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;NewValue &lt;span class=&quot;token variable&quot;&gt;$config&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ModuleType &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;FileExtensionsRegex &lt;span class=&quot;token variable&quot;&gt;$config&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;FileExtensionsToUpdateContentRegex
    &lt;span class=&quot;token function&quot;&gt;Update-FileContent&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;StartPath &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;$StartPath&lt;/span&gt;&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;OldValue &lt;span class=&quot;token variable&quot;&gt;$config&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;TemplateModuleName &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;NewValue &lt;span class=&quot;token variable&quot;&gt;$config&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ModuleName &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;FileExtensionsRegex &lt;span class=&quot;token variable&quot;&gt;$config&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;FileExtensionsToUpdateContentRegex
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;&amp;lt;#
    .SYNOPSIS
    Renames files, replaces OldValue with NewValue in the filename. 

    .DESCRIPTION
    This function should be considered private and is called from the Rename-Module function.

    .PARAMETER StartPath
    The full path of the new module folder. This is used as a path to start folder and file searches.

    .PARAMETER OldValue
    The part of the filename which is used to search and is replaced with NewValue.

    .PARAMETER NewValue
    The value which is used in the replacement of OldValue.

#&amp;gt;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Rename-Files&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;Param&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;token namespace&quot;&gt;[Parameter(Position=0, Mandatory=$true)]&lt;/span&gt;
        &lt;span class=&quot;token namespace&quot;&gt;[string]&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$StartPath&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token namespace&quot;&gt;[Parameter(Position=1, Mandatory=$true)]&lt;/span&gt;
        &lt;span class=&quot;token namespace&quot;&gt;[string]&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$OldValue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token namespace&quot;&gt;[Parameter(Position=2, Mandatory=$true)]&lt;/span&gt;
        &lt;span class=&quot;token namespace&quot;&gt;[string]&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$NewValue&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;token variable&quot;&gt;$pattern&lt;/span&gt; = &lt;span class=&quot;token string&quot;&gt;&quot;*&lt;span class=&quot;token variable&quot;&gt;$OldValue&lt;/span&gt;*&quot;&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;Write-Output&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Renaming &lt;span class=&quot;token variable&quot;&gt;$pattern&lt;/span&gt; files located in &lt;span class=&quot;token variable&quot;&gt;$StartPath&lt;/span&gt;.&quot;&lt;/span&gt;
    &lt;span class=&quot;token variable&quot;&gt;$fileItems&lt;/span&gt; = &lt;span class=&quot;token function&quot;&gt;Get-ChildItem&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;File &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Path &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;$StartPath&lt;/span&gt;&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;Filter&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$pattern&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Recurse &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Force &lt;span class=&quot;token punctuation&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Where-Object&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$_&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;FullName &lt;span class=&quot;token operator&quot;&gt;-notmatch&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&#92;&#92;(obj|bin)&#92;&#92;?&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; 
    &lt;span class=&quot;token variable&quot;&gt;$fileItems&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Rename-Item&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;NewName &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$_&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Name &lt;span class=&quot;token operator&quot;&gt;-replace&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$OldValue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$NewValue&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Force
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;&amp;lt;#
    .SYNOPSIS
    Renames folders, replaces OldValue with NewValue in the folder name. 

    .DESCRIPTION
    This function should be considered private and is called from the Rename-Module function.

    .PARAMETER StartPath
    The full path of the new module folder. This is used as a path to start folder and file searches.

    .PARAMETER OldValue
    The part of the folder name which is used to search and is replaced with NewValue.

    .PARAMETER NewValue
    The value which is used in the replacement of OldValue.

#&amp;gt;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Rename-Folders&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;Param&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;token namespace&quot;&gt;[Parameter(Position=0, Mandatory=$true)]&lt;/span&gt;
        &lt;span class=&quot;token namespace&quot;&gt;[string]&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$StartPath&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token namespace&quot;&gt;[Parameter(Position=1, Mandatory=$true)]&lt;/span&gt;
        &lt;span class=&quot;token namespace&quot;&gt;[string]&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$OldValue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token namespace&quot;&gt;[Parameter(Position=2, Mandatory=$true)]&lt;/span&gt;
        &lt;span class=&quot;token namespace&quot;&gt;[string]&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$NewValue&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;token variable&quot;&gt;$pattern&lt;/span&gt; = &lt;span class=&quot;token string&quot;&gt;&quot;*&lt;span class=&quot;token variable&quot;&gt;$OldValue&lt;/span&gt;*&quot;&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;Write-Output&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Renaming &lt;span class=&quot;token variable&quot;&gt;$pattern&lt;/span&gt; folders located in &lt;span class=&quot;token variable&quot;&gt;$StartPath&lt;/span&gt;.&quot;&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;# Note the usage of Sort-Object { $_.FullName.Length } -Descending. &lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;# This is done to prevent exceptions with nested folders that need to be renamed.&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;# Folders are renamed from lowest level to highest level. &lt;/span&gt;
    &lt;span class=&quot;token variable&quot;&gt;$folderItems&lt;/span&gt; = &lt;span class=&quot;token function&quot;&gt;Get-ChildItem&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Directory &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Path &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;$StartPath&lt;/span&gt;&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Recurse &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;Filter&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$pattern&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Force &lt;span class=&quot;token punctuation&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Where-Object&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$_&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;FullName &lt;span class=&quot;token operator&quot;&gt;-notmatch&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&#92;&#92;(obj|bin)&#92;&#92;?&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Sort-Object&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$_&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;FullName&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Length &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Descending
    &lt;span class=&quot;token variable&quot;&gt;$folderItems&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Rename-Item&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;NewName &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$_&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Name &lt;span class=&quot;token operator&quot;&gt;-replace&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$OldValue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$NewValue&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Force
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;&amp;lt;#
    .SYNOPSIS
    Updates the content of files, replaces OldValue with NewValue. 

    .DESCRIPTION
    This function should be considered private and is called from the Rename-Module function.

    .PARAMETER StartPath
    The full path of the new module folder. This is used as a path to start folder and file searches.

    .PARAMETER OldValue
    The part of the filename which is used to search and is replaced with NewValue.

    .PARAMETER NewValue
    The value which is used in the replacement of OldValue.

    .PARAMETER FileExtensionsRegex
    A regular expression that describes which file extensions are searched for.

#&amp;gt;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Update-FileContent&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;Param&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;token namespace&quot;&gt;[Parameter(Position=0, Mandatory=$true)]&lt;/span&gt;
        &lt;span class=&quot;token namespace&quot;&gt;[string]&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$StartPath&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token namespace&quot;&gt;[Parameter(Position=1, Mandatory=$true)]&lt;/span&gt;
        &lt;span class=&quot;token namespace&quot;&gt;[string]&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$OldValue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token namespace&quot;&gt;[Parameter(Position=2, Mandatory=$true)]&lt;/span&gt;
        &lt;span class=&quot;token namespace&quot;&gt;[string]&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$NewValue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token namespace&quot;&gt;[Parameter(Position=3, Mandatory=$true)]&lt;/span&gt;
        &lt;span class=&quot;token namespace&quot;&gt;[string]&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$FileExtensionsRegex&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;token function&quot;&gt;Write-Output&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Renaming &lt;span class=&quot;token variable&quot;&gt;$OldValue&lt;/span&gt; to &lt;span class=&quot;token variable&quot;&gt;$NewValue&lt;/span&gt; in files matching &lt;span class=&quot;token variable&quot;&gt;$FileExtensionsRegex&lt;/span&gt; located in &lt;span class=&quot;token variable&quot;&gt;$StartPath&lt;/span&gt;.&quot;&lt;/span&gt;

    &lt;span class=&quot;token variable&quot;&gt;$filesToUpdate&lt;/span&gt; = &lt;span class=&quot;token function&quot;&gt;Get-ChildItem&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;File &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Path &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;$StartPath&lt;/span&gt;&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Recurse &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Force &lt;span class=&quot;token punctuation&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Where-Object&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$_&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;FullName &lt;span class=&quot;token operator&quot;&gt;-notmatch&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&#92;&#92;(obj|bin)&#92;&#92;?&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-and&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$_&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Name &lt;span class=&quot;token operator&quot;&gt;-match&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$FileExtensionsRegex&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Select-String&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Pattern &lt;span class=&quot;token variable&quot;&gt;$OldValue&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Group-Object&lt;/span&gt; Path &lt;span class=&quot;token punctuation&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Select-Object&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;ExpandProperty Name
    
    &lt;span class=&quot;token comment&quot;&gt;# -ireplace: case insensitive replacement&lt;/span&gt;
    &lt;span class=&quot;token variable&quot;&gt;$filesToUpdate&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;ForEach-Object&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Get-Content&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$_&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;ireplace &lt;span class=&quot;token namespace&quot;&gt;[regex]&lt;/span&gt;::Escape&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$OldValue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$NewValue&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Set-Content&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$_&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Force &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;&amp;lt;#
    .SYNOPSIS
    Returns the path of the new module.

    .DESCRIPTION
    The path is constructed as follows: SolutionRootFolder&#92;SourceFolderName&#92;ModuleType&#92;ModuleName.
    This function should be considered private and is called from the Add-Module function.
#&amp;gt;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Get-ModulePath&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token variable&quot;&gt;$sourceFolderPath&lt;/span&gt; =  &lt;span class=&quot;token function&quot;&gt;Join-Path&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Path &lt;span class=&quot;token variable&quot;&gt;$config&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;SolutionRootFolder &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;ChildPath &lt;span class=&quot;token variable&quot;&gt;$config&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;SourceFolderName
    &lt;span class=&quot;token variable&quot;&gt;$moduleTypePath&lt;/span&gt; = &lt;span class=&quot;token function&quot;&gt;Join-Path&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Path &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;$sourceFolderPath&lt;/span&gt;&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;ChildPath &lt;span class=&quot;token variable&quot;&gt;$config&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ModuleType
    &lt;span class=&quot;token variable&quot;&gt;$modulePath&lt;/span&gt; = &lt;span class=&quot;token function&quot;&gt;Join-Path&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Path &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;$moduleTypePath&lt;/span&gt;&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;ChildPath &lt;span class=&quot;token variable&quot;&gt;$config&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ModuleName
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Test-Path&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$modulePath&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;[System.ArgumentException]&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;$modulePath&lt;/span&gt; already exists.&quot;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$modulePath&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;&amp;lt;#
    .SYNOPSIS
    Helper function to retrieve the literal &#39;Feature&#39; or &#39;Foundation&#39; solution folder.

    .DESCRIPTION
    This function should be considered private and is called from the Add-Projects function.
#&amp;gt;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Get-ModuleTypeSolutionFolder&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$dte&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Solution&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Projects &lt;span class=&quot;token punctuation&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Where-Object&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$_&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Name &lt;span class=&quot;token operator&quot;&gt;-eq&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$config&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ModuleType &lt;span class=&quot;token operator&quot;&gt;-and&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$_&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Kind &lt;span class=&quot;token operator&quot;&gt;-eq&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;[EnvDTE80.ProjectKinds]&lt;/span&gt;::vsProjectKindSolutionFolder &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Select-Object&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;First 1
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;&amp;lt;#
    .SYNOPSIS
    Adds new module project(s) to the solution.
    
    .DESCRIPTION
    Searches for csproj files in the new module folder and uses EnvDTE80 interfaces to add these to the solution.
    This function should be considered private and is called from the Add-Module function.
#&amp;gt;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Add-Projects&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;token keyword&quot;&gt;Param&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;token namespace&quot;&gt;[Parameter(Position=0, Mandatory=$True)]&lt;/span&gt;
        &lt;span class=&quot;token namespace&quot;&gt;[string]&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$ModulePath&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;token function&quot;&gt;Write-Output&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Adding project(s)...&quot;&lt;/span&gt;
    &lt;span class=&quot;token variable&quot;&gt;$moduleTypeFolder&lt;/span&gt; = &lt;span class=&quot;token function&quot;&gt;Get-ModuleTypeSolutionFolder&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;Write-Output&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$moduleTypeFolder&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;# When the literal &#39;Feature&#39; or &#39;Foundation&#39; solution folder does not exist in the solution it will be created. &lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-not&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$moduleTypeFolder&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token variable&quot;&gt;$dte&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Solution&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;AddSolutionFolder&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$config&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ModuleType&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token variable&quot;&gt;$moduleTypeFolder&lt;/span&gt; = &lt;span class=&quot;token function&quot;&gt;Get-ModuleTypeSolutionFolder&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token variable&quot;&gt;$folderInterface&lt;/span&gt; = &lt;span class=&quot;token function&quot;&gt;Get-Interface&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$moduleTypeFolder&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Object &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token namespace&quot;&gt;[EnvDTE80.SolutionFolder]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token variable&quot;&gt;$moduleNameFolder&lt;/span&gt; = &lt;span class=&quot;token variable&quot;&gt;$folderInterface&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;AddSolutionFolder&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$config&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ModuleName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token variable&quot;&gt;$moduleNameInterface&lt;/span&gt; = &lt;span class=&quot;token function&quot;&gt;Get-Interface&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$moduleNameFolder&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Object &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token namespace&quot;&gt;[EnvDTE80.SolutionFolder]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    
    &lt;span class=&quot;token comment&quot;&gt;# Search in the new module folder for csproj files and add those to the solution.&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;Get-ChildItem&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;File &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Path &lt;span class=&quot;token variable&quot;&gt;$ModulePath&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;Filter&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;*&lt;span class=&quot;token variable&quot;&gt;$csprojExtension&lt;/span&gt;&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Recurse &lt;span class=&quot;token punctuation&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;ForEach-Object&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$moduleNameInterface&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;AddFromFile&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token function&quot;&gt;$&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$_&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;FullName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;Write-Output&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Saving solution...&quot;&lt;/span&gt;
    
    &lt;span class=&quot;token comment&quot;&gt;# Strangely enough the Solution interface does not contain a simple Save() method so a call to SaveAs(fileName) with the filename needs to be done.&lt;/span&gt;
    &lt;span class=&quot;token variable&quot;&gt;$dte&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Solution&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;SaveAs&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$dte&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Solution&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;FullName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;&amp;lt;#
    .SYNOPSIS
    Main function to add a new module.

    .DESCRIPTION
    This function should be considered private and is called from the Add-Feature or Add-Foundation function.

    .PARAMETER ModuleName
    The name of the new module.

    .PARAMETER ModuleType
    The type of the new module, either &#39;Feature&#39; or &#39;Foundation&#39;.
#&amp;gt;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Add-Module&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;Param&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;token namespace&quot;&gt;[Parameter(Position=0, Mandatory=$True)]&lt;/span&gt;
        &lt;span class=&quot;token namespace&quot;&gt;[string]&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$ModuleName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token namespace&quot;&gt;[Parameter(Position=1, Mandatory=$True)]&lt;/span&gt;
        &lt;span class=&quot;token namespace&quot;&gt;[string]&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$ModuleType&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    
    &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;# Do a check if there is a solution active in Visual Studio.&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;# If there is no active solution the Add-Projects function would fail.&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-not&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$dte&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Solution&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;FullName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;[System.ArgumentException]&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;There is no active solution. Load a Sitecore Helix solution first which contains an &lt;span class=&quot;token variable&quot;&gt;$addHelixModuleConfigFile&lt;/span&gt; file.&quot;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;token comment&quot;&gt;# The only reason I do this check is because I need a path to start searching for the json based config file. &lt;/span&gt;
        &lt;span class=&quot;token variable&quot;&gt;$solutionRootFolder&lt;/span&gt; = &lt;span class=&quot;token namespace&quot;&gt;[System.IO.Path]&lt;/span&gt;::GetDirectoryName&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$dte&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Solution&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;FullName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-not&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Test-Path&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;$solutionRootFolder&lt;/span&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;[System.IO.DirectoryNotFoundException]&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;$solutionRootFolder&lt;/span&gt; folder not found.&quot;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;token variable&quot;&gt;$configJsonFile&lt;/span&gt; = &lt;span class=&quot;token function&quot;&gt;Get-ChildItem&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Path &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;$solutionRootFolder&lt;/span&gt;&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;File &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;Filter&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;$addHelixModuleConfigFile&lt;/span&gt;&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Recurse &lt;span class=&quot;token punctuation&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Select-Object&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;First 1 &lt;span class=&quot;token punctuation&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Select-Object&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;ExpandProperty FullName
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-not&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Test-Path&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$configJsonFile&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;[System.IO.DirectoryNotFoundException]&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;$configJsonFile&lt;/span&gt; not found.&quot;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;token comment&quot;&gt;# Create a config object we can use throughout the other functions.&lt;/span&gt;
        &lt;span class=&quot;token variable&quot;&gt;$config&lt;/span&gt; = Create-Config &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;JsonConfigFilePath &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;$configJsonFile&lt;/span&gt;&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;ModuleType &lt;span class=&quot;token variable&quot;&gt;$ModuleType&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;ModuleName &lt;span class=&quot;token variable&quot;&gt;$ModuleName&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;SolutionRootFolder &lt;span class=&quot;token variable&quot;&gt;$solutionRootFolder&lt;/span&gt;
        
        &lt;span class=&quot;token comment&quot;&gt;# Get the path to the module-template folder and verify that is exists on disk.&lt;/span&gt;
        &lt;span class=&quot;token variable&quot;&gt;$copyModuleFromLocation&lt;/span&gt; = &lt;span class=&quot;token function&quot;&gt;Join-Path&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Path &lt;span class=&quot;token variable&quot;&gt;$config&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ModuleTemplatePath &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;ChildPath &lt;span class=&quot;token variable&quot;&gt;$config&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;TemplateModuleName
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-not&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Test-Path&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$copyModuleFromLocation&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;[System.IO.DirectoryNotFoundException]&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;$copyModuleFromLocation&lt;/span&gt; folder not found.&quot;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        
        &lt;span class=&quot;token variable&quot;&gt;$modulePath&lt;/span&gt; = &lt;span class=&quot;token function&quot;&gt;Get-ModulePath&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;Write-Output&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Copying module template to &lt;span class=&quot;token variable&quot;&gt;$modulePath&lt;/span&gt;.&quot;&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;Copy-Item&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Path &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;$copyModuleFromLocation&lt;/span&gt;&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Destination &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;$modulePath&lt;/span&gt;&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Recurse
        &lt;span class=&quot;token function&quot;&gt;Rename-Module&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;StartPath &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;$modulePath&lt;/span&gt;&quot;&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;Add-Projects&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;ModulePath &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;$modulePath&lt;/span&gt;&quot;&lt;/span&gt;

        &lt;span class=&quot;token function&quot;&gt;Write-Output&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Completed adding &lt;span class=&quot;token function&quot;&gt;$&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$config&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;NamespacePrefix&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;.&lt;span class=&quot;token variable&quot;&gt;$moduleType&lt;/span&gt;.&lt;span class=&quot;token variable&quot;&gt;$moduleName&lt;/span&gt;.&quot;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;Write-Error&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;0&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;exit&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;&amp;lt;#
    .SYNOPSIS
    Adds a Sitecore Helix Feature module to the current solution.
    
    .DESCRIPTION
    The solution should contain an add-helix-module-configuration.json file containing 
    paths to the module template folder and namespace settings for the new module. 

    .PARAMETER Name
    The name of the new Feature, excluding the namespace prefix since that comes from the json config file.

    .EXAMPLE
    Add-Feature Navigation

#&amp;gt;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Add-Feature&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;Param&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;token namespace&quot;&gt;[Parameter(Position=0, Mandatory=$True)]&lt;/span&gt;
        &lt;span class=&quot;token namespace&quot;&gt;[string]&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$Name&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;token function&quot;&gt;Add-Module&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;ModuleName &lt;span class=&quot;token variable&quot;&gt;$Name&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;ModuleType &lt;span class=&quot;token variable&quot;&gt;$featureModuleType&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;&amp;lt;#
    .SYNOPSIS
    Adds a Sitecore Helix Foundation module to the current solution.
    
    .DESCRIPTION
    The solution should contain an add-helix-module-configuration.json file containing 
    paths to the module template folder and namespace settings for the new module. 

    .PARAMETER Name
    The name of the new Foundation module, excluding the namespace prefix since that comes from the json config file.

    .EXAMPLE
    Add-Foundation Dictionary

#&amp;gt;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Add-Foundation&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;Param&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;token namespace&quot;&gt;[Parameter(Position=0, Mandatory=$True)]&lt;/span&gt;
        &lt;span class=&quot;token namespace&quot;&gt;[string]&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$Name&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;token function&quot;&gt;Add-Module&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;ModuleName &lt;span class=&quot;token variable&quot;&gt;$Name&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;ModuleType &lt;span class=&quot;token variable&quot;&gt;$foundationModuleType&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
 			</content>
    </entry><entry>
      <title>Hands-on with Sitecore Helix: Using PowerShell to add a new module</title>
      <link href="http://localhost:8080/articles/hands-on-with-sitecore-helix-using-powershell-add-module/" />
      <updated>2016-12-28T00:00:00Z</updated>
      <id>http://localhost:8080/articles/hands-on-with-sitecore-helix-using-powershell-add-module/</id>
      <content type="html">
				&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/20.1.powershell_vs_sitecore_helix-440w.webp 440w, http://localhost:8080/assets/images/20.1.powershell_vs_sitecore_helix-588w.webp 588w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/20.1.powershell_vs_sitecore_helix-588w.webp&quot; width=&quot;588&quot; height=&quot;251&quot; alt=&quot;PowerShell plus Visual Studio equals Sitecore Helix&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;h2 id=&quot;embracing-sitecore-helix&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/hands-on-with-sitecore-helix-using-powershell-add-module/#embracing-sitecore-helix&quot; class=&quot;heading-anchor&quot;&gt;Embracing Sitecore Helix&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Ever since I attended &lt;a href=&quot;https://twitter.com/AndersLaub&quot; rel=&quot;noopener&quot;&gt;Anders Laub&lt;/a&gt; his presentation at SUGCON Europe 2015 about component based architecture in Sitecore solutions I have been a strong advocate of these modular principles.&lt;br&gt;I even went to &lt;a href=&quot;http://www.pentia.net&quot; rel=&quot;noopener&quot;&gt;Pentia&lt;/a&gt; to learn about this in full detail.&lt;/p&gt;&lt;p&gt;I was very happy to see that Sitecore finally got their act together and published their &lt;a href=&quot;http://helix.sitecore.net/&quot; rel=&quot;noopener&quot;&gt;Helix&lt;/a&gt; guidelines and recommended practices on the web.&lt;/p&gt;&lt;p&gt;For the last half year my team is using the modular Helix style architecture with success and it‚Äôs time to share some experiences.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Go straight to the &lt;a href=&quot;http://localhost:8080/articles/hands-on-with-sitecore-helix-using-powershell-add-module/#tldr-my-add-helixmodule-solution&quot;&gt;TLDR&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&lt;h2 id=&quot;adding-a-new-module-with-ease&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/hands-on-with-sitecore-helix-using-powershell-add-module/#adding-a-new-module-with-ease&quot; class=&quot;heading-anchor&quot;&gt;Adding a new module with ease&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Seeing a Sitecore Helix solution can be a bit daunting at first.&lt;br&gt;The folder structure is quite deeply nested and developers need to have a good understanding what a module is composed of.&lt;br&gt;Adding a new Feature or Foundation module to your Sitecore Helix solution is a time consuming and error prone task if you do it manually over and over again.&lt;br&gt;Just as a learning experience it‚Äôs good to know what needs to be done so please &lt;a href=&quot;https://www.youtube.com/watch?v=4lC-SdYh4Xg&quot; rel=&quot;noopener&quot;&gt;do have a look&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Since adding a module is such a repetative task it is a perfect candidate for automation. Currently there are two &lt;a href=&quot;http://yeoman.io/&quot; rel=&quot;noopener&quot;&gt;Yeoman&lt;/a&gt; based solutions to create modules; &lt;a href=&quot;https://github.com/kamsar/generator-habitat&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;generator-habitat&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://github.com/mrodriguezr/generator-prodigious-helix&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;generator-prodigious-helix&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;&lt;h3 id=&quot;pros&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/hands-on-with-sitecore-helix-using-powershell-add-module/#pros&quot; class=&quot;heading-anchor&quot;&gt;Pros&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Both these Yeoman generators allow you to create a new Feature or Foundation module with ease. Both create the folder structure and the Visual Studio projects.&lt;br&gt;The main difference is that &lt;code&gt;generator-habitat&lt;/code&gt; works with &lt;a href=&quot;https://github.com/kamsar/Unicorn&quot; rel=&quot;noopener&quot;&gt;Unicorn&lt;/a&gt; and &lt;code&gt;generator-prodigious-helix&lt;/code&gt; works with &lt;a href=&quot;http://www.teamdevelopmentforsitecore.com/&quot; rel=&quot;noopener&quot;&gt;TDS&lt;/a&gt;.&lt;/p&gt;&lt;h3 id=&quot;cons&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/hands-on-with-sitecore-helix-using-powershell-add-module/#cons&quot; class=&quot;heading-anchor&quot;&gt;Cons&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;The only drawback of both generators is that they don‚Äôt update the solution file.&lt;br&gt;So you manually need to add the generated projects into he solution (and create the module specific solution folder as well).&lt;/p&gt;&lt;p&gt;Because I‚Äôm &lt;a href=&quot;http://threevirtues.com/&quot; rel=&quot;noopener&quot;&gt;lazy&lt;/a&gt; and don‚Äôt want to do repetitive work I set out to find another solution for this.&lt;/p&gt;&lt;h2 id=&quot;powershell&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/hands-on-with-sitecore-helix-using-powershell-add-module/#powershell&quot; class=&quot;heading-anchor&quot;&gt;PowerShell&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Since I‚Äôm more familiair with PowerShell I used that instead of the Yeoman generators (I already invested quite some time in my own solution before I became aware of the Yeoman generators).&lt;br&gt;Fairly quickly I had a script that would copy a template folder to the desired destination and replace tokens for the module name, namespaces and GUIDs.&lt;/p&gt;&lt;p&gt;The only thing left was adding the projects to the solution.&lt;br&gt;First I took a very basic approach and started parsing the sln file since it‚Äôs all plain text anyway.&lt;br&gt;But it became quite a hassle to manage project relations and nesting of projects and solution folders with only GUIDs to work with.&lt;br&gt;I needed a better solution. And then I met DTE.&lt;/p&gt;&lt;h2 id=&quot;dte-to-the-rescue&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/hands-on-with-sitecore-helix-using-powershell-add-module/#dte-to-the-rescue&quot; class=&quot;heading-anchor&quot;&gt;DTE to the rescue&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/17239760/what-is-the-visual-studio-dte&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;DTE&lt;/code&gt;&lt;/a&gt; (Development Tools Environment) or &lt;code&gt;EnvDTE&lt;/code&gt; is the &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/envdte._dte.aspx&quot; rel=&quot;noopener&quot;&gt;Visual Studio automation model&lt;/a&gt; and is used for Visual Studio extensions to manipulate the solution and it‚Äôs projects. The &lt;code&gt;DTE&lt;/code&gt; framework (COM based) is implemented across several &lt;code&gt;EnvDTE*.dll&lt;/code&gt; and &lt;code&gt;VSLangProj*.dll&lt;/code&gt; libraries depending on the version of Visual Studio you‚Äôre running.&lt;/p&gt;&lt;p&gt;The &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/envdte80.solutionfolder.aspx&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;SolutionFolder&lt;/code&gt;&lt;/a&gt; interface in the &lt;code&gt;EnvDTE80&lt;/code&gt; assembly captured my interest with the following methods:&lt;/p&gt;&lt;ul class=&quot;list&quot;&gt;&lt;li&gt;&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/envdte80.solutionfolder.addsolutionfolder.aspx&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;AddSolutionFolder&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/envdte80.solutionfolder.addfromfile.aspx&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;AddFromFile&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;In my initial attempts of using DTE I experienced quite some difficulties in creating the right types of objects and interfaces.&lt;br&gt;This was probably due to not having the correct &lt;code&gt;EnvDTE*.dll&lt;/code&gt; and &lt;code&gt;VSLangProj*.dll&lt;/code&gt; assemblies loaded in my PowerShell script.&lt;/p&gt;&lt;p&gt;I found that the NuGet Package Manager Console in Visual Studio already has the proper assemblies loaded since it‚Äôs also using &lt;code&gt;DTE&lt;/code&gt; when adding new NuGet packages to the solution.&lt;br&gt;Now I only needed to find a way to call my PowerShell script from the Package Manager Console.&lt;/p&gt;&lt;h2 id=&quot;nuget-profile&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/hands-on-with-sitecore-helix-using-powershell-add-module/#nuget-profile&quot; class=&quot;heading-anchor&quot;&gt;NuGet profile&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The PowerShell commands that can be used in the Package Manager Console are stored in a &lt;code&gt;Profile.ps1&lt;/code&gt; script located at &lt;code&gt;C:&#92;Program Files (x86)&#92;Microsoft Visual Studio 14.0&#92;Common7&#92;IDE&#92;Extensions&#92;&amp;lt;someweirdID&amp;gt;&#92;Modules&#92;NuGet&lt;/code&gt;.&lt;br&gt;Since that profile belongs to the console it‚Äôs probably best to not touch that one because it could be overwritten during an update.&lt;/p&gt;&lt;p&gt;When you type &lt;code&gt;$profile&lt;/code&gt; in the Package Manager Console you‚Äôll get the location of a user profile that can be used to extend the default one.&lt;br&gt;In my case I got the following:&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/20.2.nuget_profile_path-440w.webp 440w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/20.2.nuget_profile_path-440w.webp&quot; width=&quot;440&quot; height=&quot;103&quot; alt=&quot;NuGet Profile Path&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;If you go to that location there might not be a profile file at all. You can then create an empty file and name it &lt;code&gt;NuGet_profile.ps1&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;When you make changes to this user profile while Visual Studio is open Visual Studio will not detect any changes. You can type &lt;code&gt;&amp;amp; $profile&lt;/code&gt; in the Package Manager Console to reload the profile.&lt;/p&gt;&lt;h2 id=&quot;tldr-my-add-helixmodule-solution&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/hands-on-with-sitecore-helix-using-powershell-add-module/#tldr-my-add-helixmodule-solution&quot; class=&quot;heading-anchor&quot;&gt;TLDR: My Add-HelixModule Solution&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/20.3.add_helixmodule-440w.webp 440w, http://localhost:8080/assets/images/20.3.add_helixmodule-650w.webp 650w, http://localhost:8080/assets/images/20.3.add_helixmodule-960w.webp 960w, http://localhost:8080/assets/images/20.3.add_helixmodule-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/20.3.add_helixmodule-1200w.webp&quot; width=&quot;1200&quot; height=&quot;633&quot; alt=&quot;Add-HelixModule&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;ol class=&quot;list&quot;&gt;&lt;li&gt;&lt;code&gt;module-template&lt;/code&gt;, a folder containing code and config template files. This template is based on a Sitecore Habitat Feature which is stripped down significantly.&lt;/li&gt;&lt;li&gt;&lt;code&gt;add-helixmodule.ps1&lt;/code&gt;, a PowerShell script which creates a new Feature or Foundation module &lt;strong&gt;AND&lt;/strong&gt; adds this to the current solution in Visual Studio.&lt;/li&gt;&lt;li&gt;&lt;code&gt;NuGet_profile.ps1&lt;/code&gt;, a PowerShell NuGet profile that is used by the Visual Studio Package Manager Console. This profile only loads the add-helixmodule.ps1.&lt;/li&gt;&lt;li&gt;&lt;code&gt;add-helix-module-configuration.json&lt;/code&gt;, a config file containing values for namespaces, location of the module-template and more.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;You can see it working in my fork of Sitecore Habitat:&lt;/p&gt;&lt;ul class=&quot;list&quot;&gt;&lt;li&gt;Clone my &lt;a href=&quot;https://github.com/marcduiker/Habitat&quot; rel=&quot;noopener&quot;&gt;Sitecore Habitat fork&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;Verify that you have a &lt;code&gt;NuGet_profile.ps1&lt;/code&gt; (use &lt;code&gt;$profile&lt;/code&gt; to check the location).&lt;/li&gt;&lt;li&gt;Add the following to this profile and update the path to point to the &lt;code&gt;add-helixmodule.ps1&lt;/code&gt; file on your disk:&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;NuGet_profile.ps1&lt;/strong&gt;&lt;/p&gt;&lt;pre class=&quot;language-powershell&quot;&gt;&lt;code class=&quot;language-powershell&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;&amp;lt;# 
    Loads the add-helixmodule.ps1 script to enable the creation of Feature and Foundation project in Sitecore Helix solutions.
    
    You need to change this path to the location where the script is located on your local machine. 
    
    Once the script is loaded the Add-Feature and Add-Foundation methods are available in the Package Manager Console in Visual Studio.
#&amp;gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;C:&#92;dev&#92;git&#92;HabitatFork&#92;scripts&#92;add-helixmodule.ps1&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ul class=&quot;list&quot;&gt;&lt;li&gt;Open the Sitecore Habitat solution in Visual Studio.&lt;/li&gt;&lt;li&gt;Open the &lt;code&gt;add-helix-module-configuration.json&lt;/code&gt; file.&lt;/li&gt;&lt;li&gt;Update the following values in that configuration file:&lt;ul class=&quot;list&quot;&gt;&lt;li&gt;&lt;code&gt;moduleTemplatePath&lt;/code&gt;. This is the absolute path to the module-template folder.&lt;/li&gt;&lt;li&gt;&lt;code&gt;featureNamespacePrefix&lt;/code&gt;. This is the namespace prefix for new Feature modules (e.g. CompanyName.ClientName).&lt;/li&gt;&lt;li&gt;&lt;code&gt;foundationNamespacePrefix&lt;/code&gt;. This is the namespace prefix for new Foundation modules (e.g. CompanyName).&lt;/li&gt;&lt;li&gt;&lt;code&gt;sourceFolderName&lt;/code&gt;. This is the relative path to the location where the Feature/Foundation and Project folders are. For Sitecore Habitat this is &lt;code&gt;//src&lt;/code&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;add-helix-module-configuration.json&lt;/strong&gt;&lt;/p&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token property&quot;&gt;&quot;__comment&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;This configuration file is used by the add-helix-module.ps1 script which creates modules for Sitecore Helix solutions.&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;token property&quot;&gt;&quot;config&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;token property&quot;&gt;&quot;__comment__moduleTemplatePath&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Update the moduleTemplatePath property to point to your module-template location.&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;token property&quot;&gt;&quot;moduleTemplatePath&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;C:&#92;&#92;dev&#92;&#92;git&#92;&#92;HabitatFork&#92;&#92;module-template&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;token property&quot;&gt;&quot;__comment__featureNamespacePrefix&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Replace the value for featureNamespacePrefix with a suitable namespace prefix. The Feature.&amp;lt;ModuleName&amp;gt; will be appended by the script.&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;token property&quot;&gt;&quot;featureNamespacePrefix&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;CompanyNamespace.ClientNamespace&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;token property&quot;&gt;&quot;__comment__foundationNamespacePrefix&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Replace the value for featureNamespacePrefix with a suitable namespace prefix. The Foundation.&amp;lt;ModuleName&amp;gt; will be appended by the script.&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;token property&quot;&gt;&quot;foundationNamespacePrefix&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;CompanyNamespace&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;token property&quot;&gt;&quot;__comment__sourceFolderName&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;The sourcefolder should contain the relative path (from the sln file folder) where the Feature, Foundation and Project folders are located. The Sitecore Habitat default is &#39;&#92;&#92;src&#39;.&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;token property&quot;&gt;&quot;sourceFolderName&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&#92;&#92;src&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;token property&quot;&gt;&quot;__comment__fileExtensionsToUpdateContentRegex&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;The regex in the fileExtensionsToUpdateContentRegex property is used to find the files which contain tokens which will be replaced with new values by the script.&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;token property&quot;&gt;&quot;fileExtensionsToUpdateContentRegex&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;(.config|.csproj|.cs|.cshtml|.feature|.js|.nuspec|.role|.sitecore|.targets)$&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;token property&quot;&gt;&quot;__comment__fileExtensionsToUpdateProjectGuidsRegex&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;The regex in the fileExtensionsToUpdateProjectGuidsRegex property is used to find the files which need to have VS project GUIDs inserted.&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;token property&quot;&gt;&quot;fileExtensionsToUpdateProjectGuidsRegex&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;(.csproj|AssemblyInfo.cs)$&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;token property&quot;&gt;&quot;__comment__&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;The templateNamespacePrefix property contains the token which will be replaced with the value from either featureNamespacePrefix or foundationNamespacePrefix.&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;token property&quot;&gt;&quot;templateNamespacePrefix&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;_NamespacePrefix_&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;token property&quot;&gt;&quot;__comment__templateModuleType&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;The templateModuleType property contains the token variable which will be replaced with Feature or Foundation.&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;token property&quot;&gt;&quot;templateModuleType&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;_ModuleType_&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;token property&quot;&gt;&quot;__comment__templateModuleName&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;The templateModuleName property contains the token which will be replace with the actual ModuleName.&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;token property&quot;&gt;&quot;templateModuleName&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;_Name_&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;token property&quot;&gt;&quot;__comment__templateProjectGuid&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;The templateProjectGuid property contains the token which will be replaced by a new GUID and used as VS module project identifier.&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;token property&quot;&gt;&quot;templateProjectGuid&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;_ProjectGuid_&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;token property&quot;&gt;&quot;__comment__templateTestProjectGuid&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;The templateTestProjectGuid property contains the token which will be replaced by a new GUID and used as VS test project identifier.&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;token property&quot;&gt;&quot;templateTestProjectGuid&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;_TestProjectGuid_&quot;&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ul class=&quot;list&quot;&gt;&lt;li&gt;Type &lt;code&gt;Add-Feature&lt;/code&gt; or &lt;code&gt;Add-Foundation&lt;/code&gt; in the Package Manager Console followed by the name of the module and hit enter.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/20.4.add_feature_completed-440w.webp 440w, http://localhost:8080/assets/images/20.4.add_feature_completed-650w.webp 650w, http://localhost:8080/assets/images/20.4.add_feature_completed-960w.webp 960w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/20.4.add_feature_completed-960w.webp&quot; width=&quot;960&quot; height=&quot;638&quot; alt=&quot;Add-Feature Completed&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/20.5.solution_explorer-440w.webp 440w, http://localhost:8080/assets/images/20.5.solution_explorer-636w.webp 636w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/20.5.solution_explorer-636w.webp&quot; width=&quot;636&quot; height=&quot;258&quot; alt=&quot;Solution Explorer showing the added feature&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;In my &lt;a href=&quot;http://localhost:8080/articles/hands-on-with-sitecore-helix-anatomy-add-helix-powershell-script&quot;&gt;next post&lt;/a&gt; I‚Äôll dig deeper&lt;br&gt;into the inner workings of the &lt;code&gt;add-helixmodule.ps1&lt;/code&gt; PowerShell script.&lt;/p&gt;&lt;h2 id=&quot;so-are-we-done-now&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/hands-on-with-sitecore-helix-using-powershell-add-module/#so-are-we-done-now&quot; class=&quot;heading-anchor&quot;&gt;So are we done now?&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;No. Currently the script only works with an existing Visual Studio solution that uses the Helix/Habitat folder structure so it heavily relies on folder names called &lt;code&gt;Feature&lt;/code&gt; and &lt;code&gt;Foundation&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Improvements I can think of now:&lt;/p&gt;&lt;ul class=&quot;list&quot;&gt;&lt;li&gt;Make the script more robust/configurable so it works with other naming conventions instead on Feature/Foundation.&lt;/li&gt;&lt;li&gt;Add yml files for rendering and template folders similar as &lt;code&gt;generator-habitat&lt;/code&gt; is doing.&lt;/li&gt;&lt;li&gt;Extend the script so it could also create a whole new Sitecore Helix based solution.&lt;/li&gt;&lt;li&gt;Use separate template structures for Feature and Foundation modules.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;A whole different approach will be to investigate the experimental &lt;a href=&quot;https://github.com/elkdanger/vs-net-dte&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;vs-net-dte&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://github.com/elkdanger/gulp-notify-dte&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;gulp-notify-dte&lt;/code&gt;&lt;/a&gt; projects in order to get DTE to work with Gulp. Please do let me know if you have plans to dig into this üòÉ.&lt;/p&gt;
 			</content>
    </entry><entry>
      <title>Blog upgrade: Post excerpts, microformats and improving performance</title>
      <link href="http://localhost:8080/articles/blog-upgrade-excerpts-and-improving-performance/" />
      <updated>2016-12-03T00:00:00Z</updated>
      <id>http://localhost:8080/articles/blog-upgrade-excerpts-and-improving-performance/</id>
      <content type="html">
				&lt;h2 id=&quot;time-for-an-upgrade&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/blog-upgrade-excerpts-and-improving-performance/#time-for-an-upgrade&quot; class=&quot;heading-anchor&quot;&gt;Time for an upgrade&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I finally made some time available to work on this blog. There were a couple of things I wanted to improve since &lt;a href=&quot;http://localhost:8080/articles/moving-my-blog-i-love-github-and-markdown&quot;&gt;I moved to GitHub Pages/Jekyll&lt;/a&gt;.&lt;/p&gt;&lt;ol class=&quot;list&quot;&gt;&lt;li&gt;Better looking index page. Before todays change it was a &lt;strong&gt;very&lt;/strong&gt; simple (and boring) bulleted list of links containing the date and title of individual blogposts.&lt;/li&gt;&lt;li&gt;Improved content structure. Having a well defined content structure improves SEO.&lt;/li&gt;&lt;li&gt;Higher performance. Faster page loads makes both users and Google happy.&lt;/li&gt;&lt;/ol&gt;&lt;h2 id=&quot;index-page-with-blog-excerpts&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/blog-upgrade-excerpts-and-improving-performance/#index-page-with-blog-excerpts&quot; class=&quot;heading-anchor&quot;&gt;Index page with blog excerpts&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I wanted more body in the index page but I didn‚Äôt want a huge page with full blog posts.&lt;br&gt;Luckily Jekyll supports the usage of &lt;a href=&quot;https://jekyllrb.com/docs/posts/#post-excerpts&quot; rel=&quot;noopener&quot;&gt;post excerpts&lt;/a&gt; out of the box. You add the excerpt seperator to the _&lt;em&gt;config.yml&lt;/em&gt;:&lt;/p&gt;&lt;p&gt;&lt;code&gt;excerpt_separator: &amp;lt;!--more--&amp;gt;&lt;/code&gt;&lt;/p&gt;&lt;p&gt;And in the content of the post where the excerpt ends you place the seperator:&lt;/p&gt;&lt;pre class=&quot;language-markdown&quot;&gt;&lt;code class=&quot;language-markdown&quot;&gt;&lt;span class=&quot;token title important&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;##&lt;/span&gt; Title&lt;/span&gt;

This is included in the excerpt.

&lt;span class=&quot;token comment&quot;&gt;&amp;lt;!--more--&amp;gt;&lt;/span&gt;

This is not included int the excerpt.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Jekyll will use the content before the seperator as the excerpt. This can be used in the index page when iterating the posts as:&lt;/p&gt;&lt;pre class=&quot;language-markdown&quot;&gt;&lt;code class=&quot;language-markdown&quot;&gt;
{% for post in paginator.posts %}
  ...
  {{ post.excerpt }}
  ...
{% endfor %}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Super easy. Let‚Äôs continue with structuring the content.&lt;/p&gt;&lt;h2 id=&quot;blogposting-microformat&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/blog-upgrade-excerpts-and-improving-performance/#blogposting-microformat&quot; class=&quot;heading-anchor&quot;&gt;BlogPosting microformat&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I stumbled on &lt;a href=&quot;http://greyfocus.com/2015/05/schema.org-microformat-jekyll/&quot; rel=&quot;noopener&quot;&gt;this page&lt;/a&gt; on how to use a blogpost microformat with Jekyll.&lt;/p&gt;&lt;p&gt;Although I heard of microformats before I never really took the time to look into it. It appears that there are microformats for &lt;a href=&quot;https://schema.org/docs/full.html&quot; rel=&quot;noopener&quot;&gt;nearly everything&lt;/a&gt;!&lt;br&gt;Ranging from the most basic &lt;a href=&quot;https://schema.org/Thing&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;Thing&lt;/code&gt;&lt;/a&gt; to &lt;a href=&quot;https://schema.org/AdultEntertainment&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;AdultEntertainment&lt;/code&gt;&lt;/a&gt; to &lt;a href=&quot;https://schema.org/Volcano&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;Volcano&lt;/code&gt;&lt;/a&gt; (notice the &lt;code&gt;smokingAllowed&lt;/code&gt; propery on that one üòâ ).&lt;/p&gt;&lt;p&gt;The most useful for blog writers is the &lt;a href=&quot;https://schema.org/BlogPosting&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;BlogPosting&lt;/code&gt;&lt;/a&gt; microformat. I‚Äôm currently using the following properties in the &lt;code&gt;post.html&lt;/code&gt; layout:&lt;/p&gt;&lt;ul class=&quot;list&quot;&gt;&lt;li&gt;&lt;code&gt;itemscope itemtype=&quot;http://schema.org/BlogPosting&quot;&lt;/code&gt; on the &lt;code&gt;article&lt;/code&gt; element.&lt;/li&gt;&lt;li&gt;&lt;code&gt;itemprop=&quot;name&quot;&lt;/code&gt; on the &lt;code&gt;h1&lt;/code&gt; which contains the blog title.&lt;/li&gt;&lt;li&gt;&lt;code&gt;itemprop=&quot;datePublished&quot;&lt;/code&gt; on the &lt;code&gt;time&lt;/code&gt; element.&lt;/li&gt;&lt;li&gt;&lt;code&gt;itemprop=&quot;auhor&quot;&lt;/code&gt; and &lt;code&gt;itemscope itemtype=&quot;http://schema.org/Person&quot;&lt;/code&gt; on the &lt;code&gt;span&lt;/code&gt; which contains my name.&lt;/li&gt;&lt;li&gt;&lt;code&gt;itemprop=&quot;articleBody&quot;&lt;/code&gt; on the &lt;code&gt;div&lt;/code&gt; that contains the post body content.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Google provides &lt;a href=&quot;https://search.google.com/structured-data/testing-tool&quot; rel=&quot;noopener&quot;&gt;an online testing tool&lt;/a&gt; to verify structured website data.&lt;br&gt;Currently I‚Äôm still missing &lt;em&gt;publisher&lt;/em&gt; and &lt;em&gt;image&lt;/em&gt; data but search engines should already be able to index my blog posts better which will improve SEO.&lt;/p&gt;&lt;h2 id=&quot;improving-performance&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/blog-upgrade-excerpts-and-improving-performance/#improving-performance&quot; class=&quot;heading-anchor&quot;&gt;Improving performance&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The last thing on my list was to improve the performance of my blog. &lt;a href=&quot;http://yslow.org/&quot; rel=&quot;noopener&quot;&gt;YSlow&lt;/a&gt; and &lt;a href=&quot;https://developers.google.com/speed/pagespeed/insights/&quot; rel=&quot;noopener&quot;&gt;Google PageSpeed&lt;/a&gt; scores were around 80 out of 100 which is not bad to begin with.&lt;br&gt;But both of these tools indicated that using a &lt;a href=&quot;https://en.wikipedia.org/wiki/Content_delivery_network&quot; rel=&quot;noopener&quot;&gt;content delivery network&lt;/a&gt; (CDN) would improve performance. I‚Äôve used CDN solutions for work projects but never considered it for personal projects like this blog.&lt;/p&gt;&lt;p&gt;I found that &lt;a href=&quot;https://www.cloudflare.com/plans/&quot; rel=&quot;noopener&quot;&gt;CloudFlare&lt;/a&gt; offers a free plan for personal websites so I signed up right away. I was quite surprised that this free plan still allows a great deal of configuration. A useful feature is the &lt;em&gt;developer mode&lt;/em&gt; which disables the caching temporarily so you can see your changes quickly.&lt;/p&gt;&lt;p&gt;The YSlow score for this page is now at 92 and Google PageSpeed is at 85 and I‚Äôm quite content with those numbers. Now it‚Äôs time to write more posts again and get the traffic going!&lt;/p&gt;
 			</content>
    </entry><entry>
      <title>Improving unit test readability: helper methods &amp; named arguments</title>
      <link href="http://localhost:8080/articles/improving-unit-test-readability-named-args/" />
      <updated>2016-06-01T00:00:00Z</updated>
      <id>http://localhost:8080/articles/improving-unit-test-readability-named-args/</id>
      <content type="html">
				&lt;p&gt;‚ÄòUncle Bob‚Äô wrote the following in &lt;a rel=&quot;nofollow&quot; href=&quot;https://www.amazon.co.uk/gp/product/0132350882/&quot;&gt;Clean Code: A Handbook of Agile Software Craftsmanship&lt;/a&gt;:&lt;/p&gt;&lt;p&gt;&lt;em&gt;‚ÄúThe ratio of time spent reading (code) versus writing is well over 10 to 1 ‚Ä¶ (therefore) making it easy to read makes it easier to write.‚Äù&lt;/em&gt;&lt;/p&gt;&lt;p&gt;So think about that when you write your next bit of code. You need to make sure your code is easily readable and understandable for &lt;em&gt;others&lt;/em&gt;, you hardly ever write code just for yourself.&lt;/p&gt;&lt;h2 id=&quot;readable-unit-tests&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/improving-unit-test-readability-named-args/#readable-unit-tests&quot; class=&quot;heading-anchor&quot;&gt;Readable unit tests&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Unit test code is not different than ‚Äòproduction‚Äô code. Readability is key here because unclear unit tests will be distrusted, ignored and possibly removed.&lt;/p&gt;&lt;h3 id=&quot;bulky-arrange-section&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/improving-unit-test-readability-named-args/#bulky-arrange-section&quot; class=&quot;heading-anchor&quot;&gt;Bulky Arrange section&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Consider the following unit test for testing the &lt;code&gt;GetHighestRatedMovies&lt;/code&gt; method in an imaginary &lt;code&gt;MovieService&lt;/code&gt;:&lt;/p&gt;&lt;p&gt;&lt;strong&gt;UnitTestWithBulkyArrangeSection.cs&lt;/strong&gt;&lt;/p&gt;&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token attribute&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;Fact&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;GetHighestRatedMovies_RepositoryContainsMoviesWithRatings_ReturnsMoviesOrderedByDescendingRating&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// Arrange&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; fixture &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;Fixture&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; movieCollection &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; fixture&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token generic-method&quot;&gt;&lt;span class=&quot;token function&quot;&gt;CreateMany&lt;/span&gt;&lt;span class=&quot;token generic class-name&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;Movie&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ToList&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; fakeMovieRepository &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; A&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token generic-method&quot;&gt;&lt;span class=&quot;token function&quot;&gt;Fake&lt;/span&gt;&lt;span class=&quot;token generic class-name&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;IMovieRepository&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    A&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;CallTo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt; fakeMovieRepository&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;GetAll&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Returns&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;movieCollection&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;IMovieService&lt;/span&gt; movieService &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;MovieService&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;fakeMovieRepository&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;MovieServiceRequest&lt;/span&gt; request &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;MovieServiceRequest&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; NumberOfMoviesToReturn &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;// Act&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;IList&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;Movie&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; movies &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; movieService&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;GetHighestRatedMovies&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;// Assert&lt;/span&gt;
    movies&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Should&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;BeInDescendingOrder&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;movie &lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt; movie&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Rating&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Although this unit test uses some great frameworks such as &lt;a href=&quot;https://xunit.github.io/&quot; rel=&quot;noopener&quot;&gt;xUnit&lt;/a&gt;, &lt;a href=&quot;https://github.com/AutoFixture/AutoFixture&quot; rel=&quot;noopener&quot;&gt;AutoFixture&lt;/a&gt;, &lt;a href=&quot;https://github.com/FakeItEasy/FakeItEasy&quot; rel=&quot;noopener&quot;&gt;FakeItEasy&lt;/a&gt; and &lt;a href=&quot;http://www.fluentassertions.com/&quot; rel=&quot;noopener&quot;&gt;FluentAssertions&lt;/a&gt; (big fan of these!) there are still some things I don‚Äôt like, particularly in the &lt;em&gt;Arrange&lt;/em&gt; section:&lt;/p&gt;&lt;ul class=&quot;list&quot;&gt;&lt;li&gt;In lines 5-6 a collection of &lt;code&gt;Movie&lt;/code&gt; objects is set up using &lt;em&gt;AutoFixture&lt;/em&gt;. I get why this collection is neccesary but I really don‚Äôt care about &lt;strong&gt;how&lt;/strong&gt; it‚Äôs done. In addition you could argue that 20 is a magic number although the intent is quite clear here. It can definitely be a bit more clear.&lt;/li&gt;&lt;li&gt;In lines 7-8 a fake object based on &lt;code&gt;IMovieRepository&lt;/code&gt; is created using &lt;em&gt;FakeItEasy&lt;/em&gt;. The fake repository is required to be able to return &lt;code&gt;Movie&lt;/code&gt; objects from the &lt;code&gt;MovieService&lt;/code&gt; but again I don‚Äôt really care &lt;strong&gt;how&lt;/strong&gt; that is done.&lt;/li&gt;&lt;li&gt;In line 9 the &lt;code&gt;MovieService&lt;/code&gt; is instantiated and the fake repository is passed in the constructor. But what are the &lt;code&gt;null&lt;/code&gt; arguments there? What do they represent?&lt;/li&gt;&lt;li&gt;In line 10 a &lt;code&gt;MovieServiceRequest&lt;/code&gt; object is constructed. It‚Äôs a simple value object with just one property. But what will happen if more properties are added later? Then the construction of this request will take up quite some space which has a negative impact on readability.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;In general I feel there is too much detail in this &lt;em&gt;Arrange&lt;/em&gt; section which is not relevant for understanding the unit test.&lt;br&gt;Although 6 lines is not that much I do believe fewer lines in the &lt;em&gt;Arrange&lt;/em&gt; and clear usage of arguments will improve the readability a lot.&lt;/p&gt;&lt;h3 id=&quot;lean-arrange-section&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/improving-unit-test-readability-named-args/#lean-arrange-section&quot; class=&quot;heading-anchor&quot;&gt;Lean Arrange section&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Here‚Äôs how I refactored the unit test:&lt;/p&gt;&lt;p&gt;&lt;strong&gt;UnitTestWithLeanArrangeSection.cs&lt;/strong&gt;&lt;/p&gt;&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token attribute&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;Fact&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;GetHighestRatedMovies_RepositoryContainsMoviesWithRatings_ReturnsMoviesOrderedByDescendingRating&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// Arrange&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;IMovieRepository&lt;/span&gt; fakeMovieRepository &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;GetFakeMovieRepository&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token named-parameter punctuation&quot;&gt;nrOfMoviesInRepository&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;IMovieService&lt;/span&gt; movieService &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;MovieService&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;fakeMovieRepository&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token named-parameter punctuation&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token named-parameter punctuation&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;MovieServiceRequest&lt;/span&gt; request &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;GetMovieServiceRequest&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token named-parameter punctuation&quot;&gt;nrOfMoviesToReturn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;// Act&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;IList&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;Movie&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; movies &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; movieService&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;GetHighestRatedMovies&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;// Assert&lt;/span&gt;
    movies&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Should&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;BeInDescendingOrder&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;movie &lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt; movie&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Rating&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;IMovieRepository&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;GetFakeMovieRepository&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt; nrOfMoviesInRepository&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; fixture &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;Fixture&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; movies &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; fixture&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token generic-method&quot;&gt;&lt;span class=&quot;token function&quot;&gt;CreateMany&lt;/span&gt;&lt;span class=&quot;token generic class-name&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;Movie&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;nrOfMoviesInRepository&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ToList&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; fakeRepository &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; A&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token generic-method&quot;&gt;&lt;span class=&quot;token function&quot;&gt;Fake&lt;/span&gt;&lt;span class=&quot;token generic class-name&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;IMovieRepository&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    A&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;CallTo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt; fakeRepository&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;GetAll&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Returns&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;movies&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; fakeRepository&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;MovieServiceRequest&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;GetMovieServiceRequest&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt; nrOfMoviesToReturn&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;MovieServiceRequest&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            NumberOfMoviesToReturn &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; nrOfMoviesToReturn
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;There are two major differences:&lt;/p&gt;&lt;ul class=&quot;list&quot;&gt;&lt;li&gt;Creation of fake objects and the request object is now done in private methods. This allows re-usage of these methods in future unit tests. When the number of these helper methods grows you should consider moving them to a seperate class.&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://msdn.microsoft.com/library/dd264739.aspx&quot; rel=&quot;noopener&quot;&gt;Named arguments&lt;/a&gt; (available since C# 4.0) are used when calling the helper methods and for constructing the &lt;code&gt;MovieService&lt;/code&gt;. It is now evident what the &lt;code&gt;null&lt;/code&gt; values actually represent. An alternative would be to declare seperate variables for all these arguments. Although that would be very clear and descriptive I believe that would hurt readability because the &lt;em&gt;Arrange&lt;/em&gt; section would get quite bulky again.&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&quot;tips-for-keeping-your-unit-tests-lean-and-understandable&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/improving-unit-test-readability-named-args/#tips-for-keeping-your-unit-tests-lean-and-understandable&quot; class=&quot;heading-anchor&quot;&gt;Tips for keeping your unit tests lean and understandable&lt;/a&gt;&lt;/h3&gt;&lt;ul class=&quot;list&quot;&gt;&lt;li&gt;I usually only ‚Äònew up‚Äô the class under test directly in the &lt;em&gt;Arrange&lt;/em&gt; section, other (fake) objects are created in helper methods or classes.&lt;/li&gt;&lt;li&gt;Use existing and proven libraries &amp;amp; frameworks so you don‚Äôt have to write boilerplate code and you can focus on more difficult problems.&lt;ul class=&quot;list&quot;&gt;&lt;li&gt;Try to use a mocking framework (such as &lt;a href=&quot;https://github.com/FakeItEasy/FakeItEasy&quot; rel=&quot;noopener&quot;&gt;FakeItEasy&lt;/a&gt;) over a custom made mock/stub framework. Using a custom framework costs time in two ways: it needs to be maintained and it needs to be explained to every new member on the team.&lt;/li&gt;&lt;li&gt;Need to create collections of fake objecs? Consider using &lt;a href=&quot;http://blog.ploeh.dk/2009/05/11/AnonymousSequencesWithAutoFixture/&quot; rel=&quot;noopener&quot;&gt;AutoFixture‚Äôs &lt;code&gt;CreateMany&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;The &lt;a href=&quot;http://www.fluentassertions.com/&quot; rel=&quot;noopener&quot;&gt;FluentAssertions&lt;/a&gt; library contains dozens of useful assert methods, especially for collections.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Always be very explicit in naming the methods and arguments to avoid unclarity. Consider using named arguments when you need to pass numbers, strings or null to methods. If you‚Äôre using code analysis tools such as Resharper you‚Äôll get warnings that the usage of named arguments is not required most of the time. You might want to lower the severity of that message so the code analysis stays ‚Äògreen‚Äô.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Happy unit testing!&lt;/p&gt;
 			</content>
    </entry><entry>
      <title>Workflow Management SPE Module</title>
      <link href="http://localhost:8080/articles/workflow-management-spe-module/" />
      <updated>2016-05-16T00:00:00Z</updated>
      <id>http://localhost:8080/articles/workflow-management-spe-module/</id>
      <content type="html">
				&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/17.1.workflow_management-275w.webp 275w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/17.1.workflow_management-275w.webp&quot; width=&quot;275&quot; height=&quot;79&quot; alt=&quot;Workflow Management SPE Module&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;h2 id=&quot;sitecore-powershell-extensions-first-encounter&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/workflow-management-spe-module/#sitecore-powershell-extensions-first-encounter&quot; class=&quot;heading-anchor&quot;&gt;Sitecore PowerShell Extensions first encounter&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Although I had heard of &lt;a href=&quot;https://marketplace.sitecore.net/Modules/S/Sitecore_PowerShell_console.aspx&quot; rel=&quot;noopener&quot;&gt;Sitecore PowerShell Extensions (SPE)&lt;/a&gt; several years ago I never used it myself until earlier this month.&lt;br&gt;My interest was raised again during the &lt;em&gt;Accelerated development with Sitecore PowerShell Extensions&lt;/em&gt; session by &lt;a href=&quot;https://twitter.com/adamnaj&quot; rel=&quot;noopener&quot;&gt;Adam Najmanowicz&lt;/a&gt; during SUGCON Europe 2016.&lt;/p&gt;&lt;p&gt;Right after I got back from SUGCON the project I was working on had a nice challenge. Workflows were being set on existing templates and hundreds of content items had already been created using these templates and had no workflow or workflow state set on them.&lt;br&gt;We needed a way to update the content items with the workflow that was set on the &lt;em&gt;Default workflow&lt;/em&gt; field on the updated templates.&lt;/p&gt;&lt;p&gt;For me this was an excellent opportunity to try SPE. I wrote a Sitecore PowerShell script to update &lt;em&gt;Workflow&lt;/em&gt; and &lt;em&gt;Workflow state&lt;/em&gt; fields, posted it &lt;a href=&quot;https://gist.github.com/marcduiker/950e0358bb4752ed5b047931a8c958c1&quot; rel=&quot;noopener&quot;&gt;in a gist&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/marcduiker/status/728375187431936000&quot; rel=&quot;noopener&quot;&gt;tweeted&lt;/a&gt; about it. I got in contact with &lt;a href=&quot;https://twitter.com/michaelwest101&quot; rel=&quot;noopener&quot;&gt;Michael West&lt;/a&gt; and Adam Najmanowicz (the developers of SPE) who made some excellent suggestions to improve the user friendliness of the script.&lt;/p&gt;&lt;h2 id=&quot;workflow-management-module&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/workflow-management-spe-module/#workflow-management-module&quot; class=&quot;heading-anchor&quot;&gt;Workflow Management Module&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Adam asked if I could turn the script into a custom SPE module that could be installed alongside SPE. I really liked this idea and this made me delve deeper in SPE which is btw &lt;a href=&quot;https://sitecorepowershell.gitbooks.io/sitecore-powershell-extensions/content/&quot; rel=&quot;noopener&quot;&gt;extremely well documented&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;And now the Workflow Management module is ready. Currently only containing one toolbox action: &lt;em&gt;Update workflow and state for content items&lt;/em&gt; but more will follow.&lt;/p&gt;&lt;h3 id=&quot;installation&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/workflow-management-spe-module/#installation&quot; class=&quot;heading-anchor&quot;&gt;Installation&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;You‚Äôll need SPE v4 and Sitecore 8.x to make use of the module. The zip package can be found in the &lt;a href=&quot;https://github.com/marcduiker/SPE-Modules/blob/master/sitecore-packages/Workflow%20Management%20SPE%20Module-1.0.zip&quot; rel=&quot;noopener&quot;&gt;GitHub repo&lt;/a&gt; or on the Sitecore Marketplace (soon).&lt;/p&gt;&lt;p&gt;Install the zip package using the Installation Wizard:&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/17.2.workflow_management_install1-440w.webp 440w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/17.2.workflow_management_install1-440w.webp&quot; width=&quot;440&quot; height=&quot;440&quot; alt=&quot;Workflow Management SPE Module&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/17.3.workflow_management_install2-440w.webp 440w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/17.3.workflow_management_install2-440w.webp&quot; width=&quot;440&quot; height=&quot;440&quot; alt=&quot;Workflow Management SPE Module&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;h3 id=&quot;workflow-management-toolbox&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/workflow-management-spe-module/#workflow-management-toolbox&quot; class=&quot;heading-anchor&quot;&gt;Workflow Management toolbox&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Once the package is installed you‚Äôll see that a &lt;em&gt;Workflow Management&lt;/em&gt; element is added to the PowerShell toolbox:&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/17.4.workflow_management_toolbox-440w.webp 440w, http://localhost:8080/assets/images/17.4.workflow_management_toolbox-650w.webp 650w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/17.4.workflow_management_toolbox-650w.webp&quot; width=&quot;650&quot; height=&quot;231&quot; alt=&quot;Workflow Management SPE Module&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;When you click the &lt;em&gt;Update workflow and state for content items&lt;/em&gt; action you‚Äôll be presented with the following dialog:&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/17.5.workflow_management_dialog1-440w.webp 440w, http://localhost:8080/assets/images/17.5.workflow_management_dialog1-600w.webp 600w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/17.5.workflow_management_dialog1-600w.webp&quot; width=&quot;600&quot; height=&quot;436&quot; alt=&quot;Workflow Management SPE Module&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;Here you need to select the &lt;strong&gt;workflow state&lt;/strong&gt; which is expected to be set on the content items in a later stage.&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/17.6.workflow_management_dialog2-440w.webp 440w, http://localhost:8080/assets/images/17.6.workflow_management_dialog2-600w.webp 600w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/17.6.workflow_management_dialog2-600w.webp&quot; width=&quot;600&quot; height=&quot;436&quot; alt=&quot;Workflow Management SPE Module&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;Once you click &lt;em&gt;Proceed&lt;/em&gt; the script will do the following:&lt;/p&gt;&lt;ul class=&quot;list&quot;&gt;&lt;li&gt;Find the workflow for the selected workflow state.&lt;/li&gt;&lt;li&gt;Find the templates which have the workflow set on the &lt;em&gt;Default workflow&lt;/em&gt; field in their __&lt;em&gt;Standard Values&lt;/em&gt;.&lt;/li&gt;&lt;li&gt;Find the content items based on these templates and only list those items which &lt;em&gt;Workflow&lt;/em&gt; field are empty.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/17.7.workflow_management_report1-440w.webp 440w, http://localhost:8080/assets/images/17.7.workflow_management_report1-650w.webp 650w, http://localhost:8080/assets/images/17.7.workflow_management_report1-960w.webp 960w, http://localhost:8080/assets/images/17.7.workflow_management_report1-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/17.7.workflow_management_report1-1200w.webp&quot; width=&quot;1200&quot; height=&quot;565&quot; alt=&quot;Workflow Management SPE Module&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;To update the content items with the workflow and workflow state you can choose between two actions in the menu:&lt;/p&gt;&lt;ul class=&quot;list&quot;&gt;&lt;li&gt;Update workflow for all items.&lt;/li&gt;&lt;li&gt;Update workflow for selected items.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;After running one of these actions you will see a notification about the number of items that have been processed.&lt;br&gt;The list will be updated and now includes the &lt;em&gt;workflow ID&lt;/em&gt; and &lt;em&gt;workflow state ID&lt;/em&gt; values for the items.&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/17.8.workflow_management_report2-440w.webp 440w, http://localhost:8080/assets/images/17.8.workflow_management_report2-650w.webp 650w, http://localhost:8080/assets/images/17.8.workflow_management_report2-960w.webp 960w, http://localhost:8080/assets/images/17.8.workflow_management_report2-1200w.webp 1200w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/17.8.workflow_management_report2-1200w.webp&quot; width=&quot;1200&quot; height=&quot;565&quot; alt=&quot;Workflow Management SPE Module&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;h2 id=&quot;final-thoughts&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/workflow-management-spe-module/#final-thoughts&quot; class=&quot;heading-anchor&quot;&gt;Final Thoughts&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;This was mostly a fun learning exercise for me getting to know Sitecore PowerShell Extensions. I really like SPE and I plan to use it much more for automating tedious manual tasks.&lt;/p&gt;&lt;p&gt;I do hope this Workflow Management module can be of use to others. Please make sure you try it on a development or test environment first before using it on production.&lt;/p&gt;&lt;p&gt;When I tested it on 101 content items it took about 10 seconds to process them on my (outdated) local machine. So be careful when you want to process large amounts of items.&lt;br&gt;In that case you might be better of with the &lt;a href=&quot;https://gist.github.com/marcduiker/950e0358bb4752ed5b047931a8c958c1&quot; rel=&quot;noopener&quot;&gt;simple script&lt;/a&gt; without the UI.&lt;/p&gt;&lt;p&gt;If you have any feature requests or issues, please post them on &lt;a href=&quot;https://github.com/marcduiker/SPE-Modules&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
 			</content>
    </entry><entry>
      <title>Sitecore investigation: Errors installing a content package with item buckets</title>
      <link href="http://localhost:8080/articles/sitecore-investigation-error-installing-item-bucket-package/" />
      <updated>2016-04-28T00:00:00Z</updated>
      <id>http://localhost:8080/articles/sitecore-investigation-error-installing-item-bucket-package/</id>
      <content type="html">
				&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/16.1.bucket_icon-440w.webp 440w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/16.1.bucket_icon-440w.webp&quot; width=&quot;440&quot; height=&quot;186&quot; alt=&quot;Bucket Icon&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;A colleague showed me this error today in the Sitecore log:&lt;/p&gt;&lt;p&gt;&lt;code&gt;ERROR There is no appropriate index for [item path - {GUID}]. You have to add an index crawler that will cover this item&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;‚ÄòI‚Äôve never seen that!‚Äô&lt;/em&gt; was my first reaction‚Ä¶&lt;/p&gt;&lt;p&gt;This issue occurred when a Sitecore zip package with content items was installed on another environment. There were quite some lines in the Sitecore log which mentioned the same error but for different item paths and GUIDS. I looked up the GUIDS on my local machine and they were all &lt;code&gt;Bucket&lt;/code&gt; folder items with no content items in them.&lt;/p&gt;&lt;p&gt;Here‚Äôs an example of how that looks like (when you‚Äôve checked the &lt;em&gt;Buckets&lt;/em&gt; option in the &lt;em&gt;View&lt;/em&gt; toolbar):&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/16.2.item_bucket_without_content-268w.webp 268w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/16.2.item_bucket_without_content-268w.webp&quot; width=&quot;268&quot; height=&quot;288&quot; alt=&quot;Item bucket with an empty bucket folder&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;h3 id=&quot;cause&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/sitecore-investigation-error-installing-item-bucket-package/#cause&quot; class=&quot;heading-anchor&quot;&gt;Cause&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Apparently when &lt;em&gt;bucketable&lt;/em&gt; items are deleted their automatically generated parent folders are not deleted. There is a built-in task that periodically removes the empty &lt;code&gt;Bucket&lt;/code&gt; items but this is disabled by default in the configuration as Ra√∫l Jim√©nez describes in &lt;a href=&quot;http://blog.rauljimenez.co.uk/the-depths-of-the-bucket/&quot; rel=&quot;noopener&quot;&gt;this post&lt;/a&gt;.&lt;/p&gt;&lt;h3 id=&quot;solution&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/sitecore-investigation-error-installing-item-bucket-package/#solution&quot; class=&quot;heading-anchor&quot;&gt;Solution&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;When you use item buckets, make sure you uncomment the &lt;code&gt;RemoveEmptyBucketFolders&lt;/code&gt; agent section in the Sitecore.Buckets.config as shown below (or even better: make a patch file to enable it):&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Sitecore.Buckets.config.xml&lt;/strong&gt;&lt;/p&gt;&lt;pre class=&quot;language-xml&quot;&gt;&lt;code class=&quot;language-xml&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- EMPTY BUCKET CLEANING JOB
         This job runs at the set interval time and removes item bucket folders that no longer contain any items.
         This could be cause by deleting an item from a bucket, which has no other items in it.
--&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;scheduling&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;frequency&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;00:00:05&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;frequency&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- Adjust the interval and frequency as needed to speed things up on a local dev environment. --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;agent&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;Sitecore.Buckets.Tasks.RemoveEmptyBucketFolders&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;Run&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;interval&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;00:00:10&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;DatabaseName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;master&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;DatabaseName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;agent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;scheduling&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Finally, always double check if there are empty &lt;code&gt;Bucket&lt;/code&gt; folder items before making a content package that will contain bucketable items.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Case closed&lt;/strong&gt;&lt;/p&gt;
 			</content>
    </entry><entry>
      <title>Ruling the continuous integration seas with Sitecore.Ship - Part 2: fileupload</title>
      <link href="http://localhost:8080/articles/ruling-the-continuous-integration-seas-with-sitecore-ship-part-2/" />
      <updated>2015-10-31T00:00:00Z</updated>
      <id>http://localhost:8080/articles/ruling-the-continuous-integration-seas-with-sitecore-ship-part-2/</id>
      <content type="html">
				&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/15.1.one-does-not-simply-make-a-proper-http-request-440w.webp 440w, http://localhost:8080/assets/images/15.1.one-does-not-simply-make-a-proper-http-request-568w.webp 568w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/15.1.one-does-not-simply-make-a-proper-http-request-568w.webp&quot; width=&quot;568&quot; height=&quot;335&quot; alt=&quot;One does not simply make a proper http request&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;h2 id=&quot;deploying-sitecore-items-with-sitecoreship&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/ruling-the-continuous-integration-seas-with-sitecore-ship-part-2/#deploying-sitecore-items-with-sitecoreship&quot; class=&quot;heading-anchor&quot;&gt;Deploying Sitecore items with Sitecore.Ship&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;As I mentioned in the &lt;a href=&quot;http://localhost:8080/articles/ruling-the-continuous-integration-seas-with-sitecore-ship-part-1&quot;&gt;previous post&lt;/a&gt;&lt;br&gt;Sitecore.Ship can be used to install Sitecore &lt;code&gt;update&lt;/code&gt; or &lt;code&gt;zip&lt;/code&gt; packages by posting HTTP requests to the Sitecore site.&lt;/p&gt;&lt;h3 id=&quot;configuration&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/ruling-the-continuous-integration-seas-with-sitecore-ship-part-2/#configuration&quot; class=&quot;heading-anchor&quot;&gt;Configuration&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;I forgot to talk about the configuration in the previous post so let‚Äôs have a look at that now.&lt;br&gt;The Sitecore.Ship configuration is split into two parts:&lt;/p&gt;&lt;ul class=&quot;list&quot;&gt;&lt;li&gt;&lt;p&gt;The &lt;strong&gt;&lt;code&gt;ship.config&lt;/code&gt;&lt;/strong&gt; file (located in App_Config&#92;Include) contains the&lt;br&gt;patched &lt;code&gt;IgnoreUrlPrefixes&lt;/code&gt; attribute to include the &lt;code&gt;/services/&lt;/code&gt; url part which Sitecore.Ship is using.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;The &lt;strong&gt;&lt;code&gt;web.config&lt;/code&gt;&lt;/strong&gt; is updated with a &lt;code&gt;packageInstallation&lt;/code&gt; element.&lt;br&gt;The default values of this element are:&lt;/p&gt;&lt;p&gt;&lt;code&gt;&amp;lt;packageInstallation enabled=&quot;true&quot; allowRemote=&quot;false&quot; allowPackageStreaming=&quot;false&quot; recordInstallationHistory=&quot;false&quot; /&amp;gt;&lt;/code&gt;&lt;/p&gt;&lt;p&gt;The attributes are pretty self explanatory. I‚Äôll get to the &lt;code&gt;recordInstallationHistory&lt;/code&gt; in a later post.&lt;br&gt;Just make sure it is &lt;code&gt;false&lt;/code&gt; otherwise there will be errors about a missing &lt;em&gt;PackageId&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&quot;uploading-and-installing-a-package&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/ruling-the-continuous-integration-seas-with-sitecore-ship-part-2/#uploading-and-installing-a-package&quot; class=&quot;heading-anchor&quot;&gt;Uploading and installing a package&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;One of the most useful commands of Sitecore.Ship is &lt;code&gt;fileupload&lt;/code&gt;. When you issue an HTTP request to &lt;code&gt;&amp;lt;website&amp;gt;/services/package/install/fileupload&lt;/code&gt;&lt;br&gt;you can upload &lt;em&gt;and&lt;/em&gt; install a Sitecore package.&lt;/p&gt;&lt;p&gt;The &lt;a href=&quot;https://github.com/kevinobee/Sitecore.Ship/wiki/Package-Install-Upload&quot; rel=&quot;noopener&quot;&gt;wiki&lt;/a&gt; describes that you need to provide the path of&lt;br&gt;the package as form-data in the request. Lets have look how that is done exactly.&lt;/p&gt;&lt;h4 id=&quot;postman&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/ruling-the-continuous-integration-seas-with-sitecore-ship-part-2/#postman&quot; class=&quot;heading-anchor&quot;&gt;Postman&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;The easiest way to test the commands Sitecore.Ship offers is to use an HTTP/REST client such as &lt;a href=&quot;https://www.getpostman.com/&quot; rel=&quot;noopener&quot;&gt;Postman&lt;/a&gt;,&lt;br&gt;which I‚Äôm using here.&lt;/p&gt;&lt;ul class=&quot;list&quot;&gt;&lt;li&gt;&lt;p&gt;Once you‚Äôve started Postman you‚Äôll see this screen:&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/15.2.postman_start-440w.webp 440w, http://localhost:8080/assets/images/15.2.postman_start-650w.webp 650w, http://localhost:8080/assets/images/15.2.postman_start-960w.webp 960w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/15.2.postman_start-960w.webp&quot; width=&quot;960&quot; height=&quot;365&quot; alt=&quot;Postman startup screen&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Change the following fields to do a post request to upload and install a package:&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/15.3.postman_data-440w.webp 440w, http://localhost:8080/assets/images/15.3.postman_data-650w.webp 650w, http://localhost:8080/assets/images/15.3.postman_data-960w.webp 960w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/15.3.postman_data-960w.webp&quot; width=&quot;960&quot; height=&quot;365&quot; alt=&quot;Postman fileupload post request&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Note that the value of the &lt;em&gt;Key&lt;/em&gt; parameter (&lt;code&gt;path&lt;/code&gt; in this example) is actually irrelevant, it can be any value.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Once the value type is set to &lt;code&gt;File&lt;/code&gt; an &lt;em&gt;Open file&lt;/em&gt; dialog can be used to select the file to upload.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Now press the blue Send button to do the post request.&lt;br&gt;If everything went well output shows the Sitecore IDs and path of the items that were in the package and have been installed:&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/15.4.postman_result-440w.webp 440w, http://localhost:8080/assets/images/15.4.postman_result-650w.webp 650w, http://localhost:8080/assets/images/15.4.postman_result-960w.webp 960w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/15.4.postman_result-960w.webp&quot; width=&quot;960&quot; height=&quot;658&quot; alt=&quot;Postman fileupload response&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;So far so good, but we don‚Äôt want to use Postman manually in order to upload and install packages for every deployment right?&lt;br&gt;We need a solution that can be automated and used in a continuous integration setup.&lt;/p&gt;&lt;h4 id=&quot;curl&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/ruling-the-continuous-integration-seas-with-sitecore-ship-part-2/#curl&quot; class=&quot;heading-anchor&quot;&gt;cURL&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;I first looked into PowerShell and the &lt;code&gt;Invoke-RestMethod&lt;/code&gt; command but it appeared that OOTB this method does not support multipart form data, which is required to call the &lt;code&gt;fileupload&lt;/code&gt; command.&lt;br&gt;There is &lt;a href=&quot;http://stackoverflow.com/a/25083745/112544&quot; rel=&quot;noopener&quot;&gt;a workaround&lt;/a&gt; to create the required multipart boundaries in the request but I did not like this approach. I looked for another solution and found cURL.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://curl.haxx.se/&quot; rel=&quot;noopener&quot;&gt;cURL&lt;/a&gt; is a very powerful commandline application to script HTTP jobs.&lt;br&gt;Getting the syntax right can be a little tricky although there is quite some &lt;a href=&quot;http://curl.haxx.se/docs/httpscripting.html&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt;.&lt;br&gt;Luckily Postman can generate various scripts including one for cURL:&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/15.5.postman_generate-440w.webp 440w, http://localhost:8080/assets/images/15.5.postman_generate-650w.webp 650w, http://localhost:8080/assets/images/15.5.postman_generate-888w.webp 888w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/15.5.postman_generate-888w.webp&quot; width=&quot;888&quot; height=&quot;293&quot; alt=&quot;Postman generate code&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/15.6.postman_curl-440w.webp 440w, http://localhost:8080/assets/images/15.6.postman_curl-559w.webp 559w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/15.6.postman_curl-559w.webp&quot; width=&quot;559&quot; height=&quot;414&quot; alt=&quot;Postman cURL code&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;However the cURL script in the screenshot above contains a lot of unncessesary statements and actually gives errors.&lt;br&gt;I‚Äôve found that this is the minimal cURL syntax which works for me:&lt;/p&gt;&lt;p&gt;&lt;code&gt;curl -F &quot;path=@&amp;lt;path to update or zip package&amp;gt;&quot; &#39;http://&amp;lt;website&amp;gt;/services/package/install/fileupload&#39;&lt;/code&gt;&lt;/p&gt;&lt;p&gt;Sofar we‚Äôve only replaced Postman with cURL, but since cURL is a commandline tool it can be easily called&lt;br&gt;from a script during a deployment process as we‚Äôll see next.&lt;/p&gt;&lt;h4 id=&quot;powershell&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/ruling-the-continuous-integration-seas-with-sitecore-ship-part-2/#powershell&quot; class=&quot;heading-anchor&quot;&gt;PowerShell&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;In the Gist below you can see the &lt;em&gt;deploy-sitecorepackage.ps1&lt;/em&gt; script which I use to upload and deploy Sitecore packages.&lt;br&gt;I actually prefer to use the more verbose cURL syntax (e.g. &lt;code&gt;--form&lt;/code&gt; instead of &lt;code&gt;-F&lt;/code&gt;) because I believe the intention&lt;br&gt;of the script is much more clear to the reader who might not know the syntax well.&lt;br&gt;A full description of the parameters can be found in the &lt;a href=&quot;http://curl.haxx.se/docs/manpage.html&quot; rel=&quot;noopener&quot;&gt;cURL manual&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;deploy-sitecorepackage.ps1&lt;/strong&gt;&lt;/p&gt;&lt;pre class=&quot;language-powershell&quot;&gt;&lt;code class=&quot;language-powershell&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;&amp;lt;#
    This function uploads &amp;amp; installs the specified Sitecore update package to the given $SiteUrl.
    It uses cURL (http://curl.haxx.se/) to post a request to a Sitecore website which has Sitecore Ship installed.

    Example usage: 
    .&#92;deploy-sitecorepackage.ps1 mysite.dev &quot;C:&#92;Project&#92;Build&#92;Artifacts&#92;1-mysite-templates.update&quot; 60 300
#&amp;gt;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;Param&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token namespace&quot;&gt;[Parameter(Position=0, Mandatory=$true)]&lt;/span&gt;
    &lt;span class=&quot;token namespace&quot;&gt;[string]&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$SiteUrl&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token namespace&quot;&gt;[Parameter(Position=1, Mandatory=$true)]&lt;/span&gt;
    &lt;span class=&quot;token namespace&quot;&gt;[string]&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$UpdatePackagePath&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token namespace&quot;&gt;[Parameter(Position=2)]&lt;/span&gt;
    &lt;span class=&quot;token namespace&quot;&gt;[ValidateRange(0, 99999)]&lt;/span&gt;
    &lt;span class=&quot;token namespace&quot;&gt;[int]&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$ConnectionTimeOutInSeconds&lt;/span&gt; = 300&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token namespace&quot;&gt;[Parameter(Position=3)]&lt;/span&gt;
    &lt;span class=&quot;token namespace&quot;&gt;[ValidateRange(0, 99999)]&lt;/span&gt;
    &lt;span class=&quot;token namespace&quot;&gt;[int]&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$MaxTimeOutInSeconds&lt;/span&gt; = 900
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token variable&quot;&gt;$fileUploadUrl&lt;/span&gt; = &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;$SiteUrl&lt;/span&gt;/services/package/install/fileupload&quot;&lt;/span&gt;
&lt;span class=&quot;token variable&quot;&gt;$curlPath&lt;/span&gt; = &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&#92;&lt;span class=&quot;token function&quot;&gt;get-curlpath&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ps1
&lt;span class=&quot;token variable&quot;&gt;$curlCommand&lt;/span&gt;= &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;$curlPath&lt;/span&gt; --show-error --silent --connect-timeout &lt;span class=&quot;token variable&quot;&gt;$ConnectionTimeOutInSeconds&lt;/span&gt; --max-time &lt;span class=&quot;token variable&quot;&gt;$MaxTimeOutInSeconds&lt;/span&gt; --form &quot;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;filename=@&lt;span class=&quot;token variable&quot;&gt;$UpdatePackagePath&lt;/span&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot; &lt;span class=&quot;token variable&quot;&gt;$fileUploadUrl&lt;/span&gt;&quot;&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;Write-Output&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;INFO: Starting Invoke-Expression: &lt;span class=&quot;token variable&quot;&gt;$curlCommand&lt;/span&gt;&quot;&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;Invoke-Expression&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$curlCommand&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;em&gt;deploy-sitecorepackage.ps1&lt;/em&gt; script uses another script called &lt;em&gt;get-curlpath.ps1&lt;/em&gt; to obtain the path to the cURL executable.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;get-curlpath.ps1&lt;/strong&gt;&lt;/p&gt;&lt;pre class=&quot;language-powershell&quot;&gt;&lt;code class=&quot;language-powershell&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;&amp;lt;# 
    This script returns the full path of the curl.exe.
#&amp;gt;&lt;/span&gt;

&lt;span class=&quot;token variable&quot;&gt;$curlExe&lt;/span&gt; = &lt;span class=&quot;token string&quot;&gt;&#39;curl.exe&#39;&lt;/span&gt;
&lt;span class=&quot;token variable&quot;&gt;$curlPath&lt;/span&gt; = &lt;span class=&quot;token function&quot;&gt;Resolve-Path&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;$PSScriptRoot&lt;/span&gt;&#92;..&#92;tools&#92;curl-7.33.0-win64-nossl&#92;&lt;span class=&quot;token variable&quot;&gt;$curlExe&lt;/span&gt;&quot;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# This is the path on the local dev machine.&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-not&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Test-Path&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$curlPath&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;# Fall-back to use curl.exe located in the same location as the script.&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Test-Path&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;$PSScriptRoot&lt;/span&gt;&#92;&lt;span class=&quot;token variable&quot;&gt;$curlExe&lt;/span&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token variable&quot;&gt;$curlPath&lt;/span&gt; = &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;$PSScriptRoot&lt;/span&gt;&#92;&lt;span class=&quot;token variable&quot;&gt;$curlExe&lt;/span&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;Write-Error&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;ERROR: &lt;span class=&quot;token variable&quot;&gt;$curlPath&lt;/span&gt; not found.&quot;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;Exit&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token variable&quot;&gt;$curlPath&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;These PowerShell scripts can now easily be used in continuous integration &amp;amp; delivery tools such as Octopus Deploy or Microsoft Release Management.&lt;/p&gt;&lt;h3 id=&quot;whats-next&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/ruling-the-continuous-integration-seas-with-sitecore-ship-part-2/#whats-next&quot; class=&quot;heading-anchor&quot;&gt;What‚Äôs next?&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;In the next post I‚Äôll explain how Sitecore.Ship can be used to record the package installation history.&lt;/p&gt;
 			</content>
    </entry><entry>
      <title>Ruling the continuous integration seas with Sitecore.Ship - Part 1</title>
      <link href="http://localhost:8080/articles/ruling-the-continuous-integration-seas-with-sitecore-ship-part-1/" />
      <updated>2015-10-21T00:00:00Z</updated>
      <id>http://localhost:8080/articles/ruling-the-continuous-integration-seas-with-sitecore-ship-part-1/</id>
      <content type="html">
				&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/14.1.picard_packages-440w.webp 440w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/14.1.picard_packages-440w.webp&quot; width=&quot;440&quot; height=&quot;308&quot; alt=&quot;Why the hell are you deploying Sitecore packages manually?&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;h2 id=&quot;deploying-sitecore-items&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/ruling-the-continuous-integration-seas-with-sitecore-ship-part-1/#deploying-sitecore-items&quot; class=&quot;heading-anchor&quot;&gt;Deploying Sitecore items&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;All software development projects that involve Sitecore are faced with the same problem:&lt;br&gt;how to get the Sitecore items (templates, layouts or content) from development to the&lt;br&gt;other environments in a consistent way.&lt;/p&gt;&lt;h3 id=&quot;tedious-and-error-prone-manual-deployment-o_o&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/ruling-the-continuous-integration-seas-with-sitecore-ship-part-1/#tedious-and-error-prone-manual-deployment-o_o&quot; class=&quot;heading-anchor&quot;&gt;Tedious and error prone: manual deployment o_O&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;During my first couple of Sitecore projects the packaging and deployment of Sitecore items&lt;br&gt;was a manual &lt;s&gt;struggle&lt;/s&gt; process. Item packages were created using the &lt;em&gt;Package Designer&lt;/em&gt; and the resulting packages&lt;br&gt;were installed using the &lt;em&gt;Installation Wizard&lt;/em&gt; once the website was deployed.&lt;/p&gt;&lt;p&gt;There are several downsides to this manual approach:&lt;/p&gt;&lt;ul class=&quot;list&quot;&gt;&lt;li&gt;Developers can easily forget to include required items in the package (especially if they pick items&lt;br&gt;the static way instead of the dynamic way).&lt;/li&gt;&lt;li&gt;Correct package installation is never guaranteed to happen in the same way across all&lt;br&gt;environments (or even at all!) because a developer needs to:&lt;ol class=&quot;list&quot;&gt;&lt;li&gt;Wait until the regular deployment of files is finished (if this takes long the next steps might be forgotten),&lt;/li&gt;&lt;li&gt;Upload the &lt;em&gt;right&lt;/em&gt; packages,&lt;/li&gt;&lt;li&gt;Install the packages in the &lt;em&gt;right&lt;/em&gt; order (&lt;em&gt;and&lt;/em&gt; select the &lt;em&gt;correct&lt;/em&gt; installation options).&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;This manual process is very tedious and error prone, even when it‚Äôs done by just one person. Fortunately several tools emerged over the years which make packaging and deploying Sitecore items a breeze.&lt;/p&gt;&lt;h3 id=&quot;developer-friendly-and-consistent-sitecore-ship&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/ruling-the-continuous-integration-seas-with-sitecore-ship-part-1/#developer-friendly-and-consistent-sitecore-ship&quot; class=&quot;heading-anchor&quot;&gt;Developer friendly and consistent: Sitecore Ship&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;One of the tools that made my life a Sitecore developer easier is called &lt;a href=&quot;https://github.com/kevinobee/Sitecore.Ship&quot; rel=&quot;noopener&quot;&gt;Sitecore.Ship&lt;/a&gt;.&lt;br&gt;Sitecore.Ship is a small Sitecore module developed by &lt;a href=&quot;https://twitter.com/kevinobee&quot; rel=&quot;noopener&quot;&gt;Kevin Obee&lt;/a&gt; and it allows the installation&lt;br&gt;of Sitecore packages (both &lt;code&gt;.zip&lt;/code&gt; and &lt;code&gt;.update&lt;/code&gt;) using HTTP requests. The packages could be either generated by &lt;a href=&quot;http://teamdevelopmentforsitecore.com/&quot; rel=&quot;noopener&quot;&gt;TDS&lt;/a&gt;, &lt;a href=&quot;https://github.com/adoprog/Sitecore-Courier&quot; rel=&quot;noopener&quot;&gt;Courier&lt;/a&gt; or‚Ä¶ still by hand (but you wouldn‚Äôt do that anymore right? üòâ.&lt;/p&gt;&lt;p&gt;I like Sitecore.Ship for two reasons:&lt;/p&gt;&lt;ul class=&quot;list&quot;&gt;&lt;li&gt;It‚Äôs a compact module which only does a limited number of things and it does these right.&lt;br&gt;I usually prefer smaller tools over larger ones because smaller tools are easier to understand and work with.&lt;br&gt;And if there are less moving parts there is also less risk that something breaks.&lt;/li&gt;&lt;li&gt;It can be easily integrated in a continuous integration setup using a scripting language such as Powershell.&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;using-sitecoreship&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/ruling-the-continuous-integration-seas-with-sitecore-ship-part-1/#using-sitecoreship&quot; class=&quot;heading-anchor&quot;&gt;Using Sitecore.Ship&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Sitecore.Ship can be added to your Visual Studio project using NuGet.&lt;br&gt;There are currently two NuGet packages to choose from:&lt;/p&gt;&lt;ul class=&quot;list&quot;&gt;&lt;li&gt;&lt;a href=&quot;https://www.nuget.org/packages/Sitecore.Ship/&quot; rel=&quot;noopener&quot;&gt;Sitecore.Ship&lt;/a&gt; - This version uses &lt;em&gt;Nancy&lt;/em&gt;, a lightweight .Net framework for building HTTP based services. Note that your web project will add a dependency to &lt;a href=&quot;https://www.nuget.org/packages/Nancy.Hosting.Aspnet/&quot; rel=&quot;noopener&quot;&gt;Nancy.Hosting.AspNet&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://www.nuget.org/packages/Sitecore.Ship.AspNet/&quot; rel=&quot;noopener&quot;&gt;Sitecore.Ship.AspNet&lt;/a&gt; - This version uses a plain &lt;a href=&quot;http://ASP.Net&quot; rel=&quot;noopener&quot;&gt;ASP.Net&lt;/a&gt; HttpHandler implementation and therefore requires no additional dependencies.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Sofar I‚Äôve mainly used the Sitecore.Ship.AspNet version because I didn‚Äôt want to introduce additional dependencies to my projects.&lt;br&gt;I‚Äôve used the 0.3.5 version for Sitecore 7.1 and the &lt;a href=&quot;https://www.myget.org/F/sitecore-ship-prerelease/&quot; rel=&quot;noopener&quot;&gt;0.4.0 (pre-release) version&lt;/a&gt; for Sitecore 8.0 (from Initial up to Update-5).&lt;/p&gt;&lt;h3 id=&quot;whats-in-the-nuget&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/ruling-the-continuous-integration-seas-with-sitecore-ship-part-1/#whats-in-the-nuget&quot; class=&quot;heading-anchor&quot;&gt;What‚Äôs in the NuGet?&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Let‚Äôs have a look what‚Äôs in the NuGet packages of the 0.4.0 pre-release version (since we‚Äôre all using Sitecore 8 anyway right? üòâ.&lt;/p&gt;&lt;p&gt;This is the contents of the Sitecore.Ship package:&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/14.2.ship_nancy_nuget-440w.webp 440w, http://localhost:8080/assets/images/14.2.ship_nancy_nuget-650w.webp 650w, http://localhost:8080/assets/images/14.2.ship_nancy_nuget-928w.webp 928w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/14.2.ship_nancy_nuget-928w.webp&quot; width=&quot;928&quot; height=&quot;662&quot; alt=&quot;Sitecore.Ship NuGet package&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;This is the contents of the Sitecore.Ship.AspNet package:&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/14.3.ship_aspnet_nuget-440w.webp 440w, http://localhost:8080/assets/images/14.3.ship_aspnet_nuget-650w.webp 650w, http://localhost:8080/assets/images/14.3.ship_aspnet_nuget-928w.webp 928w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/14.3.ship_aspnet_nuget-928w.webp&quot; width=&quot;928&quot; height=&quot;701&quot; alt=&quot;Sitecore.Ship.AspNet NuGet package&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;The assemblies involved are:&lt;/p&gt;&lt;ul class=&quot;list&quot;&gt;&lt;li&gt;&lt;code&gt;Sitecore.Ship.Core.dll&lt;/code&gt; - Contains the interfaces, domain objects and services for recording the package installation and parsing the packages.&lt;/li&gt;&lt;li&gt;&lt;code&gt;Sitecore.Ship.Infrastructure.dll&lt;/code&gt; - Reads the configuration, performs logging, reads/writes the package deployment history and performs the actual installation of items using the Sitecore API. This assembly has dependencies to &lt;code&gt;Sitecore.Kernel&lt;/code&gt;, &lt;code&gt;Sitecore.Logging&lt;/code&gt;, &lt;code&gt;Sitecore.Update&lt;/code&gt; and &lt;code&gt;Sitecore.Zip&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;&lt;code&gt;Sitecore.Ship.dll&lt;/code&gt; - Contains Install and Publish modules (based on &lt;code&gt;NancyModule&lt;/code&gt;) which define the HTTP requests that can be executed.&lt;/li&gt;&lt;li&gt;&lt;code&gt;Sitecore.Ship.AspNet.dll&lt;/code&gt; - Contains the &lt;code&gt;SitecoreShipHttpHandler&lt;/code&gt; and the various CommandHandlers for uploading and installing packages and publishing items.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Once the website files are deployed you can issue a POST request to &lt;code&gt;&amp;lt;website&amp;gt;/services/package/install/fileupload&lt;/code&gt; in order to upload and install a package.&lt;br&gt;Or do a smart publish by doing a POST to &lt;code&gt;&amp;lt;website&amp;gt;/services/publish/smart&lt;/code&gt;.&lt;br&gt;As usual though the devil in the details and while the &lt;a href=&quot;https://github.com/kevinobee/Sitecore.Ship/wiki&quot; rel=&quot;noopener&quot;&gt;wiki page&lt;/a&gt; gives some basic guidance how to start using Sitecore.Ship it is not a complete end-to-end guide how to integrate it in your solution.&lt;/p&gt;&lt;p&gt;In &lt;a href=&quot;http://localhost:8080/articles/ruling-the-continuous-integration-seas-with-sitecore-ship-part-2&quot;&gt;the next blog post&lt;/a&gt; I will explain in detail how I‚Äôm using Sitecore.Ship with &lt;a href=&quot;https://learn.microsoft.com/powershell/&quot; rel=&quot;noopener&quot;&gt;Powershell&lt;/a&gt; and &lt;a href=&quot;http://curl.haxx.se/&quot; rel=&quot;noopener&quot;&gt;cURL&lt;/a&gt; in continuous integration setups with tools like Visual Studio Release Management or Octopus Deploy.&lt;/p&gt;
 			</content>
    </entry><entry>
      <title>Choosing communication tools for distributed teams</title>
      <link href="http://localhost:8080/articles/choosing-communication-tools-for-distributed-teams/" />
      <updated>2015-10-14T00:00:00Z</updated>
      <id>http://localhost:8080/articles/choosing-communication-tools-for-distributed-teams/</id>
      <content type="html">
				&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/13.slack_home-440w.webp 440w, http://localhost:8080/assets/images/13.slack_home-650w.webp 650w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/13.slack_home-650w.webp&quot; width=&quot;650&quot; height=&quot;338&quot; alt=&quot;Slack&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;h2 id=&quot;team-communication&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/choosing-communication-tools-for-distributed-teams/#team-communication&quot; class=&quot;heading-anchor&quot;&gt;Team communication&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;My work at &lt;a href=&quot;http://www.tahzoo.com&quot; rel=&quot;noopener&quot;&gt;Tahzoo&lt;/a&gt; and the work I do for the &lt;a href=&quot;http://www.sugnl.net&quot; rel=&quot;noopener&quot;&gt;Dutch Sitecore user group&lt;/a&gt; require me to do a lot of communication in distributed teams.&lt;br&gt;Effective and clear communication is difficult, even more so when the team members are at different locations. Having the right tools in place helps a lot.&lt;br&gt;Since there are so many communication tools out there I want to share my opinion on some of these so perhaps you can make a more informed judgment when deciding which tools to use.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Go straight to the &lt;a href=&quot;http://localhost:8080/articles/choosing-communication-tools-for-distributed-teams/#tldr-my-choice-of-tooling&quot;&gt;TLDR&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&lt;h3 id=&quot;types-of-communication&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/choosing-communication-tools-for-distributed-teams/#types-of-communication&quot; class=&quot;heading-anchor&quot;&gt;Types of communication&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;There are various types of communication I do during the day:&lt;/p&gt;&lt;ul class=&quot;list&quot;&gt;&lt;li&gt;Informing my local colleagues of a new technology meetup we should attend.&lt;/li&gt;&lt;li&gt;Performing a code review with one of my team members who is located in another country.&lt;/li&gt;&lt;li&gt;Show appreciation towards a colleague who did something great in a project.&lt;/li&gt;&lt;li&gt;Discuss with colleagues (world wide) how to unify our continuous integration set-ups.&lt;/li&gt;&lt;li&gt;Converse with fellow Sitecore user group organization members and hosts (located throughout the Netherlands) about the topics of the next user group meeting.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The type of communication is either:&lt;/p&gt;&lt;ul class=&quot;list&quot;&gt;&lt;li&gt;A one-off message (mostly asynchronous, such as a news update)&lt;/li&gt;&lt;li&gt;A conversation (either text or video)&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;These different types and targets (individual, group, or organization) usually require different tools to support the specific communication needs. I haven‚Äôt seen one tool that supports everything well.&lt;/p&gt;&lt;h2 id=&quot;the-tools&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/choosing-communication-tools-for-distributed-teams/#the-tools&quot; class=&quot;heading-anchor&quot;&gt;The tools&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The focus of this post is mostly on tools for (a)synchronous text messaging (conversations) and not so much video conferencing tools.&lt;/p&gt;&lt;p&gt;&lt;em&gt;Please note that this is not an extensive list of communication tools out there. It‚Äôs far from that, it‚Äôs a shortlist of tools I‚Äôve used intensively over the last years.&lt;/em&gt;&lt;/p&gt;&lt;h3 id=&quot;slack&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/choosing-communication-tools-for-distributed-teams/#slack&quot; class=&quot;heading-anchor&quot;&gt;Slack&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://slack.com&quot; rel=&quot;noopener&quot;&gt;Slack.com&lt;/a&gt; is definitely my favorite conversation platform nowadays. I like the minimal interface on the web and the desktop client, the ability to focus conversations around topics and the intuitive way of notifying people.&lt;br&gt;I haven‚Äôt even started about the fantastic &lt;a href=&quot;https://slack.com/apps&quot; rel=&quot;noopener&quot;&gt;integrations&lt;/a&gt; it offers with other tools.&lt;/p&gt;&lt;p&gt;Slack is great for synchronous conversations, it‚Äôs not meant for one-off messages.&lt;br&gt;With Slack you can communicate in three ways:&lt;/p&gt;&lt;ul class=&quot;list&quot;&gt;&lt;li&gt;Participate in a public channel to discuss a specific topic. Anyone in the Slack team can join a channel.&lt;/li&gt;&lt;li&gt;Participate in a private group to discuss a specific topic. You‚Äôll need to be invited for a group.&lt;/li&gt;&lt;li&gt;Send a private (direct) message to another user.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;What I really like about Slack is that you can easily notify other users in different ways:&lt;/p&gt;&lt;ul class=&quot;list&quot;&gt;&lt;li&gt;type &lt;code&gt;@&amp;lt;username&amp;gt;&lt;/code&gt; in a channel to notify one user in specific. The others in the group/channel can also see this message but won‚Äôt receive a notification.&lt;/li&gt;&lt;li&gt;type &lt;code&gt;@channel&lt;/code&gt; in a channel to notify all members of that channel with your message.&lt;/li&gt;&lt;li&gt;type &lt;code&gt;@everyone&lt;/code&gt; in a public channel to notify the entire team.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Next to the web interface Slack has &lt;a href=&quot;https://slack.com/downloads&quot; rel=&quot;noopener&quot;&gt;desktop clients&lt;/a&gt; for Windows, Mac and Linux. Mobile apps are available for Android, iOS and Windows.&lt;/p&gt;&lt;p&gt;&lt;em&gt;Am I a Slack fanboy? Oh yes üòÉ. I‚Äôm currently in three Slack teams which works seamlessly with the desktop client.&lt;/em&gt;&lt;/p&gt;&lt;h3 id=&quot;yammer&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/choosing-communication-tools-for-distributed-teams/#yammer&quot; class=&quot;heading-anchor&quot;&gt;Yammer&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://www.yammer.com&quot; rel=&quot;noopener&quot;&gt;Yammer&lt;/a&gt; promotes itself as the enterprise social network for businesses. It‚Äôs the Facebook for organizations. It handles one-off/asynchronous messages very well. It‚Äôs great for news updates about an upcoming event you want to promote or showing appreciation to a colleague. Co-workers on Yammer can like the message and reply to it but it‚Äôs not a platform for synchronous conversations. I‚Äôd say it‚Äôs quite complementary to what Slack is offering.&lt;/p&gt;&lt;p&gt;Next to the web interface Yammer offers a (quite limited) &lt;a href=&quot;https://products.office.com/en/yammer/yammer-desktop-notifier&quot; rel=&quot;noopener&quot;&gt;desktop notifier&lt;/a&gt; (Windows only) and mobile apps for &lt;a href=&quot;https://play.google.com/store/apps/details?id=com.yammer.v1&amp;amp;hl=en&quot; rel=&quot;noopener&quot;&gt;Android&lt;/a&gt;, &lt;a href=&quot;https://itunes.apple.com/en/app/yammer/id289559439?mt=8&quot; rel=&quot;noopener&quot;&gt;iOS&lt;/a&gt; and &lt;a href=&quot;https://www.microsoft.com/en-us/store/apps/yammer/9wzdncrfhwmz&quot; rel=&quot;noopener&quot;&gt;Windows&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;My two major complaints with Yammer are:&lt;/p&gt;&lt;ul class=&quot;list&quot;&gt;&lt;li&gt;You &lt;a href=&quot;https://community.office365.com/en-us/f/176/t/228840&quot; rel=&quot;noopener&quot;&gt;can‚Äôt edit a message that is posted&lt;/a&gt;! Support advises to delete and re-post the message‚Ä¶ Seriously Microsoft, this user experience is &lt;em&gt;very&lt;/em&gt; bad.&lt;/li&gt;&lt;li&gt;The &lt;a href=&quot;https://community.office365.com/en-us/f/176/t/246121&quot; rel=&quot;noopener&quot;&gt;event functionality was dropped&lt;/a&gt; some time ago.&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&quot;skype&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/choosing-communication-tools-for-distributed-teams/#skype&quot; class=&quot;heading-anchor&quot;&gt;Skype&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://www.skype.com&quot; rel=&quot;noopener&quot;&gt;Skype&lt;/a&gt; has long been the preferred tool of communication for my colleagues for both chat and video. I can see why; it‚Äôs easy to use, allows you to communicate to a group and do video and screen sharing.&lt;/p&gt;&lt;p&gt;I would only recommend Skype when video or screen sharing is required and Google Hangouts can‚Äôt be used. I wouldn‚Äôt recommend it for chat conversations due to it‚Äôs lack of channels, less advanced notifications and lack of integrations when compared to Slack.&lt;/p&gt;&lt;p&gt;When I use Skype I mostly use the Windows desktop client. I‚Äôve also used the web version of Skype for Business (because that desktop client didn‚Äôt want to install). Skype also has a &lt;a href=&quot;http://www.skype.com/en/download-skype/skype-for-computer/&quot; rel=&quot;noopener&quot;&gt;desktop clients&lt;/a&gt; for Mac and Linux and &lt;a href=&quot;http://www.skype.com/en/download-skype/skype-for-mobile/&quot; rel=&quot;noopener&quot;&gt;mobile apps&lt;/a&gt; for Android, iOS, Windows, Blackberry, Nokia X and Amazon Fire Phone.&lt;/p&gt;&lt;h3 id=&quot;office365&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/choosing-communication-tools-for-distributed-teams/#office365&quot; class=&quot;heading-anchor&quot;&gt;Office365&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;With Office365 you can create &lt;a href=&quot;https://www.youtube.com/watch?v=t3OLvYXepvE&quot; rel=&quot;noopener&quot;&gt;public or private groups&lt;/a&gt; and start a ‚Äòconversation‚Äô there. Don‚Äôt expect a fluent conversation experience such as Slack though. The conversation is actually made up of email like messages on which you can perform actions such as reply, reply all, forward and like. It‚Äôs a good fit for more official communication, capturing information and documenting everthing long term, especially when you use the other integrated functionalities such as Files, Calender and Notebook.&lt;br&gt;It still seems that Office365 is not 100% cross-browser compatible though. I couldn‚Äôt access a group Notebook using Chrome üò¶. A colleague noticed that when you reply to a group conversation using Outlook instead of the web interface the reply starts in a new thread. Not very useful to keep track of the conversation.&lt;/p&gt;&lt;p&gt;The are mobile apps available for Android, iOS and Windows called &lt;em&gt;Outlook Groups&lt;/em&gt; (yes, it‚Äôs &lt;em&gt;not&lt;/em&gt; called &lt;em&gt;Office365 Groups&lt;/em&gt;). The apps are not available globally though as is mentioned in &lt;a href=&quot;http://windowsitpro.com/blog/outlook-office-365-groups-app-for-mobile-devices&quot; rel=&quot;noopener&quot;&gt;this post&lt;/a&gt;.&lt;/p&gt;&lt;h3 id=&quot;google-hangouts&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/choosing-communication-tools-for-distributed-teams/#google-hangouts&quot; class=&quot;heading-anchor&quot;&gt;Google Hangouts&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;I use &lt;a href=&quot;https://hangouts.google.com/&quot; rel=&quot;noopener&quot;&gt;Google Hangouts&lt;/a&gt; frequently for video conferencing with other Sitecore user group members. Stability and video quality is good and screen sharing works flawlessly. If you have a Youtube channel as well you can even do live streaming. I hardly use Hangouts for chat anymore since it‚Äôs far behind compared to Slack.&lt;/p&gt;&lt;p&gt;Besides the web interface Hangouts is available for Android, iOS and as &lt;a href=&quot;https://chrome.google.com/webstore/detail/google-hangouts/knipolnnllmklapflnccelgolnpehhpl?hl=en&quot; rel=&quot;noopener&quot;&gt;Chrome extension&lt;/a&gt;.&lt;/p&gt;&lt;h2 id=&quot;tldr-my-choice-of-tooling&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/choosing-communication-tools-for-distributed-teams/#tldr-my-choice-of-tooling&quot; class=&quot;heading-anchor&quot;&gt;TLDR - My choice of tooling&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;em&gt;There is simply not just one tool that can supports everything well. So pick the right tool for the right job.&lt;/em&gt;&lt;/p&gt;&lt;ul class=&quot;list&quot;&gt;&lt;li&gt;For synchronous conversations/discussions use &lt;a href=&quot;http://www.slack.com&quot; rel=&quot;noopener&quot;&gt;Slack&lt;/a&gt; because the conversations are focused in channels/groups and it offers handy integrations.&lt;/li&gt;&lt;li&gt;For one-off/asynchronous messages, targeted to either the whole organization or to a group, use &lt;a href=&quot;http://www.yammer.com&quot; rel=&quot;noopener&quot;&gt;Yammer&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;For video conferencing use Google Hangouts or Skype. I have a slight preference for Hangouts since it integrates with Slack üòÉ.&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&quot;cant-use-a-single-tool-integrate&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/choosing-communication-tools-for-distributed-teams/#cant-use-a-single-tool-integrate&quot; class=&quot;heading-anchor&quot;&gt;Can‚Äôt use a single tool? Integrate!&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;I recently stumbled upon &lt;a href=&quot;http://sameroom.io&quot; rel=&quot;noopener&quot;&gt;Sameroom.io&lt;/a&gt;. This is a platform that bridges otherwise isolated communication tools.&lt;br&gt;For instance: when you have distributed teams where one team is using Slack and the other is using Skype. In Sameroom you can setup a so-called &lt;em&gt;tube&lt;/em&gt; and create a bridge between a Slack channel and a Skype group so both teams are in the same conversation.&lt;/p&gt;&lt;h3 id=&quot;other-aspects&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/choosing-communication-tools-for-distributed-teams/#other-aspects&quot; class=&quot;heading-anchor&quot;&gt;Other aspects&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;There are of course other things to consider when choosing communication tools. You need to think about integrating it into the existing application landscape, how to administer users, security etc. Try various tools with some stakeholders to see what is the best fit. Make an informed decision and define a plan before you roll-out to the entire organization.&lt;/p&gt;
 			</content>
    </entry><entry>
      <title>Moving my blog - I ‚ù§Ô∏è Github &amp; Markdown</title>
      <link href="http://localhost:8080/articles/moving-my-blog-i-love-github-and-markdown/" />
      <updated>2015-10-06T00:00:00Z</updated>
      <id>http://localhost:8080/articles/moving-my-blog-i-love-github-and-markdown/</id>
      <content type="html">
				&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/12.successkid_blog-440w.webp 440w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/12.successkid_blog-440w.webp&quot; width=&quot;440&quot; height=&quot;440&quot; alt=&quot;Moved blog to Github, writing posts in markdown.&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;h2 id=&quot;the-blogging-experience&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/moving-my-blog-i-love-github-and-markdown/#the-blogging-experience&quot; class=&quot;heading-anchor&quot;&gt;The blogging experience&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Blogging should be hassle free. With my old blog platform, blogging was far from that.&lt;/p&gt;&lt;p&gt;Party this was due because I deviated from the built-in themes and I hacked something custom into it. I always needed to manipulate the html of a post because the paragraphs tags and white space were off‚Ä¶ very annoying.&lt;/p&gt;&lt;p&gt;And when blogging gets tedious because of such things you blog less and less. It‚Äôs been almost a year since I posted anything, which is of course unacceptable üòâ.&lt;/p&gt;&lt;h2 id=&quot;moved&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/moving-my-blog-i-love-github-and-markdown/#moved&quot; class=&quot;heading-anchor&quot;&gt;Moved!&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;So, it was time for desperate measures and I decided to move my blog to Github.&lt;/p&gt;&lt;h3 id=&quot;host-github-pages&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/moving-my-blog-i-love-github-and-markdown/#host-github-pages&quot; class=&quot;heading-anchor&quot;&gt;Host: Github Pages&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Github has a really great feature called &lt;a href=&quot;https://pages.github.com/&quot; rel=&quot;noopener&quot;&gt;Github Pages&lt;/a&gt;. Github Pages is primarily intended to create static websites for projects you have in Github repositories. It also allows a website per Github user or organisation (&lt;code&gt;http://&amp;lt;username&amp;gt;.github.io&lt;/code&gt;). For my blog I decided to have a Github Pages &lt;a href=&quot;http://marcduiker.github.io&quot; rel=&quot;noopener&quot;&gt;user website&lt;/a&gt;.&lt;/p&gt;&lt;h3 id=&quot;blog-engine-jekyll&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/moving-my-blog-i-love-github-and-markdown/#blog-engine-jekyll&quot; class=&quot;heading-anchor&quot;&gt;Blog engine: Jekyll&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;The website is generated through &lt;a href=&quot;http://jekyllrb.com/&quot; rel=&quot;noopener&quot;&gt;Jekyll&lt;/a&gt;. This is a very straightforward static site generator built with &lt;a href=&quot;https://www.ruby-lang.org/&quot; rel=&quot;noopener&quot;&gt;Ruby&lt;/a&gt; and has good support for blogging.&lt;/p&gt;&lt;h4 id=&quot;templates-liquid&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/moving-my-blog-i-love-github-and-markdown/#templates-liquid&quot; class=&quot;heading-anchor&quot;&gt;Templates: Liquid&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Don‚Äôt be fooled with the term ‚Äòstatic site‚Äô. It certainly does not mean you have to write a full html page for each post. Jekyll uses the &lt;a href=&quot;https://github.com/Shopify/liquid/wiki&quot; rel=&quot;noopener&quot;&gt;Liquid templating engine&lt;/a&gt; and with it you can break down an html page in reusable components (for head, header, footer, content etc).&lt;/p&gt;&lt;p&gt;I used &lt;a href=&quot;https://code.visualstudio.com/&quot; rel=&quot;noopener&quot;&gt;Visual Studio Code&lt;/a&gt; to create the html components.&lt;/p&gt;&lt;h4 id=&quot;content-markdown&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/moving-my-blog-i-love-github-and-markdown/#content-markdown&quot; class=&quot;heading-anchor&quot;&gt;Content: Markdown&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Now comes the part which I‚Äôm most content with (pun intended). Jekyll supports &lt;a href=&quot;http://daringfireball.net/projects/markdown/&quot; rel=&quot;noopener&quot;&gt;Markdown&lt;/a&gt; as the format for the blog posts. I &lt;strong&gt;so&lt;/strong&gt; like this format because of it‚Äôs ease of use and minimalism.&lt;/p&gt;&lt;h4 id=&quot;responsive-design-and-style-skeleton&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/moving-my-blog-i-love-github-and-markdown/#responsive-design-and-style-skeleton&quot; class=&quot;heading-anchor&quot;&gt;Responsive design &amp;amp; style: Skeleton&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Since I didn‚Äôt choose one of the default Github Pages templates the blog looked very 90‚Äôs with only a plain Times New Roman font. That needed to change but I do like a very minimalistic style.&lt;/p&gt;&lt;p&gt;My front-end skills are quite limited so I looked for a very simple responsive boilerplate framework to work with. I decided to go for &lt;a href=&quot;http://getskeleton.com/&quot; rel=&quot;noopener&quot;&gt;Skeleton&lt;/a&gt;.&lt;/p&gt;&lt;h2 id=&quot;i-blogging-again&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/moving-my-blog-i-love-github-and-markdown/#i-blogging-again&quot; class=&quot;heading-anchor&quot;&gt;I ‚ù§Ô∏è blogging again&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Now the blog looks good again and writing posts has become much simpler and more fun for me.&lt;/p&gt;&lt;h3 id=&quot;my-blogging-workflow&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/moving-my-blog-i-love-github-and-markdown/#my-blogging-workflow&quot; class=&quot;heading-anchor&quot;&gt;My blogging workflow&lt;/a&gt;&lt;/h3&gt;&lt;ul class=&quot;list&quot;&gt;&lt;li&gt;I have a local (and up-to-date) repository of the remote &lt;a href=&quot;https://github.com/marcduiker/marcduiker.github.io&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;marcduiker.github.io&lt;/code&gt;&lt;/a&gt; repo.&lt;/li&gt;&lt;li&gt;I copy the default blog post Markdown file and give it a proper name according to the Jekyll naming convention.&lt;/li&gt;&lt;li&gt;I start editing the content of blog post file using &lt;a href=&quot;http://markdownpad.com/&quot; rel=&quot;noopener&quot;&gt;MarkdownPad2&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;When I can‚Äôt finish the post in one go I save it in the &lt;code&gt;_drafts&lt;/code&gt; folder.&lt;/li&gt;&lt;li&gt;When I finish the post I save it in the &lt;code&gt;_posts&lt;/code&gt; folder. All markdown files in this folder will be publicly visible.&lt;/li&gt;&lt;li&gt;I commit &amp;amp; push the post (and relevant assets) to the remote repository.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;And that‚Äôs all there is.&lt;/strong&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Note: I only use MarkdownPad2 for editing and previewing the blog post content. Because I‚Äôm not running Jekyll on my local machine I can‚Äôt see a fully rendered page before actually pushing it online. Since it‚Äôs so quick to make a change and seeing the rendered result online I‚Äôm fine with this approach.&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 id=&quot;why-do-blogging-like-this&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/moving-my-blog-i-love-github-and-markdown/#why-do-blogging-like-this&quot; class=&quot;heading-anchor&quot;&gt;Why do blogging like this&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;The workflow and tooling involved feel very natural if you‚Äôre a developer. I also like the idea of having my content in version control.&lt;/p&gt;&lt;p&gt;So if you‚Äôre a developer who is either not blogging or want to switch to another blogging platform really have a look at &lt;a href=&quot;https://pages.github.com/&quot; rel=&quot;noopener&quot;&gt;Github Pages&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Expect some new Sitecore related posts from me soon! üòÉ&lt;/p&gt;
 			</content>
    </entry><entry>
      <title>Isolating calls to Sitecore.Context for improved unit testability - Part II: ItemAdapter</title>
      <link href="http://localhost:8080/articles/isolating-calls-to-sitecore-context-part-2/" />
      <updated>2014-11-22T00:00:00Z</updated>
      <id>http://localhost:8080/articles/isolating-calls-to-sitecore-context-part-2/</id>
      <content type="html">
				&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/11.norris_adapt-319w.webp 319w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/11.norris_adapt-319w.webp&quot; width=&quot;319&quot; height=&quot;397&quot; alt=&quot;I don&#39;t adapt to my environment, my enviroment adapts to me.&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;h2 id=&quot;recap-of-part-i&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/isolating-calls-to-sitecore-context-part-2/#recap-of-part-i&quot; class=&quot;heading-anchor&quot;&gt;Recap of Part I&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;This is part two of the ‚ÄúIsolating calls to Sitecore.Context‚Ä¶‚Äù series. If you haven‚Äôt read the &lt;a href=&quot;http://localhost:8080/articles/isolating-calls-to-sitecore-context-part-1&quot;&gt;Part I&lt;/a&gt; please do so to get the right context (pun intended).&lt;/p&gt;&lt;p&gt;In Part I &lt;code&gt;the GetItem()&lt;/code&gt; method from &lt;code&gt;ItemProvider&lt;/code&gt; returned an actual Sitecore Item. Because of the &lt;code&gt;IItemProvider&lt;/code&gt; interface and Sitecore.FakeDb it is possible to return fake Sitecore items and no dependency to the Sitecore context is required in unit tests.&lt;/p&gt;&lt;p&gt;Although unit testing is now possible there are some (minor) downsides to them due to Sitecore.FakeDb:&lt;/p&gt;&lt;ol class=&quot;list&quot;&gt;&lt;li&gt;Unit tests still require additional Sitecore assemblies and the Sitecore license file.&lt;/li&gt;&lt;li&gt;Unit tests look a bit cluttered due to setting up the fake Db and DbItem.&lt;/li&gt;&lt;li&gt;Unit tests are not very fast to execute.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;So lets look at another way of dealing with Sitecore items to get very lean unit tests.&lt;/p&gt;&lt;h2 id=&quot;adapters&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/isolating-calls-to-sitecore-context-part-2/#adapters&quot; class=&quot;heading-anchor&quot;&gt;Adapters&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I prefer to use abstractions of Sitecore objects because they make unit testing so much easier. The abstractions act as an adapter. It wraps the Sitecore object and exposes some frequently used properties and methods of that object. The adapter or wrapper pattern in combination with Sitecore is quite common and has been described earlier by several others (e.g. &lt;a href=&quot;https://adeneys.wordpress.com/2012/04/13/mocking-sitecore/&quot; rel=&quot;noopener&quot;&gt;Alistair Deneys&lt;/a&gt; and &lt;a href=&quot;http://mhwelander.net/2014/04/30/unit-testing-sitecore-mvc/&quot; rel=&quot;noopener&quot;&gt;Martina Welander&lt;/a&gt;).&lt;/p&gt;&lt;p&gt;So instead of working directly with a Sitecore &lt;code&gt;Item&lt;/code&gt; we can work with an &lt;code&gt;IItemAdapter&lt;/code&gt;interface which is implemented by the &lt;code&gt;ItemAdapter&lt;/code&gt; type.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;IItemAdapter.cs&lt;/strong&gt;&lt;/p&gt;&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;System&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Collections&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Generic&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;Sitecore&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Data&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;Sitecore&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Items&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;SitecorePlayground&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Common&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Interfaces&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Adapters&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IItemAdapter&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt; DisplayName &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;token return-type class-name&quot;&gt;ID&lt;/span&gt; Id &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;token return-type class-name&quot;&gt;Item&lt;/span&gt; InnerItem &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;token return-type class-name&quot;&gt;ID&lt;/span&gt; TemplateId &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt; fieldName&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;ItemAdapter.cs&lt;/strong&gt;&lt;/p&gt;&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;System&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Collections&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Generic&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;System&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Linq&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;Sitecore&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Data&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;Sitecore&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Items&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;Sitecore&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Diagnostics&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;SitecorePlayground&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Common&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Interfaces&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Adapters&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;SitecorePlayground&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Common&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Adapters&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ItemAdapter&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token type-list&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;IItemAdapter&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;ItemAdapter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Item&lt;/span&gt; item&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            Assert&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ArgumentNotNull&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;item&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;item&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;InnerItem &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; item&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt; DisplayName
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; InnerItem&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;DisplayName&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;ID&lt;/span&gt; Id
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; InnerItem&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ID&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;Item&lt;/span&gt; InnerItem
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;ID&lt;/span&gt; TemplateId
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; InnerItem&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;TemplateID&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt; fieldName&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; InnerItem&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Fields&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;fieldName&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Value&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Note that the original Sitecore &lt;code&gt;Item&lt;/code&gt; is accessible through the &lt;code&gt;InnerItem&lt;/code&gt; property.&lt;/p&gt;&lt;p&gt;Code that should be unit testable should rely only on the other properties the adapter exposes. Code that requires &lt;code&gt;Item&lt;/code&gt; properties which are not exposed directly by the &lt;code&gt;ItemAdapter&lt;/code&gt; (and don‚Äôt require unit testing) could use the &lt;code&gt;InnerItem&lt;/code&gt; property.&lt;/p&gt;&lt;p&gt;Let‚Äôs have a look now at the new &lt;code&gt;IItemProvider&lt;/code&gt; interface and &lt;code&gt;ItemProvider&lt;/code&gt;implementation.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;IItemProvider.cs&lt;/strong&gt;&lt;/p&gt;&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;Sitecore&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Data&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;Sitecore&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Items&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;SitecorePlayground&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Common&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Interfaces&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Adapters&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;SitecorePlayground&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Common&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Interfaces&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Providers&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IItemProvider&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token return-type class-name&quot;&gt;Item&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;GetItem&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ID&lt;/span&gt; itemId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;token return-type class-name&quot;&gt;IItemAdapter&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;GetItemAdapter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ID&lt;/span&gt; itemId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;ItemProvider.ss&lt;/strong&gt;&lt;/p&gt;&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;Sitecore&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Data&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;Sitecore&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Items&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;SitecorePlayground&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Common&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Adapters&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;SitecorePlayground&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Common&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Interfaces&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Adapters&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;SitecorePlayground&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Common&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Interfaces&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Providers&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;SitecorePlayground&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Common&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Providers&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ItemProvider&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token type-list&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;IItemProvider&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;Item&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;GetItem&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ID&lt;/span&gt; itemId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; Sitecore&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Context&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Database&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;GetItem&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;itemId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;IItemAdapter&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;GetItemAdapter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ID&lt;/span&gt; itemId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; item &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;GetItem&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;itemId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; item &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;ItemAdapter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;item&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;A new method is added called &lt;code&gt;GetItemAdapter()&lt;/code&gt;. When in the web context the &lt;code&gt;ItemProvider&lt;/code&gt; will call it‚Äôs own &lt;code&gt;GetItem()&lt;/code&gt; method which will return an actual Sitecore &lt;code&gt;Item&lt;/code&gt; and wrap it in an &lt;code&gt;ItemAdapter&lt;/code&gt;. In a unit test context however &lt;code&gt;IItemProvider&lt;/code&gt; will be mocked and the &lt;code&gt;GetItemAdapter()&lt;/code&gt; method will be set-up to return a fake &lt;code&gt;ItemAdapter&lt;/code&gt; (i.e. not based on a Sitecore &lt;code&gt;Item&lt;/code&gt;).&lt;/p&gt;&lt;p&gt;Let‚Äôs recall the &lt;code&gt;AuthorProvider&lt;/code&gt; example which was used in part I. Here‚Äôs the new &lt;code&gt;AuthorProvider&lt;/code&gt; class where the &lt;code&gt;GetAuthorItem()&lt;/code&gt; method now calls the &lt;code&gt;GetItemAdapter()&lt;/code&gt; method of the &lt;code&gt;ItemProvider&lt;/code&gt; and thus returning an &lt;code&gt;IItemAdapter&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;AuthorProviderBasedOnItemAdapter.cs&lt;/strong&gt;&lt;/p&gt;&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;Sitecore&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Data&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;SitecorePlayground&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Common&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Interfaces&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Adapters&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;SitecorePlayground&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Common&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Interfaces&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Providers&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;SitecorePlayground&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;News&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Models&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;SitecorePlayground&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;News&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Providers&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;AuthorProviderBasedOnItemAdapter&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IItemProvider&lt;/span&gt; itemProvider&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;AuthorProviderBasedOnItemAdapter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;IItemProvider&lt;/span&gt; itemProvider&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;itemProvider &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; itemProvider&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;Author&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;GetAuthor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt; authorId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token class-name&quot;&gt;ID&lt;/span&gt; parsedAuthorId&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;ID&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;TryParse&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;authorId&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;out&lt;/span&gt; parsedAuthorId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;GetAuthor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;parsedAuthorId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;Author&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;GetAuthor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ID&lt;/span&gt; authorId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; authorItem &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;GetAuthorItem&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;authorId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;authorItem &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;Author&lt;/span&gt;
                       &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                           Company &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; authorItem&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Templates&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;AuthorTemplate&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Fields&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;AuthorCompany&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                           Name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; authorItem&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Templates&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;AuthorTemplate&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Fields&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;AuthorName&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
                       &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;IItemAdapter&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;GetAuthorItem&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ID&lt;/span&gt; authorItemId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; itemProvider&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;GetItemAdapter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;authorItemId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;unit-tests-with-iitemadapter-and-moq&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/isolating-calls-to-sitecore-context-part-2/#unit-tests-with-iitemadapter-and-moq&quot; class=&quot;heading-anchor&quot;&gt;Unit tests with IItemAdapter and Moq&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Here is the unit test for the &lt;code&gt;GetAuthor()&lt;/code&gt;method when the &lt;code&gt;AuthorProvider&lt;/code&gt; works with an &lt;code&gt;IItemAdapter&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;AuthorProviderBasedOnItemAdapterTests.cs&lt;/strong&gt;&lt;/p&gt;&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;Moq&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;NUnit&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Framework&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;Sitecore&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Data&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;SitecorePlayground&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Common&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Interfaces&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Adapters&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;SitecorePlayground&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Common&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Interfaces&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Providers&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;SitecorePlayground&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;News&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Models&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;SitecorePlayground&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;News&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Providers&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;SitecorePlayground&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;News&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Templates&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;SitecorePlayground&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;News&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Test&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Providers&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;/// Unit tests for the AuthorProviderBasedOnItemAdapter.&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;TestFixture&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;AuthorProviderBasedOnItemAdapterTests&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token attribute&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;Test&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;GetAuthor_WithValidAuthorBasedOnItemAdapter_ReturnsAuthorObject&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token comment&quot;&gt;// Arrange&lt;/span&gt;
            &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; authorItemId &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Guid&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;NewGuid&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; authorItemMock &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;GetAuthorItemMock&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;authorItemId&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;John West&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Sitecore&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; itemProviderMock &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;GetItemProviderMock&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;authorItemMock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Object&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; authorProvider &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;AuthorProviderBasedOnItemAdapter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;itemProviderMock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Object&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;token comment&quot;&gt;// Act&lt;/span&gt;
            &lt;span class=&quot;token class-name&quot;&gt;Author&lt;/span&gt; result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; authorProvider&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;GetAuthor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;authorItemId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;token comment&quot;&gt;// Assert&lt;/span&gt;
            Assert&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;AreEqual&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;John West&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; result&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;Mock&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;IItemProvider&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;GetItemProviderMock&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;IItemAdapter&lt;/span&gt; authorItem&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; itemProviderMock &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;Mock&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;IItemProvider&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            itemProviderMock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Setup&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mock &lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt; mock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;GetItemAdapter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;It&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token generic-method&quot;&gt;&lt;span class=&quot;token function&quot;&gt;IsAny&lt;/span&gt;&lt;span class=&quot;token generic class-name&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;ID&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Returns&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;authorItem&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; itemProviderMock&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;Mock&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;IItemAdapter&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;GetAuthorItemMock&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ID&lt;/span&gt; itemId&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt; authorName&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt; companyName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; itemMock &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;Mock&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;IItemAdapter&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            itemMock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;SetupGet&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mock &lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt; mock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;TemplateId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Returns&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;AuthorTemplate&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;TemplateId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            itemMock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;SetupGet&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mock &lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt; mock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Id&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Returns&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;itemId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            itemMock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;SetupGet&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mock &lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt; mock&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;AuthorTemplate&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Fields&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;AuthorName&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Returns&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;authorName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            itemMock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;SetupGet&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mock &lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt; mock&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;AuthorTemplate&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Fields&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;AuthorCompany&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Returns&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;companyName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; itemMock&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;When compared with the unit test in the first post (which used FakeDb) this unit test is slightly more compact and easier to understand. &lt;strong&gt;Don‚Äôt get me wrong, I really like Sitecore.FakeDb but use it only when you can‚Äôt use an adapter.&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Let‚Äôs look at the unit test in more detail.&lt;/p&gt;&lt;h3 id=&quot;//-arrange&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/isolating-calls-to-sitecore-context-part-2/#//-arrange&quot; class=&quot;heading-anchor&quot;&gt;// Arrange&lt;/a&gt;&lt;/h3&gt;&lt;ul class=&quot;list&quot;&gt;&lt;li&gt;First a new &lt;code&gt;Id&lt;/code&gt; is generated which will be used for the &lt;code&gt;IItemAdapter&lt;/code&gt; mock.&lt;/li&gt;&lt;li&gt;The &lt;code&gt;GetAuthorItemMock()&lt;/code&gt; method contructs a mock object (&lt;code&gt;authorItemMock&lt;/code&gt;) based on &lt;code&gt;IItemAdapter&lt;/code&gt; and requires parameters for the Id, author name and company name.&lt;/li&gt;&lt;li&gt;The &lt;code&gt;GetItemProviderMock()&lt;/code&gt; method constructs a mock (&lt;code&gt;itemProviderMock&lt;/code&gt;) based on &lt;code&gt;IItemProvider&lt;/code&gt;. The &lt;code&gt;authorItemMock&lt;/code&gt; is passed as a parameter since that will be the result of the &lt;code&gt;GetItemAdapter()&lt;/code&gt; method of the mock.&lt;/li&gt;&lt;li&gt;An instance is created of the &lt;code&gt;AuthorProvider&lt;/code&gt; and the &lt;code&gt;itemProviderMock&lt;/code&gt; is passed in the constructor.&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&quot;//-act&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/isolating-calls-to-sitecore-context-part-2/#//-act&quot; class=&quot;heading-anchor&quot;&gt;// Act&lt;/a&gt;&lt;/h3&gt;&lt;ul class=&quot;list&quot;&gt;&lt;li&gt;The &lt;code&gt;GetAuthor()&lt;/code&gt; method on the &lt;code&gt;AuthorProvider&lt;/code&gt; is called. Inside this method the &lt;code&gt;GetAuthorItem()&lt;/code&gt; method is called which in turn executes the set-up &lt;code&gt;GetItemAdapter()&lt;/code&gt; method of the mocked &lt;code&gt;IItemProvider&lt;/code&gt;. A mocked &lt;code&gt;IItemAdapter&lt;/code&gt; is returned and mapped to a new &lt;code&gt;Author&lt;/code&gt; object.&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&quot;//-assert&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/isolating-calls-to-sitecore-context-part-2/#//-assert&quot; class=&quot;heading-anchor&quot;&gt;// Assert&lt;/a&gt;&lt;/h3&gt;&lt;ul class=&quot;list&quot;&gt;&lt;li&gt;An assertion is done to check if the Name property of the &lt;code&gt;Author&lt;/code&gt; object is equal to the author name field of the mocked &lt;code&gt;IItemAdapter&lt;/code&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;conclusion&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/isolating-calls-to-sitecore-context-part-2/#conclusion&quot; class=&quot;heading-anchor&quot;&gt;Conclusion&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Creating adapters for Sitecore objects can be a relatively quick way to get unit testable code as long as dependency injection principles are used. You are in complete control of the adapter interface. You can start with a very lightweight interface and just expose a couple of properties you need for proper unit testing. Then you can gradually introduce additional properties to the interface as needed.&lt;/p&gt;&lt;p&gt;Next to the Sitecore &lt;code&gt;Item&lt;/code&gt;, other frequently adapted Sitecore objects are &lt;code&gt;Database&lt;/code&gt;, &lt;code&gt;Context&lt;/code&gt; and &lt;code&gt;SiteContext&lt;/code&gt;. More of that in a later post.&lt;/p&gt;&lt;h2 id=&quot;source-code&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/isolating-calls-to-sitecore-context-part-2/#source-code&quot; class=&quot;heading-anchor&quot;&gt;Source code&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The full source code that belongs to this post (and more) can be found on &lt;a href=&quot;https://github.com/marcduiker/SitecorePlayground&quot; rel=&quot;noopener&quot;&gt;Github&lt;/a&gt;.&lt;/p&gt;
 			</content>
    </entry><entry>
      <title>Isolating calls to Sitecore.Context for improved unit testability - Part I: ItemProvider, Moq and FakeDb</title>
      <link href="http://localhost:8080/articles/isolating-calls-to-sitecore-context-part-1/" />
      <updated>2014-11-18T00:00:00Z</updated>
      <id>http://localhost:8080/articles/isolating-calls-to-sitecore-context-part-1/</id>
      <content type="html">
				&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/10.vader_unit_tests-440w.webp 440w, http://localhost:8080/assets/images/10.vader_unit_tests-625w.webp 625w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/10.vader_unit_tests-625w.webp&quot; width=&quot;625&quot; height=&quot;304&quot; alt=&quot;I find your lack of unit tests disturbing!&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;h2 id=&quot;sitecore-projects-and-untestable-code&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/isolating-calls-to-sitecore-context-part-1/#sitecore-projects-and-untestable-code&quot; class=&quot;heading-anchor&quot;&gt;Sitecore projects and (un)testable code&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Over the last years I‚Äôve been involved with quite some Sitecore projects, some were true greenfield projects where a solution is created from scratch and some involved ‚Äòonly‚Äô customizing components or extending the existing platform with new functionality. I enjoy both types of projects since they each have their challenges. I do want to share my concern from what I‚Äôve seen in some of the latter solutions. Some things that all of these projects had in common were:&lt;/p&gt;&lt;ol class=&quot;list&quot;&gt;&lt;li&gt;Little to no utilization of an ORM, such as &lt;a href=&quot;https://marketplace.sitecore.net/Modules/Glass_Sitecore_Mapper.aspx?sc_lang=en&quot; rel=&quot;noopener&quot;&gt;Glass&lt;/a&gt; &lt;a href=&quot;https://github.com/kamsar/Synthesis&quot; rel=&quot;noopener&quot;&gt;Synthesis&lt;/a&gt;, &lt;a href=&quot;https://marketplace.sitecore.net/en/Modules/Compiled_Domain_Model.aspx&quot; rel=&quot;noopener&quot;&gt;CDM&lt;/a&gt; (or a well defined self made solution).&lt;/li&gt;&lt;li&gt;Lack of proper testable code (no dependency injection).&lt;/li&gt;&lt;li&gt;Lack of unit tests&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Of course all these three points are related. If maintainability is important it is vital to any software project that code is written in such a way that it is unit testable. Although this post concerns isolating Sitecore, it could as well be about isolating calls to a custom database or to a logging component.&lt;/p&gt;&lt;p&gt;This post is intended as a practical guide for the ones involved with these ‚Äòdifficult‚Äô projects and are strongly in favor of improving the code base in order to improve the testability and maintainability without spending many man months up front to make it happen.&lt;/p&gt;&lt;h2 id=&quot;isolating-calls-to-the-sitecore-context&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/isolating-calls-to-sitecore-context-part-1/#isolating-calls-to-the-sitecore-context&quot; class=&quot;heading-anchor&quot;&gt;Isolating calls to the Sitecore context&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The biggest problem I noticed with some Sitecore solutions is that calls to &lt;code&gt;Sitecore.Context.Database.GetItem()&lt;/code&gt; are all over the place.&lt;/p&gt;&lt;p&gt;The first thing that can be done is to isolate these calls and put this in a custom &lt;code&gt;ItemProvider&lt;/code&gt; class. (Note that Sitecore has its own &lt;code&gt;ItemProvider&lt;/code&gt; class in the Sitecore.Kernel.dll but we‚Äôre not touching that one.)&lt;br&gt;So let‚Äôs start with the following very basic interface (&lt;code&gt;IItemProvider&lt;/code&gt;) and implementation (&lt;code&gt;ItemProvider&lt;/code&gt;). It will get more interesting later, I promise.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;IItemProvider.cs&lt;/strong&gt;&lt;/p&gt;&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;Sitecore&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Data&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;Sitecore&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Items&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;SitecorePlayground&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Common&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Interfaces&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Providers&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IItemProvider&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token return-type class-name&quot;&gt;Item&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;GetItem&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ID&lt;/span&gt; itemId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;ItemProvider.cs&lt;/strong&gt;&lt;/p&gt;&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;Sitecore&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Data&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;Sitecore&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Items&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;SitecorePlayground&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Common&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Interfaces&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Providers&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;SitecorePlayground&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Common&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Providers&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ItemProvider&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token type-list&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;IItemProvider&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;Item&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;GetItem&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ID&lt;/span&gt; itemId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; Sitecore&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Context&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Database&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;GetItem&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;itemId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In every Sitecore solution C# models are used which are based on Sitecore templates. Let‚Äôs assume we are dealing with the following &lt;code&gt;Author&lt;/code&gt; object in C#.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Author.cs&lt;/strong&gt;&lt;/p&gt;&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;SitecorePlayground&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;News&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Models&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Author&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt; Name &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt; Company &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;Author&lt;/code&gt; instances are usually retrieved via a specific provider such as the &lt;code&gt;AuthorProvider&lt;/code&gt; below. (The class name in the gist below is a bit longer because I‚Äôll show another flavor of this provider in a next post).&lt;/p&gt;&lt;p&gt;&lt;strong&gt;AuthorProviderBasedOnRegularItem.cs&lt;/strong&gt;&lt;/p&gt;&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;Sitecore&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Data&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;Sitecore&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Items&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;SitecorePlayground&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Common&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Interfaces&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Providers&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;SitecorePlayground&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;News&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Models&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;SitecorePlayground&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;News&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Providers&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;AuthorProviderBasedOnRegularItem&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IItemProvider&lt;/span&gt; itemProvider&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;AuthorProviderBasedOnRegularItem&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;IItemProvider&lt;/span&gt; itemProvider&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;itemProvider &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; itemProvider&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;Author&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;GetAuthor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt; authorId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token class-name&quot;&gt;ID&lt;/span&gt; parsedAuthorId&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;ID&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;TryParse&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;authorId&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;out&lt;/span&gt; parsedAuthorId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;GetAuthor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;parsedAuthorId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;Author&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;GetAuthor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ID&lt;/span&gt; authorId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; authorItem &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;GetAuthorItem&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;authorId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;authorItem &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;Author&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                Company &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; authorItem&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Templates&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;AuthorTemplate&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Fields&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;AuthorCompany&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                Name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; authorItem&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Templates&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;AuthorTemplate&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Fields&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;AuthorName&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;Item&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;GetAuthorItem&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ID&lt;/span&gt; authorItemId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; itemProvider&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;GetItem&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;authorItemId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Notice that the constructor of &lt;code&gt;AuthorProvider&lt;/code&gt; requires an instance of a type that implements &lt;code&gt;IItemProvider&lt;/code&gt; (this is an example of constructor injection). The &lt;code&gt;GetAuthorItem()&lt;/code&gt; method calls the &lt;code&gt;GetItem()&lt;/code&gt; method on the &lt;code&gt;IItemProvider&lt;/code&gt; and this construction enables us to unit test the &lt;code&gt;AuthorProvider&lt;/code&gt; using &lt;a href=&quot;https://github.com/sergeyshushlyapin/Sitecore.FakeDb&quot; rel=&quot;noopener&quot;&gt;Sitecore.FakeDb&lt;/a&gt; and &lt;a href=&quot;https://github.com/Moq/moq4&quot; rel=&quot;noopener&quot;&gt;Moq&lt;/a&gt; (or any other mocking framework you prefer).&lt;/p&gt;&lt;h2 id=&quot;unit-tests-with-sitecorefakedb-and-moq&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/isolating-calls-to-sitecore-context-part-1/#unit-tests-with-sitecorefakedb-and-moq&quot; class=&quot;heading-anchor&quot;&gt;Unit tests with Sitecore.FakeDb and Moq&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Sitecore.FakeDb is a very nice unit testing framework which allows creation and manipulation of Sitecore items in &lt;a href=&quot;http://memory.It&quot; rel=&quot;noopener&quot;&gt;memory.It&lt;/a&gt;‚Äôs quite easy to get started with. Just install the &lt;a href=&quot;https://www.nuget.org/packages/Sitecore.FakeDb/&quot; rel=&quot;noopener&quot;&gt;NuGet package&lt;/a&gt; and follow the &lt;a href=&quot;https://github.com/sergeyshushlyapin/Sitecore.FakeDb/wiki/Installation&quot; rel=&quot;noopener&quot;&gt;instructions&lt;/a&gt; carefully because some Sitecore &amp;amp; Lucene assemblies and a valid Sitecore license are required. In the example below I only use FakeDb as a source for getting Sitecore items.&lt;br&gt;&lt;a href=&quot;http://www.nuget.org/packages/moq&quot; rel=&quot;noopener&quot;&gt;Moq&lt;/a&gt; is a very popular mocking framework. If you don‚Äôt know it make sure you read at least the &lt;a href=&quot;https://github.com/Moq/moq4/wiki/Quickstart&quot; rel=&quot;noopener&quot;&gt;quickstart&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Here is the unit test for the &lt;code&gt;AuthorProvider.GetAuthor()&lt;/code&gt; method.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;AuthorProviderBasedOnRegularItem.cs&lt;/strong&gt;&lt;/p&gt;&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;Moq&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;NUnit&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Framework&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;Sitecore&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Data&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;Sitecore&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Items&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;Sitecore&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;FakeDb&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;SitecorePlayground&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Common&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Interfaces&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Providers&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;SitecorePlayground&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;News&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Models&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;SitecorePlayground&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;News&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Providers&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;SitecorePlayground&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;News&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Templates&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;SitecorePlayground&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;News&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Test&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Providers&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;/// Unit tests for the AuthorProviderBasedOnRegularItem class.&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;TestFixture&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token attribute&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;Category&lt;/span&gt;&lt;span class=&quot;token attribute-arguments&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Requires Sitecore.FakeDb and Sitecore license&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;AuthorProviderBasedOnRegularItemTests&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token attribute&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;Test&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;GetAuthor_WithValidAuthorBasedOnRegularItem_ReturnsAuthorObject&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; fakeDb &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;Db&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;token comment&quot;&gt;// Arrange&lt;/span&gt;
                &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; authorId &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Guid&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;NewGuid&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; templateId &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;AuthorTemplate&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;TemplateId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;token class-name&quot;&gt;DbItem&lt;/span&gt; fakeDbItem &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;GetFakeAuthorDbItem&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;John West&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Sitecore&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; authorId&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; templateId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                fakeDb&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;fakeDbItem&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; fakeAuthorItem &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; fakeDb&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;GetItem&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;authorId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; itemProviderMock &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;GetItemProviderMock&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;fakeAuthorItem&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; authorProvider &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;AuthorProviderBasedOnRegularItem&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;itemProviderMock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Object&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

                &lt;span class=&quot;token comment&quot;&gt;// Act&lt;/span&gt;
                &lt;span class=&quot;token class-name&quot;&gt;Author&lt;/span&gt; result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; authorProvider&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;GetAuthor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;authorId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

                &lt;span class=&quot;token comment&quot;&gt;// Assert&lt;/span&gt;
                Assert&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;AreEqual&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;John West&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; result&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;DbItem&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;GetFakeAuthorDbItem&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt; authorName&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt; authorCompany&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ID&lt;/span&gt; itemId&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ID&lt;/span&gt; templateId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;DbItem&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;authorName&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; itemId&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; templateId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                       &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                           &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; AuthorTemplate&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Fields&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;AuthorName&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; authorName &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 
                           &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; AuthorTemplate&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Fields&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;AuthorCompany&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; authorCompany &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
                       &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;Mock&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;IItemProvider&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;GetItemProviderMock&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Item&lt;/span&gt; authorItem&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; itemProviderMock &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;Mock&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;IItemProvider&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            itemProviderMock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Setup&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mock &lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt; mock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;GetItem&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;It&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token generic-method&quot;&gt;&lt;span class=&quot;token function&quot;&gt;IsAny&lt;/span&gt;&lt;span class=&quot;token generic class-name&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;ID&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Returns&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;authorItem&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; itemProviderMock&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The goal of the unit test is to verify if the &lt;code&gt;GetAuthor()&lt;/code&gt; method of the &lt;code&gt;AuthorProvider&lt;/code&gt; returns an Author object when a Sitecore item Id is passed in as a parameter. When the &lt;code&gt;AuthorProvider&lt;/code&gt; is used in a website context an &lt;code&gt;ItemProvider&lt;/code&gt; is passed into the constructor of the &lt;code&gt;AuthorProvider&lt;/code&gt; and the item is retrieved from the Sitecore context. In the unit test however we don‚Äôt want any dependency on the Sitecore context. Therefore an mock is created based on the &lt;code&gt;IItemProvider&lt;/code&gt;interface. We can set-up the &lt;code&gt;GetItem()&lt;/code&gt; method on the mock to return a fake Sitecore item which we will get from Sitecore.FakeDb.&lt;/p&gt;&lt;p&gt;Let‚Äôs look at the the unit test in more detail.&lt;/p&gt;&lt;h3 id=&quot;//-arrange&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/isolating-calls-to-sitecore-context-part-1/#//-arrange&quot; class=&quot;heading-anchor&quot;&gt;// Arrange&lt;/a&gt;&lt;/h3&gt;&lt;ul class=&quot;list&quot;&gt;&lt;li&gt;Since FakeDb is an in memory database an instance is created inside a using statement. This ensures that the in memory database is disposed properly after running the unit test.&lt;/li&gt;&lt;li&gt;In order to create a new &lt;code&gt;DbItem&lt;/code&gt; (from Sitecore.FakeDb) an item Name, Id and Template Id are required. The &lt;code&gt;GetFakeAuthorDbItem&lt;/code&gt; method constructs the &lt;code&gt;DbItem&lt;/code&gt; with fields for the author name and the company.&lt;/li&gt;&lt;li&gt;Once the &lt;code&gt;DbItem&lt;/code&gt; is created and added to the FakeDb instance we retrieve the Sitecore item (&lt;code&gt;fakeAuthorItem&lt;/code&gt;) from FakeDb.&lt;/li&gt;&lt;li&gt;Next an &lt;code&gt;itemProviderMock&lt;/code&gt; object is created based on the &lt;code&gt;IItemProvider&lt;/code&gt; and the &lt;code&gt;fakeAuthorItem&lt;/code&gt; is passed since that is used as the returning item for the mocked &lt;code&gt;GetItem()&lt;/code&gt;method (see the &lt;code&gt;GetItemProviderMock&lt;/code&gt; method how that is set-up).&lt;/li&gt;&lt;li&gt;In the final line of the Arrange section an instance of the &lt;code&gt;AuthorProvider&lt;/code&gt; is created and the &lt;code&gt;itemProviderMock&lt;/code&gt; is passed in the constructor.&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&quot;//-act&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/isolating-calls-to-sitecore-context-part-1/#//-act&quot; class=&quot;heading-anchor&quot;&gt;// Act&lt;/a&gt;&lt;/h3&gt;&lt;ul class=&quot;list&quot;&gt;&lt;li&gt;The &lt;code&gt;GetAuthor()&lt;/code&gt; method on the &lt;code&gt;AuthorProvider&lt;/code&gt; is called. Inside this method the &lt;code&gt;GetAuthorItem()&lt;/code&gt; method is called which in turn executes the set-up &lt;code&gt;GetItem()&lt;/code&gt; method of the mocked &lt;code&gt;IItemProvider&lt;/code&gt;. A Sitecore item (from FakeDb) is returned and mapped to a new &lt;code&gt;Author&lt;/code&gt; object.&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&quot;//-assert&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/isolating-calls-to-sitecore-context-part-1/#//-assert&quot; class=&quot;heading-anchor&quot;&gt;// Assert&lt;/a&gt;&lt;/h3&gt;&lt;ul class=&quot;list&quot;&gt;&lt;li&gt;An assertion is done to check if the Name property of the &lt;code&gt;Author&lt;/code&gt; object is equal to the author name field of the Sitecore item.&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;conclusion&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/isolating-calls-to-sitecore-context-part-1/#conclusion&quot; class=&quot;heading-anchor&quot;&gt;Conclusion&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Though this example is fairly straightforward it demonstrates how to write testable code when you‚Äôre dealing with Sitecore projects. Writing testable code and using a mocking framework in combination with Sitecore.FakeDb in unit tests can be a bit of a learning curve but I consider these as must have skills for any Sitecore developer these days.&lt;/p&gt;&lt;p&gt;In the &lt;a href=&quot;http://localhost:8080/articles/isolating-calls-to-sitecore-context-part-2&quot;&gt;next post&lt;/a&gt; I‚Äôll show a similar approach with an &lt;code&gt;ItemProvider&lt;/code&gt; that uses an &lt;code&gt;ItemAdapter&lt;/code&gt; instead of a regular Sitecore item.&lt;/p&gt;&lt;h2 id=&quot;source-code&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/isolating-calls-to-sitecore-context-part-1/#source-code&quot; class=&quot;heading-anchor&quot;&gt;Source code&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The full source code that is used in this post (and lots more) is on &lt;a href=&quot;https://github.com/marcduiker/SitecorePlayground&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;. Feel free to poke at it and suggest improvements.&lt;/p&gt;
 			</content>
    </entry><entry>
      <title>Sitecore MVP Summit Cocktail Workshop (photo impression)</title>
      <link href="http://localhost:8080/articles/sitecore-mvp-summit-cocktail-workshop/" />
      <updated>2014-10-01T00:00:00Z</updated>
      <id>http://localhost:8080/articles/sitecore-mvp-summit-cocktail-workshop/</id>
      <content type="html">
				&lt;h2 id=&quot;mvp-summit-barcelona&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/sitecore-mvp-summit-cocktail-workshop/#mvp-summit-barcelona&quot; class=&quot;heading-anchor&quot;&gt;MVP Summit Barcelona&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Directly after Sitecore Symposium Barcelona had finished the Sitecore MVP Summit started. And it started in style. We were taken to &lt;a href=&quot;http://www.javierdelasmuelas.com/eng/dry/barcelona/the-academy-v2&quot; rel=&quot;noopener&quot;&gt;Dry Martini The Academy&lt;/a&gt; where a cocktail making workshop was organised. The evening was completed with a excellent dinner at &lt;a href=&quot;http://www.speakeasy-bcn.com/en/&quot; rel=&quot;noopener&quot;&gt;Speakeasy&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Here‚Äôs a small impression of the evening. If you want to see all the pictures (and you should üòÉ check the link at the bottom of this post.&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/9.1.sitecoremvpcocktailparty-1-440w.webp 440w, http://localhost:8080/assets/images/9.1.sitecoremvpcocktailparty-1-650w.webp 650w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/9.1.sitecoremvpcocktailparty-1-650w.webp&quot; width=&quot;650&quot; height=&quot;365&quot; alt=&quot;Sitecore MVP cocktail workshop&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;br&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/9.2.sitecoremvpcocktailparty-2-440w.webp 440w, http://localhost:8080/assets/images/9.2.sitecoremvpcocktailparty-2-650w.webp 650w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/9.2.sitecoremvpcocktailparty-2-650w.webp&quot; width=&quot;650&quot; height=&quot;365&quot; alt=&quot;Sitecore MVP cocktail workshop&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;br&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/9.3.sitecoremvpcocktailparty-3-440w.webp 440w, http://localhost:8080/assets/images/9.3.sitecoremvpcocktailparty-3-650w.webp 650w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/9.3.sitecoremvpcocktailparty-3-650w.webp&quot; width=&quot;650&quot; height=&quot;365&quot; alt=&quot;Sitecore MVP cocktail workshop&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;br&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/9.4.sitecoremvpcocktailparty-4-440w.webp 440w, http://localhost:8080/assets/images/9.4.sitecoremvpcocktailparty-4-650w.webp 650w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/9.4.sitecoremvpcocktailparty-4-650w.webp&quot; width=&quot;650&quot; height=&quot;365&quot; alt=&quot;Sitecore MVP cocktail workshop&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;br&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/9.5.sitecoremvpcocktailparty-5-440w.webp 440w, http://localhost:8080/assets/images/9.5.sitecoremvpcocktailparty-5-650w.webp 650w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/9.5.sitecoremvpcocktailparty-5-650w.webp&quot; width=&quot;650&quot; height=&quot;365&quot; alt=&quot;Sitecore MVP cocktail workshop&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;br&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/9.6.sitecoremvpcocktailparty-6-440w.webp 440w, http://localhost:8080/assets/images/9.6.sitecoremvpcocktailparty-6-650w.webp 650w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/9.6.sitecoremvpcocktailparty-6-650w.webp&quot; width=&quot;650&quot; height=&quot;365&quot; alt=&quot;Sitecore MVP cocktail workshop&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;br&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/9.7.sitecoremvpcocktailparty-7-440w.webp 440w, http://localhost:8080/assets/images/9.7.sitecoremvpcocktailparty-7-650w.webp 650w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/9.7.sitecoremvpcocktailparty-7-650w.webp&quot; width=&quot;650&quot; height=&quot;365&quot; alt=&quot;Sitecore MVP cocktail workshop&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;br&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/9.8.sitecoremvpcocktailparty-8-440w.webp 440w, http://localhost:8080/assets/images/9.8.sitecoremvpcocktailparty-8-650w.webp 650w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/9.8.sitecoremvpcocktailparty-8-650w.webp&quot; width=&quot;650&quot; height=&quot;365&quot; alt=&quot;Sitecore MVP cocktail workshop&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;br&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/9.9.sitecoremvpcocktailparty-9-440w.webp 440w, http://localhost:8080/assets/images/9.9.sitecoremvpcocktailparty-9-650w.webp 650w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/9.9.sitecoremvpcocktailparty-9-650w.webp&quot; width=&quot;650&quot; height=&quot;365&quot; alt=&quot;Sitecore MVP cocktail workshop&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;br&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/9.10.sitecoremvpcocktailparty-10-440w.webp 440w, http://localhost:8080/assets/images/9.10.sitecoremvpcocktailparty-10-650w.webp 650w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/9.10.sitecoremvpcocktailparty-10-650w.webp&quot; width=&quot;650&quot; height=&quot;365&quot; alt=&quot;Sitecore MVP cocktail workshop&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;br&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/9.11.sitecoremvpcocktailparty-11-440w.webp 440w, http://localhost:8080/assets/images/9.11.sitecoremvpcocktailparty-11-650w.webp 650w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/9.11.sitecoremvpcocktailparty-11-650w.webp&quot; width=&quot;650&quot; height=&quot;365&quot; alt=&quot;Sitecore MVP cocktail workshop&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;br&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/9.12.sitecoremvpcocktailparty-12-440w.webp 440w, http://localhost:8080/assets/images/9.12.sitecoremvpcocktailparty-12-650w.webp 650w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/9.12.sitecoremvpcocktailparty-12-650w.webp&quot; width=&quot;650&quot; height=&quot;365&quot; alt=&quot;Sitecore MVP cocktail workshop&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;See the full set of pictures (43) on &lt;a href=&quot;https://onedrive.live.com/redir?resid=89069150F6445DF7!2215&amp;amp;authkey=!ANDiMLnh4xaEhC8&amp;amp;ithint=folder%2cjpg&quot; rel=&quot;noopener&quot;&gt;OneDrive&lt;/a&gt;.&lt;/p&gt;
 			</content>
    </entry><entry>
      <title>Sitecore Symposium 2014 - Keynote Session (photo impression)</title>
      <link href="http://localhost:8080/articles/sitecore-symposium-2014-keynote-session/" />
      <updated>2014-09-23T00:00:00Z</updated>
      <id>http://localhost:8080/articles/sitecore-symposium-2014-keynote-session/</id>
      <content type="html">
				&lt;h2 id=&quot;barcelona-keynote-session&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/sitecore-symposium-2014-keynote-session/#barcelona-keynote-session&quot; class=&quot;heading-anchor&quot;&gt;Barcelona Keynote Session&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Michael Seifert, the CEO of Sitecore, opened the Symposium with an excellent keynote about experiences and its role in the current (and future) digital landscape. Experiences should be collected and can actually be shaped for marketing purposes. Michael showcased how Sitecore 8 can help organisations in shaping experiences for their audience.&lt;/p&gt;&lt;p&gt;Here‚Äôs an impression of the keynote session.&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/8.1.sitecoresymposium-01-440w.webp 440w, http://localhost:8080/assets/images/8.1.sitecoresymposium-01-650w.webp 650w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/8.1.sitecoresymposium-01-650w.webp&quot; width=&quot;650&quot; height=&quot;487&quot; alt=&quot;Sitecore Symposium 1&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;br&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/8.2.sitecoresymposium-02-440w.webp 440w, http://localhost:8080/assets/images/8.2.sitecoresymposium-02-650w.webp 650w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/8.2.sitecoresymposium-02-650w.webp&quot; width=&quot;650&quot; height=&quot;487&quot; alt=&quot;Sitecore Symposium 2&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;br&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/8.3.sitecoresymposium-03-440w.webp 440w, http://localhost:8080/assets/images/8.3.sitecoresymposium-03-650w.webp 650w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/8.3.sitecoresymposium-03-650w.webp&quot; width=&quot;650&quot; height=&quot;487&quot; alt=&quot;Sitecore Symposium 3&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;br&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/8.4.sitecoresymposium-04-440w.webp 440w, http://localhost:8080/assets/images/8.4.sitecoresymposium-04-650w.webp 650w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/8.4.sitecoresymposium-04-650w.webp&quot; width=&quot;650&quot; height=&quot;487&quot; alt=&quot;Sitecore Symposium 4&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;br&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/8.5.sitecoresymposium-05-440w.webp 440w, http://localhost:8080/assets/images/8.5.sitecoresymposium-05-650w.webp 650w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/8.5.sitecoresymposium-05-650w.webp&quot; width=&quot;650&quot; height=&quot;487&quot; alt=&quot;Sitecore Symposium 5&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;br&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/8.6.sitecoresymposium-06-440w.webp 440w, http://localhost:8080/assets/images/8.6.sitecoresymposium-06-650w.webp 650w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/8.6.sitecoresymposium-06-650w.webp&quot; width=&quot;650&quot; height=&quot;487&quot; alt=&quot;Sitecore Symposium 6&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;br&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/8.7.sitecoresymposium-07-440w.webp 440w, http://localhost:8080/assets/images/8.7.sitecoresymposium-07-650w.webp 650w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/8.7.sitecoresymposium-07-650w.webp&quot; width=&quot;650&quot; height=&quot;487&quot; alt=&quot;Sitecore Symposium 7&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;br&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/8.8.sitecoresymposium-08-440w.webp 440w, http://localhost:8080/assets/images/8.8.sitecoresymposium-08-650w.webp 650w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/8.8.sitecoresymposium-08-650w.webp&quot; width=&quot;650&quot; height=&quot;487&quot; alt=&quot;Sitecore Symposium 8&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;br&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/8.9.sitecoresymposium-09-440w.webp 440w, http://localhost:8080/assets/images/8.9.sitecoresymposium-09-650w.webp 650w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/8.9.sitecoresymposium-09-650w.webp&quot; width=&quot;650&quot; height=&quot;487&quot; alt=&quot;Sitecore Symposium 9&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;
 			</content>
    </entry><entry>
      <title>Sitecore MVP Summit, Dev Podcasts and Newsletter</title>
      <link href="http://localhost:8080/articles/sitecore-mvp-summit-dev-podcasts-and-newsletter/" />
      <updated>2013-11-11T00:00:00Z</updated>
      <id>http://localhost:8080/articles/sitecore-mvp-summit-dev-podcasts-and-newsletter/</id>
      <content type="html">
				&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/7.sitecore_mvp_summit_2013-440w.webp 440w, http://localhost:8080/assets/images/7.sitecore_mvp_summit_2013-640w.webp 640w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/7.sitecore_mvp_summit_2013-640w.webp&quot; width=&quot;640&quot; height=&quot;386&quot; alt=&quot;Sitecore MVP Summit 2013&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;h2 id=&quot;sitecore-mvp-summit-miami&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/sitecore-mvp-summit-dev-podcasts-and-newsletter/#sitecore-mvp-summit-miami&quot; class=&quot;heading-anchor&quot;&gt;Sitecore MVP Summit Miami&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;This week more than 60 Sitecore MVPs from 10 different countries will attend the first global &lt;a href=&quot;http://sitecoremvpsummit.net/&quot; rel=&quot;noopener&quot;&gt;Sitecore MVP&lt;/a&gt; summit. I consider myself very fortunate to be one of them üòÉ.&lt;/p&gt;&lt;p&gt;There are quite a few Dutch MVPs and many of them are able to join the summit in Miami. For the non-Dutch MVPs who are attending, I‚Äôm pretty sure you‚Äôll be able to recognize us üòâ. (Make sure to check &lt;a href=&quot;https://twitter.com/search?q=%23sitecoremvpsummit&quot; rel=&quot;noopener&quot;&gt;#sitecoremvpsummit&lt;/a&gt; on Twitter the next few days!).&lt;/p&gt;&lt;h2 id=&quot;travel-and-learn&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/sitecore-mvp-summit-dev-podcasts-and-newsletter/#travel-and-learn&quot; class=&quot;heading-anchor&quot;&gt;Travel &amp;amp; learn&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Since I‚Äôll be spending quite some time travelling from The Netherlands to the US I thought I can use this time efficiently and catch up with some of the latest software engineering &amp;amp; .Net development news by listening to podcasts. So I installed &lt;a href=&quot;https://play.google.com/store/apps/details?id=com.bambuna.podcastaddict&quot; rel=&quot;noopener&quot;&gt;Podcast Addict&lt;/a&gt; (for Android) on my phone and added the following feeds:&lt;/p&gt;&lt;ul class=&quot;list&quot;&gt;&lt;li&gt;&lt;a href=&quot;http://herdingcode.com/&quot; rel=&quot;noopener&quot;&gt;Herding Code&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.hanselminutes.com/&quot; rel=&quot;noopener&quot;&gt;HanselMinutes&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.se-radio.net/&quot; rel=&quot;noopener&quot;&gt;Software Engineering Radio&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://integrumtech.com/category/agile-weekly-podcast/&quot; rel=&quot;noopener&quot;&gt;Agile Weekly&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://channel9.msdn.com/Feeds/RSS&quot; rel=&quot;noopener&quot;&gt;Channel 9&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Unfortunately I didn‚Äôt find any active Sitecore related feeds (there used to be one on &lt;a href=&quot;http://learnsitecore.cmsuniverse.net/&quot; rel=&quot;noopener&quot;&gt;http://learnsitecore.cmsuniverse.net&lt;/a&gt;). What I did find was a post describing &lt;a href=&quot;http://ihuangsitecore.blogspot.nl/2013/06/sitecore-podcast-feed.html&quot; rel=&quot;noopener&quot;&gt;how to build a podcast feed in Sitecore&lt;/a&gt;.&lt;/p&gt;&lt;h1 id=&quot;sitecore-dev-news&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/sitecore-mvp-summit-dev-podcasts-and-newsletter/#sitecore-dev-news&quot; class=&quot;heading-anchor&quot;&gt;Sitecore dev news&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;If you want to stay up to date on the latest Sitecore development topics you really need to subscribe to the &lt;a href=&quot;http://tinyletter.com/sitecorebasics&quot; rel=&quot;noopener&quot;&gt;Sitecore Basics Weekly Newsletter&lt;/a&gt; (an excellent initiative by &lt;a href=&quot;https://twitter.com/kiranpatils&quot; rel=&quot;noopener&quot;&gt;Kiran Patil&lt;/a&gt;). In addition it is very useful (and great fun) to watch the &lt;a href=&quot;http://www.youtube.com/user/SitecorePM&quot; rel=&quot;noopener&quot;&gt;Sitecore 7 videos on Youtube&lt;/a&gt; or watch them live on &lt;a href=&quot;https://plus.google.com/+sitecore/posts&quot; rel=&quot;noopener&quot;&gt;Google+&lt;/a&gt;.&lt;/p&gt;
 			</content>
    </entry><entry>
      <title>Lazy Programmers User Code Snippets</title>
      <link href="http://localhost:8080/articles/lazy-programmers-use-code-snippets/" />
      <updated>2013-07-07T00:00:00Z</updated>
      <id>http://localhost:8080/articles/lazy-programmers-use-code-snippets/</id>
      <content type="html">
				&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/6.propfull_snippet-362w.webp 362w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/6.propfull_snippet-362w.webp&quot; width=&quot;362&quot; height=&quot;130&quot; alt=&quot;Full property snippet&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;h2 id=&quot;the-best-programmers-are-lazy&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/lazy-programmers-use-code-snippets/#the-best-programmers-are-lazy&quot; class=&quot;heading-anchor&quot;&gt;The best programmers are lazy&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The great &lt;a href=&quot;http://en.wikipedia.org/wiki/Larry_Wall&quot; rel=&quot;noopener&quot;&gt;Larry Wall&lt;/a&gt; (author of Perl) claimed that laziness is one of the greatest virtues a programmer could develop. The best programmers are lazy in the sense that they do not write duplicate code or take pleasure in writing boilerplate code. They are efficient in writing code that follows the &lt;a href=&quot;http://en.wikipedia.org/wiki/Don&#39;t_repeat_yourself&quot; rel=&quot;noopener&quot;&gt;DRY&lt;/a&gt;, &lt;a href=&quot;http://en.wikipedia.org/wiki/KISS_principle&quot; rel=&quot;noopener&quot;&gt;KISS&lt;/a&gt; and &lt;a href=&quot;http://en.wikipedia.org/wiki/You_aren&#39;t_gonna_need_it&quot; rel=&quot;noopener&quot;&gt;YAGNI&lt;/a&gt; principles.&lt;/p&gt;&lt;h3 id=&quot;efficient-ide-usage&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/lazy-programmers-use-code-snippets/#efficient-ide-usage&quot; class=&quot;heading-anchor&quot;&gt;Efficient IDE usage&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Next to writing as few lines of code as possible (without compromising on readability ofcourse), being a lazy programmer also means using the IDE efficiently.&lt;/p&gt;&lt;p&gt;This means:&lt;/p&gt;&lt;ol class=&quot;list&quot;&gt;&lt;li&gt;Knowing when and how to use the various project and project item templates.&lt;/li&gt;&lt;li&gt;Using keyboard shortcuts instead of navigating through long menus.&lt;/li&gt;&lt;li&gt;Using code snippets instead of writing boilerplate code.&lt;/li&gt;&lt;/ol&gt;&lt;h3 id=&quot;code-snippets&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/lazy-programmers-use-code-snippets/#code-snippets&quot; class=&quot;heading-anchor&quot;&gt;Code Snippets&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Ever since the 2005 edition, Visual Studio allows inserting blocks of reusable code, called code snippets, through shortcut keys (or the context menu, but truly lazy programmers don‚Äôt take away their hands off the keyboard).&lt;/p&gt;&lt;p&gt;I‚Äôm still amazed by the fact that so many .Net developers are still not aware of these code snippets. Using these can really speed up writing commonly used bits of code like properties with backing fields, try/catch blocks, foreach loops etc.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;So if you want to be a lazy programmer learn these snippet shortcuts by heart!&lt;/strong&gt;&lt;/p&gt;&lt;ol class=&quot;list&quot;&gt;&lt;li&gt;&lt;code&gt;ctor&lt;/code&gt; - constructor&lt;/li&gt;&lt;li&gt;&lt;code&gt;prop&lt;/code&gt; - auto implemented property&lt;/li&gt;&lt;li&gt;&lt;code&gt;propg&lt;/code&gt; - auto implemented property with private setter&lt;/li&gt;&lt;li&gt;&lt;code&gt;propfull&lt;/code&gt; - property with backing field&lt;/li&gt;&lt;li&gt;&lt;code&gt;if&lt;/code&gt; - if block&lt;/li&gt;&lt;li&gt;&lt;code&gt;else&lt;/code&gt; - else block&lt;/li&gt;&lt;li&gt;&lt;code&gt;try&lt;/code&gt; - try/catch block&lt;/li&gt;&lt;li&gt;&lt;code&gt;tryf&lt;/code&gt; - try/finally block (oddly enough there is no trycf!)&lt;/li&gt;&lt;li&gt;&lt;code&gt;for&lt;/code&gt; - for loop&lt;/li&gt;&lt;li&gt;&lt;code&gt;forr&lt;/code&gt; - reverse for loop&lt;/li&gt;&lt;li&gt;&lt;code&gt;foreach&lt;/code&gt; - foreach loop&lt;/li&gt;&lt;li&gt;&lt;code&gt;switch&lt;/code&gt; - switch block&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Simply invoke the snippet by typing the shortcut followed by &lt;code&gt;[TAB]&lt;/code&gt;. &lt;a href=&quot;http://msdn.microsoft.com/library/z41h7fat.aspx&quot; rel=&quot;noopener&quot;&gt;Here‚Äôs a list&lt;/a&gt; with more built-in shortcuts if you‚Äôre eager for more.&lt;/p&gt;&lt;h3 id=&quot;get-lazier-write-your-own-snippets&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/lazy-programmers-use-code-snippets/#get-lazier-write-your-own-snippets&quot; class=&quot;heading-anchor&quot;&gt;Get lazier: write your own snippets!&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;If you want to be as lazy as me you can easily &lt;a href=&quot;http://msdn.microsoft.com/library/ms165394.aspx&quot; rel=&quot;noopener&quot;&gt;write your own snippets&lt;/a&gt; as I‚Äôve done for &lt;a href=&quot;http://localhost:8080/articles/visual-studio-snippet-for-extension-methods&quot;&gt;extension methods&lt;/a&gt;, &lt;a href=&quot;http://localhost:8080/articles/visual-studio-snippets-for-unit-test-methods&quot;&gt;unit tests&lt;/a&gt; and more. The &lt;a href=&quot;http://visualstudiogallery.msdn.microsoft.com/B08B0375-139E-41D7-AF9B-FAEE50F68392&quot; rel=&quot;noopener&quot;&gt;Snippet Designer plugin&lt;/a&gt; can be useful if you don‚Äôt like editing the raw XML.&lt;/p&gt;&lt;p&gt;Enjoy lazy coding!&lt;/p&gt;
 			</content>
    </entry><entry>
      <title>Visual Studio Snippet for Extension Methods</title>
      <link href="http://localhost:8080/articles/visual-studio-snippet-for-extension-methods/" />
      <updated>2013-07-04T00:00:00Z</updated>
      <id>http://localhost:8080/articles/visual-studio-snippet-for-extension-methods/</id>
      <content type="html">
				&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/5.extension_method_snippet-406w.webp 406w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/5.extension_method_snippet-406w.webp&quot; width=&quot;406&quot; height=&quot;81&quot; alt=&quot;Extension method snippet&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;h2 id=&quot;extension-methods&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/visual-studio-snippet-for-extension-methods/#extension-methods&quot; class=&quot;heading-anchor&quot;&gt;Extension methods&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Using extension methods in Visual Studio can really help to reduce writing boilerplate code. Here‚Äôs a simple snippet which can be used to create extension methods.&lt;/p&gt;&lt;pre class=&quot;language-xml&quot;&gt;&lt;code class=&quot;language-xml&quot;&gt;&lt;span class=&quot;token prolog&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;CodeSnippets&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;xmlns&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;CodeSnippet&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;Format&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;1.0.0&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;Header&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
      &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;SnippetTypes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;SnippetType&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;Expansion&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;SnippetType&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
      &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;SnippetTypes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
      &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;Title&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;Extension Method&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;Title&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
      &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;Author&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;Marc Duiker&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;Author&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
      &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;Description&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;Snippet to create an extension method. 
      &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;Description&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
      &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;HelpUrl&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
      &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;HelpUrl&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
      &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;Shortcut&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;exm&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;Shortcut&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;Header&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;Snippet&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
      &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;Declarations&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;Literal&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;Editable&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;true&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
          &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;ID&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;TypeOut&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;ID&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
          &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;ToolTip&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;TypeOut&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;ToolTip&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
          &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;Default&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;TypeOut&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;Default&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
          &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;Function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
          &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;Function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;Literal&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;Literal&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;Editable&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;true&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
          &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;ID&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;MethodName&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;ID&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
          &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;ToolTip&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;MethodName&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;ToolTip&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
          &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;Default&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;MethodName&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;Default&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
          &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;Function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
          &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;Function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;Literal&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;Literal&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;Editable&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;true&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
          &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;ID&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;TypeIn&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;ID&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
          &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;ToolTip&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;TypeIn&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;ToolTip&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
          &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;Default&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;TypeIn&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;Default&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
          &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;Function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
          &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;Function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;Literal&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;Literal&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;Editable&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;true&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
          &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;ID&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;parameter&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;ID&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
          &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;ToolTip&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;parameter&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;ToolTip&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
          &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;Default&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;parameter&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;Default&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
          &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;Function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
          &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;Function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;Literal&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
      &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;Declarations&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
      &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;Code&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;Language&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;csharp&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token cdata&quot;&gt;&amp;lt;![CDATA[public static $TypeOut$ $MethodName$(this $TypeIn$ $parameter$)
{
    $end$
}]]&amp;gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;Code&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;Snippet&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;CodeSnippet&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;CodeSnippets&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;a href=&quot;https://gist.github.com/marcduiker/64a512a057644533eefc.js&quot; rel=&quot;noopener&quot;&gt;Source&lt;/a&gt;&lt;/p&gt;&lt;p&gt;After importing the snippet via &lt;em&gt;Tools &amp;gt; Code Snippets Manager&lt;/em&gt; you can use it by typing &lt;code&gt;exm[TAB]&lt;/code&gt;.&lt;/p&gt;
 			</content>
    </entry><entry>
      <title>Sitecore Introduction for Developers</title>
      <link href="http://localhost:8080/articles/sitecore-introduction-for-developers/" />
      <updated>2013-05-25T00:00:00Z</updated>
      <id>http://localhost:8080/articles/sitecore-introduction-for-developers/</id>
      <content type="html">
				&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/4.1.sitecore_intro-400w.webp 400w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/4.1.sitecore_intro-400w.webp&quot; width=&quot;400&quot; height=&quot;286&quot; alt loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;h2 id=&quot;techtalk&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/sitecore-introduction-for-developers/#techtalk&quot; class=&quot;heading-anchor&quot;&gt;TechTalk&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;At a recent TechTalk at my employer I gave a presentation about &lt;a href=&quot;http://www.sitecore.net&quot; rel=&quot;noopener&quot;&gt;Sitecore&lt;/a&gt;. The presentation was targeted towards developers who have no experience with Sitecore whatsoever. I had 30 minutes to explain and show what Sitecore is and that was the biggest challenge of the presentation, there is just too much to tell! Next time I‚Äôll focus on one topic and go more in depth.&lt;/p&gt;&lt;p&gt;The HTML5 presentation is made with &lt;a href=&quot;http://lab.hakim.se/reveal-js/#/&quot; rel=&quot;noopener&quot;&gt;reveal.js&lt;/a&gt; and I‚Äôve uploaded it to &lt;a href=&quot;http://blogs.msdn.com/b/windowsazure/archive/2013/03/19/new-deploy-to-windows-azure-web-sites-from-dropbox.aspx&quot; rel=&quot;noopener&quot;&gt;Azure using Dropbox&lt;/a&gt; (super easy!).&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://marcduiker.azurewebsites.net/presentations/sitecore.html#/&quot; rel=&quot;noopener&quot;&gt;Have a look&lt;/a&gt; and feel free to share and reuse it!&lt;/p&gt;
 			</content>
    </entry><entry>
      <title>Presentations for Programmers</title>
      <link href="http://localhost:8080/articles/presentations-for-programmers/" />
      <updated>2013-04-19T00:00:00Z</updated>
      <id>http://localhost:8080/articles/presentations-for-programmers/</id>
      <content type="html">
				&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/3.1.presentations_for_programmers-400w.webp 400w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/3.1.presentations_for_programmers-400w.webp&quot; width=&quot;400&quot; height=&quot;258&quot; alt=&quot;Presentations for programmers&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;h2 id=&quot;great-slides-great-speaker-=-great-presentation&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/presentations-for-programmers/#great-slides-great-speaker-=-great-presentation&quot; class=&quot;heading-anchor&quot;&gt;Great Slides + Great Speaker = Great Presentation&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;In the last few years I find myself doing more and more (technical) presentations. I have to admit I even start to like it. I absolutely admire great speakers like &lt;a href=&quot;http://www.hanselman.com/&quot; rel=&quot;noopener&quot;&gt;Scott Hanselman&lt;/a&gt; (Microsoft) and &lt;a href=&quot;https://twitter.com/jerrong&quot; rel=&quot;noopener&quot;&gt;Tim Ward&lt;/a&gt; (Sitecore/CluedIn). They speak with such passion about technology that I immediately want to use or do whatever they promote. Although my presentation skills are nowhere near the level of these speakers I do have a good grasp of what makes a great presentation. So before becoming a great speaker lets start with creating great slides.&lt;/p&gt;&lt;h2 id=&quot;presentation-tools&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/presentations-for-programmers/#presentation-tools&quot; class=&quot;heading-anchor&quot;&gt;Presentation Tools&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Regardless of the content, a tool is required for creating slides and doing presentations. For quite some time I‚Äôve been on a quest to find a tool that fits all my needs.&lt;/p&gt;&lt;h3 id=&quot;powerpoint&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/presentations-for-programmers/#powerpoint&quot; class=&quot;heading-anchor&quot;&gt;Powerpoint&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;As many I‚Äôve started with Microsoft PowerPoint which is a very easy tool to create standard (and therefore boring) slides. I actually find it difficult to create interesting and captivating presentations with PowerPoint and that‚Äôs why I don‚Äôt use it.&lt;/p&gt;&lt;h3 id=&quot;prezi&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/presentations-for-programmers/#prezi&quot; class=&quot;heading-anchor&quot;&gt;Prezi&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Next I tried &lt;a href=&quot;http://prezi.com/&quot; rel=&quot;noopener&quot;&gt;Prezi&lt;/a&gt; for a while. Initially I was really blown away by this platform with its possibilities to zoom, translate, rotate etc. I still very much like these effects (when used in moderation) but I had some issues with applying custom styles and using the Prezi offline. The major downside for me is the lack of offline editing in all but the most expensive licenses. Another nuisance is the size of the presentations when used offline, these are huge compared to other platforms.&lt;/p&gt;&lt;h3 id=&quot;html5&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/presentations-for-programmers/#html5&quot; class=&quot;heading-anchor&quot;&gt;HTML5&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;And now there is &lt;a href=&quot;https://developer.mozilla.org/en/docs/HTML/HTML5&quot; rel=&quot;noopener&quot;&gt;HTML5&lt;/a&gt;. And I love it. A lot of HTML5 presentation frameworks are emerging and currently I‚Äôm experimenting with &lt;a href=&quot;https://revealjs.com/&quot; rel=&quot;noopener&quot;&gt;reveal.js&lt;/a&gt; (written by &lt;a href=&quot;http://hakim.se/&quot; rel=&quot;noopener&quot;&gt;Hakim El Hattab&lt;/a&gt;). Really have a go at this one if you haven‚Äôt seen it yet!&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/3.2.reveal-400w.webp 400w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/3.2.reveal-400w.webp&quot; width=&quot;400&quot; height=&quot;268&quot; alt=&quot;Reveal.js&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;An HTML5 presentation framework is just a collection of html, css and javascript files which you have complete control over (yay!). You can tweak the markup, styles and functions as desired. That immediately is also the downside for people who don‚Äôt have any web development skills (but they should stick to PowerPoint anyway üòâ. You need to know a bit of html to get started (although reveal.js has an online editor called &lt;a href=&quot;http://slides.com/&quot; rel=&quot;noopener&quot;&gt;slides.com&lt;/a&gt;). The presentation can be used either online or offline, it all works the same, only an up-to-date browser is required (I prefer Chrome).&lt;/p&gt;&lt;h2 id=&quot;how-its-made&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/presentations-for-programmers/#how-its-made&quot; class=&quot;heading-anchor&quot;&gt;How it‚Äôs made&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I used &lt;a href=&quot;http://www.sublimetext.com/2&quot; rel=&quot;noopener&quot;&gt;Sublime Text 2&lt;/a&gt; to create the html (based on Hakim‚Äôs &lt;a href=&quot;https://github.com/hakimel/reveal.js/blob/master/index.html&quot; rel=&quot;noopener&quot;&gt;template&lt;/a&gt;) and a custom css theme (I named it &lt;a href=&quot;http://marcduiker.azurewebsites.net/presentations/reveal.js/css/theme/programmer.css&quot; rel=&quot;noopener&quot;&gt;programmer.css&lt;/a&gt;). I used a monospaced webfont called &lt;a href=&quot;http://www.google.com/fonts/specimen/Inconsolata&quot; rel=&quot;noopener&quot;&gt;Inconsolata&lt;/a&gt; in order to get an IDE look and feel. The color scheme is based on the Monokai theme. Feel free to re-use or adapt the programmer.css theme in your own reveal.js presentations.&lt;/p&gt;
 			</content>
    </entry><entry>
      <title>Visual Studio Snippets for Unit Test Methods</title>
      <link href="http://localhost:8080/articles/visual-studio-snippets-for-unit-test-methods/" />
      <updated>2013-04-11T00:00:00Z</updated>
      <id>http://localhost:8080/articles/visual-studio-snippets-for-unit-test-methods/</id>
      <content type="html">
				&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/2.1.unit_test_snippet-414w.webp 414w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/2.1.unit_test_snippet-414w.webp&quot; width=&quot;414&quot; height=&quot;174&quot; alt=&quot;NUnit test snippet&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;h2 id=&quot;unit-test-method-naming&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/visual-studio-snippets-for-unit-test-methods/#unit-test-method-naming&quot; class=&quot;heading-anchor&quot;&gt;Unit Test Method Naming&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;As mentioned in a previous post, having a clear naming convention for unit test methods is important to keep tests readable and maintainable. Sticking to the convention might be difficult at first and require some discipline but is definitely worth it in the long run.&lt;/p&gt;&lt;h3 id=&quot;visual-studio-snippets&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/visual-studio-snippets-for-unit-test-methods/#visual-studio-snippets&quot; class=&quot;heading-anchor&quot;&gt;Visual Studio Snippets&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;In order to make it easy for myself (and other developers) to use the &lt;code&gt;&amp;lt;UnitOfWork&amp;gt; _ &amp;lt;StateUnderTest&amp;gt; _ &amp;lt;ExpectedBehaviour&amp;gt;&lt;/code&gt; naming convention, I‚Äôve created two code snippets, one for NUnit and one for MSTest.&lt;br&gt;After importing the snippets (see below) you can use the them by typing:&lt;/p&gt;&lt;p&gt;&lt;code&gt;nutest[TAB]&lt;/code&gt; (for NUnit)&lt;/p&gt;&lt;p&gt;or&lt;/p&gt;&lt;p&gt;&lt;code&gt;mstest[TAB]&lt;/code&gt; (for MSTest)&lt;/p&gt;&lt;p&gt;The resulting code is displayed at the top of this post. The snippets use three placeholders (marked in yellow) which make up the method name using the suggested convention. In addition I‚Äôve added Arrange, Act, Assert comments in order to help structuring the test.&lt;/p&gt;&lt;h3 id=&quot;importing-snippets&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/visual-studio-snippets-for-unit-test-methods/#importing-snippets&quot; class=&quot;heading-anchor&quot;&gt;Importing Snippets&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Once you‚Äôve downloaded the snippet(s) open Visual Studio and go to &lt;em&gt;Tools &amp;gt; Code Snippets Manager&lt;/em&gt;.&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/2.2.code_snippets_manager-440w.webp 440w, http://localhost:8080/assets/images/2.2.code_snippets_manager-650w.webp 650w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/2.2.code_snippets_manager-650w.webp&quot; width=&quot;650&quot; height=&quot;494&quot; alt=&quot;Code snippets manager&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;(If you open the Test folder you see two test related snippets already exist. These are &lt;code&gt;testc&lt;/code&gt; for an MSTest class and &lt;code&gt;testm&lt;/code&gt; for an MSTest method. The snippets do not use the suggested naming convention though.)&lt;/p&gt;&lt;p&gt;Click the &lt;em&gt;Import‚Ä¶&lt;/em&gt; button, select the downloaded snippets and click &lt;em&gt;Open&lt;/em&gt;. Then select the location to store the snippets (the Test folder seems obvious üòâ.&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/2.3.import_code_snippet-440w.webp 440w, http://localhost:8080/assets/images/2.3.import_code_snippet-650w.webp 650w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/2.3.import_code_snippet-650w.webp&quot; width=&quot;650&quot; height=&quot;533&quot; alt=&quot;Import code snippets&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;Click &lt;em&gt;Finish&lt;/em&gt; and the snippets are ready to be used. To verify that they are installed or to find out which shortcut they use open the &lt;em&gt;Code Snippets Manager&lt;/em&gt; and select the snippet.&lt;/p&gt;&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/2.4.check_code_snippet-440w.webp 440w, http://localhost:8080/assets/images/2.4.check_code_snippet-647w.webp 647w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/2.4.check_code_snippet-647w.webp&quot; width=&quot;647&quot; height=&quot;487&quot; alt=&quot;Check code snippet&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;/p&gt;&lt;p&gt;Reducing some boiler plate coding is always a good thing and I hope you‚Äôll find these snippets convenient.&lt;/p&gt;&lt;h2 id=&quot;resources&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/visual-studio-snippets-for-unit-test-methods/#resources&quot; class=&quot;heading-anchor&quot;&gt;Resources&lt;/a&gt;&lt;/h2&gt;&lt;ul class=&quot;list&quot;&gt;&lt;li&gt;&lt;a href=&quot;https://www.dropbox.com/s/86kpsnagd7ftgtc/nunit_testmethod.snippet&quot; rel=&quot;noopener&quot;&gt;NUnit code snippet&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://www.dropbox.com/s/870fi15c4oik5qo/ms_testmethod.snippet&quot; rel=&quot;noopener&quot;&gt;MSTest code snippet&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;P.S. Feel free to edit the snippets in order to change the shortcut or alter the code. They‚Äôre just XML files and there is some &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ms165394.aspx&quot; rel=&quot;noopener&quot;&gt;MSDN documentation&lt;/a&gt; you can work with.&lt;/p&gt;
 			</content>
    </entry><entry>
      <title>The importance of good unit tests and test reviews</title>
      <link href="http://localhost:8080/articles/the-importance-of-good-unit-tests-and-reviews/" />
      <updated>2013-04-09T00:00:00Z</updated>
      <id>http://localhost:8080/articles/the-importance-of-good-unit-tests-and-reviews/</id>
      <content type="html">
				&lt;p&gt;&lt;picture slot=&quot;image&quot; class=&quot;flow&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;http://localhost:8080/assets/images/1.goto-440w.webp 440w, http://localhost:8080/assets/images/1.goto-650w.webp 650w&quot; sizes=&quot;90vw&quot;&gt;&lt;img src=&quot;http://localhost:8080/assets/images/1.goto-650w.webp&quot; width=&quot;650&quot; height=&quot;176&quot; alt=&quot;KXCD GOTO&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot;&gt;&lt;/picture&gt;&lt;br&gt;&lt;em&gt;Cover credit: &lt;a href=&quot;https://xkcd.com/292/&quot; rel=&quot;noopener&quot;&gt;XKCD&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;&lt;p&gt;I‚Äôm currently following an &lt;a href=&quot;https://www.udemy.com/draft/14162/&quot; rel=&quot;noopener&quot;&gt;online TDD course&lt;/a&gt; by &lt;a href=&quot;http://osherove.com/&quot; rel=&quot;noopener&quot;&gt;Roy Osherove&lt;/a&gt;. I‚Äôm about half way through and although I have quite a bit of experience writing unit tests and using test frameworks I‚Äôve gained a lot of knowledge from the course already. Here are some highlights about good unit tests and test reviews.&lt;/p&gt;&lt;h2 id=&quot;good-unit-tests&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/the-importance-of-good-unit-tests-and-reviews/#good-unit-tests&quot; class=&quot;heading-anchor&quot;&gt;Good Unit Tests&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Roy stresses the importance of the three pillars of a good unit test:&lt;/p&gt;&lt;ol class=&quot;list&quot;&gt;&lt;li&gt;Readability&lt;/li&gt;&lt;li&gt;Maintainability&lt;/li&gt;&lt;li&gt;Trustworthiness&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;If any of these are not taken into account during development developers are likely to drop unit tests all together because it will become a burden to use instead of an aid.&lt;/p&gt;&lt;h2 id=&quot;unit-test-reviews&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/the-importance-of-good-unit-tests-and-reviews/#unit-test-reviews&quot; class=&quot;heading-anchor&quot;&gt;Unit Test Reviews&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;In one of the lessons Roy talks about the importance of test reviews. Having a high code coverage doesn‚Äôt guarantee your code is good because you could be testing the wrong thing. Doing test reviews can help in ensuring the unit tests are correct. The unit tests themselves should be easy to read and understand to ensure maintainability.&lt;/p&gt;&lt;h2 id=&quot;guidelines-for-writing-and-reviewing-tests&quot;&gt;&lt;a href=&quot;http://localhost:8080/articles/the-importance-of-good-unit-tests-and-reviews/#guidelines-for-writing-and-reviewing-tests&quot; class=&quot;heading-anchor&quot;&gt;Guidelines for Writing and Reviewing Tests&lt;/a&gt;&lt;/h2&gt;&lt;ol class=&quot;list&quot;&gt;&lt;li&gt;Unit tests should be easy to locate in the solution. Are the unit tests in a separate project?&lt;/li&gt;&lt;li&gt;Readability is key in unit testing. Is there a clear naming convention?&lt;/li&gt;&lt;/ol&gt;&lt;ul class=&quot;list&quot;&gt;&lt;li&gt;&lt;p&gt;Naming the unit test projects:&lt;/p&gt;&lt;p&gt;&lt;code&gt;&amp;lt;ProjectUnderTest&amp;gt;.UnitTests&lt;/code&gt;&lt;br&gt;(e.g. MyCompany.MyProduct.Business.UnitTests)&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Naming the unit test classes:&lt;/p&gt;&lt;p&gt;&lt;code&gt;&amp;lt;ClassUnderTest&amp;gt;Tests&lt;/code&gt;&lt;br&gt;(e.g. ShoppingBasketTests for the ShoppingBasket class)&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Naming the unit test methods:&lt;/p&gt;&lt;p&gt;&lt;code&gt;&amp;lt;UnitOfWork&amp;gt;_&amp;lt;StateUnderTest&amp;gt;_&amp;lt;ExpectedBehavior&amp;gt;&lt;/code&gt;&lt;br&gt;(e.g. CalculateDiscount_ForTenProducts_ReturnsDiscountOf5Percent see &lt;a href=&quot;http://osherove.com/blog/2005/4/3/naming-standards-for-unit-tests.html&quot; rel=&quot;noopener&quot;&gt;Roy‚Äôs blog&lt;/a&gt; for more examples)&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ol start=&quot;3&quot; class=&quot;list&quot;&gt;&lt;li&gt;Logic in unit tests should be avoided. Are there any if/else, switch, try/catch or loop statements in the test? Then refactor the test into separate tests.&lt;/li&gt;&lt;li&gt;Unit tests should be isolated and should always return the same result. Does the test have any dependencies to things beyond your control? (e.g. database, filesystem, DateTime, GUID)&lt;/li&gt;&lt;li&gt;A unit test should only test one thing. Are there several asserts in a unit test? Verify if you really need all those asserts. If you do, move them to individual unit tests.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;More guidelines on unit test reviews are given &lt;a href=&quot;http://artofunittesting.com/unit-testing-review-guidelines/&quot; rel=&quot;noopener&quot;&gt;here&lt;/a&gt;. In addition I can highly recommend reading &lt;a href=&quot;http://www.manning.com/osherove/&quot; rel=&quot;noopener&quot;&gt;‚ÄòThe Art Of Unit Testing‚Äô&lt;/a&gt;. The second edition of this excellent book is expected in Q3 of this year.&lt;/p&gt;
 			</content>
    </entry></feed>
